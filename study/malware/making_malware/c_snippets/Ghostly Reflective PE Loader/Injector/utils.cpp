#include "utils.h"

DWORD StringLenW(PWCHAR pStr) {
	DWORD len = 0;
	while (*pStr++ != 0) {
		++len;
	}
	return len;
}

bool StringCompareA(PCHAR pStr1, PCHAR pStr2) {
	while ((*(PBYTE)pStr1 == *(PBYTE)pStr2) && (*(PBYTE)pStr1 != 0) && (*(PBYTE)pStr2 != 0)) {
		++pStr1;
		++pStr2;
	}
	return (*(PBYTE)pStr1 == *(PBYTE)pStr2);
}

bool StringCompareW(PWCHAR pStr1, PWCHAR pStr2) {
	while ((*(PBYTE)pStr1 == *(PBYTE)pStr2) && (*(PBYTE)pStr1 != 0) && (*(PBYTE)pStr2 != 0)) {
		++pStr1;
		++pStr2;
	}
	return (*(PBYTE)pStr1 == *(PBYTE)pStr2);
}

void StringLowerW(PWCHAR pStrIn, PWCHAR pStrOut) {
	while (*(PBYTE)pStrIn != 0) {
		if (*(PBYTE)pStrIn >= 'A' && *(PBYTE)pStrIn <= 'Z') {
			*(PBYTE)(pStrOut++) = *(PBYTE)pStrIn - 'A' + 'a';
		}
		else {
			*(PBYTE)(pStrOut++) = *(PBYTE)pStrIn;
		}
		++pStrIn;
	}
}

void RtlZeroMemoryCustom(LPVOID pBuf, DWORD bufSize) {
	while (bufSize != 0) {
		*(PBYTE)pBuf = 0;
		pBuf = (PBYTE)pBuf + 1;
		--bufSize;
	}
}

void CopyBuffer(PBYTE pDestination, PBYTE pSource, DWORD howMuchToCopy) {
	while (howMuchToCopy != 0) {
		*pDestination++ = *pSource++;
		--howMuchToCopy;
	}
}

void Utf8ToUtf16String(IN PCHAR strIn, OUT PWCHAR strOut) {
	while (*(PBYTE)strIn != 0)
		*strOut++ = *strIn++;
}