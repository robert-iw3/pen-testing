#pragma once

#include <Windows.h>
#include <winternl.h>

/*
---------------------------------------------------------------------------------------------------
MACRO DEFINITIONS
*/
#define THREAD_CREATE_FLAGS_CREATE_SUSPENDED 0x00000001
#define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH 0x00000002
#define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER 0x00000004
#define THREAD_CREATE_FLAGS_LOADER_WORKER 0x00000010

/*
---------------------------------------------------------------------------------------------------
ENUMS
*/
typedef enum _SECTION_INHERIT {
	ViewShare = 1,
	ViewUnmap = 2
} SECTION_INHERIT, * PSECTION_INHERIT;

/*
---------------------------------------------------------------------------------------------------
HELPER STRUCTS
*/
typedef struct _DLL_CONTENTS_PARSED {
	IMAGE_FILE_HEADER FileHeader;
	IMAGE_OPTIONAL_HEADER OptionalHeader;

	DWORD64 ImageBase; // absolute
	DWORD SizeOfImage;
	DWORD AddressOfEntryPointOffset; // relative

	WORD NumOfSections;
	PIMAGE_SECTION_HEADER SectionHeaderFirst; // absolute

	PIMAGE_DATA_DIRECTORY pDataDirectoryExport;
	PIMAGE_DATA_DIRECTORY pDataDirectoryImport;
	PIMAGE_DATA_DIRECTORY pDataDirectoryReloc;
	PIMAGE_DATA_DIRECTORY pDataDirectoryException;
} DLL_CONTENTS_PARSED, *PDLL_CONTENTS_PARSED;

typedef struct _IMAGE_BASE_RELOCATION_ENTRY {
	WORD Offset : 12;
	WORD Type : 4;
} IMAGE_BASE_RELOCATION_ENTRY, * PIMAGE_BASE_RELOCATION_ENTRY;

/*
---------------------------------------------------------------------------------------------------
NT FUNCTIONS
*/

typedef NTSYSAPI NTSTATUS NTAPI NtMapViewOfSection(
	IN HANDLE               SectionHandle,
	IN HANDLE               ProcessHandle,
	IN OUT PVOID* BaseAddress OPTIONAL,
	IN ULONG                ZeroBits OPTIONAL,
	IN ULONG                CommitSize,
	IN OUT PLARGE_INTEGER   SectionOffset OPTIONAL,
	IN OUT PSIZE_T           ViewSize,
	IN                SECTION_INHERIT      InheritDisposition,
	IN ULONG                AllocationType OPTIONAL,
	IN ULONG                Protect);

typedef NTSYSAPI NTSTATUS NTAPI NtOpenSection(
	OUT PHANDLE             SectionHandle,
	IN ACCESS_MASK          DesiredAccess,
	IN POBJECT_ATTRIBUTES   ObjectAttributes);

typedef __kernel_entry NTSYSCALLAPI NTSTATUS NtAllocateVirtualMemory(
	IN      HANDLE    ProcessHandle,
	IN OUT PVOID* BaseAddress,
	IN      ULONG_PTR ZeroBits,
	IN OUT PSIZE_T   RegionSize,
	IN      ULONG     AllocationType,
	IN      ULONG     Protect
);

typedef __kernel_entry NTSYSCALLAPI NTSTATUS NtFreeVirtualMemory(
	IN      HANDLE  ProcessHandle,
	IN OUT PVOID* BaseAddress,
	IN OUT PSIZE_T RegionSize,
	IN      ULONG   FreeType
);

typedef NTSYSAPI NTSTATUS NtUnmapViewOfSection(
	IN           HANDLE ProcessHandle,
	IN PVOID  BaseAddress
);

typedef __kernel_entry NTSTATUS NTClose(
	IN HANDLE Handle
);

typedef NTSYSAPI NTSTATUS NTAPI LdrLoadDll(
	IN PWCHAR               PathToFile OPTIONAL,
	IN ULONG                Flags OPTIONAL,
	IN PUNICODE_STRING      ModuleFileName,
	OUT PHANDLE             ModuleHandle);

typedef NTSYSAPI NTSTATUS NTAPI NtProtectVirtualMemory(
	IN HANDLE               ProcessHandle,
	IN OUT PVOID* BaseAddress,
	IN OUT PSIZE_T           NumberOfBytesToProtect,
	IN ULONG                NewAccessProtection,
	OUT PULONG              OldAccessProtection);

typedef NTSYSAPI BOOLEAN RTLAddFunctionTable(
	IN PRUNTIME_FUNCTION FunctionTable,
	IN DWORD             EntryCount,
	IN DWORD64           BaseAddress
);

typedef NTSYSCALLAPI NTSTATUS NTAPI NTTerminateThread(
	IN HANDLE ThreadHandle,
	IN NTSTATUS ExitStatus
);

typedef BOOL(*DLLMAIN)(HINSTANCE, DWORD, LPVOID);

typedef struct _WINFUNC {
	NtMapViewOfSection *pNtMapViewOfSection;
	NtOpenSection* pNtOpenSection;
	NtAllocateVirtualMemory* pNtAllocateVirtualMemory;
	NtFreeVirtualMemory* pNtFreeVirtualMemory;
	NtUnmapViewOfSection* pNtUnmapViewOfSection;
	NTClose* pNtClose;
	LdrLoadDll* pLdrLoadDll;
	NtProtectVirtualMemory* pNtProtectVirtualMemory;
	RTLAddFunctionTable* pRtlAddFunctionTable;
	NTTerminateThread* pNtTerminateThread;
} WINFUNC, *PWINFUNC;