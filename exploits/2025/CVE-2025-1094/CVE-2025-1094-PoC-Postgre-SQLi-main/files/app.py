from flask import Flask, request
import psycopg2
import subprocess
import time
import logging
import os

app = Flask(__name__)
logging.basicConfig(level=logging.DEBUG)

@app.route('/vuln-endpoint', methods=['POST'])
def vuln_endpoint():
    input_data = request.form['input']
    app.logger.debug(f"Received input: {input_data}")
    
    attempts = 0
    max_attempts = 10
    while attempts < max_attempts:
        try:
            conn = psycopg2.connect(
                dbname="postgres",
                user="postgres",
                password="password",
                host="db",
                client_encoding="UTF8"
            )
            app.logger.debug("Database connected with UTF8")
            conn.set_client_encoding("BIG5")
            app.logger.debug("Client encoding set to BIG5")
            break
        except Exception as e:
            attempts += 1
            app.logger.debug(f"Connection attempt {attempts}/{max_attempts} failed: {e}")
            if attempts == max_attempts:
                app.logger.error("Failed to connect to database after max attempts")
                return "Database connection failed", 500
            time.sleep(1)
    
    cur = conn.cursor()
    # Remove mogrify to allow raw injection
    sql_command = f"SELECT * FROM test WHERE id = 'test' {input_data}"
    app.logger.debug(f"SQL command: {sql_command}")
    
    env = os.environ.copy()
    env["PGPASSWORD"] = "password"
    result = subprocess.run(
        ["psql", "-d", "postgres", "-U", "postgres", "-h", "db", "-c", sql_command],
        capture_output=True,
        text=True,
        env=env
    )
    app.logger.debug(f"psql stdout: {result.stdout}")
    app.logger.debug(f"psql stderr: {result.stderr}")
    
    conn.close()
    return "Executed"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
