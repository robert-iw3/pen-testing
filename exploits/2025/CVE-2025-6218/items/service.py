from __future__ import annotations
from base import ExtraArea, ExtraAreaMixin, ArchiveBlockMixin
from rartypes import ExtraAreaType, FlagBytePackingMixin, Flag, BlockType, BlockFlags
from utils.bytes import CRC
import leb128

class QuickOpenMixin(ExtraAreaMixin):
    class Flags(FlagBytePackingMixin, Flag):
        NONE=0x00
    def __init__(self, flags:Flags, offset:int, data_size:int, data:bytes):
        super().__init__()
        self.qoflags = flags
        self.offset = offset
        self.data_size = data_size
        self.data = data

    def mixin_compile(self):
        block_bytes = self.qoflags
        block_bytes += leb128.u.encode(self.offset)
        block_bytes += leb128.u.encode(self.data_size)
        block_bytes += self.data
        block_bytes = leb128.u.encode(len(block_bytes)) + block_bytes
        return CRC(block_bytes) + block_bytes  + self.data



class ServiceExtraMixin(ExtraAreaMixin):
    def __init__(self, data=b""):
        super().__init__()
        self.type = ExtraAreaType.SERVICE
        self.data = data
    
    def mixin_compile(self):
        return self.data

    
class QuickOpenExtra(QuickOpenMixin, ServiceExtraMixin, ExtraArea):
    def __init__(self, flags:QuickOpenMixin.Flags, offset:int, data_size:int, data:bytes):
        ExtraArea.__init__(self)
        ServiceExtraMixin.__init__(self, b"")
        QuickOpenMixin.__init__(self, flags, offset, data_size, data)

class ServiceExtra(ServiceExtraMixin, ExtraArea):
    def __init__(self, data=b""):
        ExtraArea.__init__(self)
        ServiceExtraMixin.__init__(self, data)

class AlternateStreamExtraMixin(ExtraAreaMixin):
    def __init__(self, streamname:str):
        super().__init__()
        self.streamname = streamname
    
    def mixin_compile(self):
        if(type(self.streamname) == str):
            return self.streamname.encode()
        elif(type(self.streamname) == bytes):
            return self.streamname
    
class AlternateStreamExtra(AlternateStreamExtraMixin, ServiceExtra, ExtraArea):
    def __init__(self, streamname:str):
        ExtraArea.__init__(self)
        ServiceExtra.__init__(self, b"")
        AlternateStreamExtraMixin.__init__(self, streamname)