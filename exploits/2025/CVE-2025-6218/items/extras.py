from __future__ import annotations
from base import ExtraArea, ExtraAreaMixin
from rartypes import ExtraAreaType, FlagBytePackingMixin, Flag
from utils.filetime import ArchiveStamp
import datetime
import hashlib
import leb128

class FileTimeMixin(ExtraAreaMixin):
    class Type(FlagBytePackingMixin):
        UNIX=0x01
        MODIF_PRESENT=0x02
        CREATION_PRESENT=0x04
        LAST_ACCESS_PRESENT=0x08
        UNIX_NANO=0x10

    def __init__(self, filetime:ArchiveStamp):
        super().__init__()
        self.type = ExtraAreaType.TIME
        self._flags = FileTimeMixin.Type.MODIF_PRESENT
        self.time = filetime

    def mixin_compile(self):
        return leb128.u.encode(self._flags) + self.time

class FiletimeExtraArea(FileTimeMixin, ExtraArea):
    def __init__(self, filetime:ArchiveStamp=ArchiveStamp(datetime.datetime.now())):
        ExtraArea.__init__(self)
        FileTimeMixin.__init__(self, filetime)


class FileEncryptionMixin(ExtraAreaMixin):
    class EncryptionVersion(FlagBytePackingMixin, Flag):
        AES=0x00
    class Flags(FlagBytePackingMixin, Flag):
        NONE=0x00
        PASS_CHECK_PRESENT=0x01
        TWEAKED_CHECKSUMS=0x02

    def __init__(self, kdf_count):
        super().__init__()
        self.type = ExtraAreaType.FILE_ENCRYPTION
        self.version = FileEncryptionMixin.EncryptionVersion.AES
        self.flags = FileEncryptionMixin.Flags.NONE
        self.kdf_count = kdf_count
        self.salt = b"\x00" * 16
        self.iv = b"\x00" * 16
        self.check = b"\x00" * 12

    def mixin_compile(self):
        data = bytes(self.flags)
        data += self.version
        data += self.kdf_count
        data += self.salt
        data += self.iv
        if self.flags & FileEncryptionMixin.Flags.PASS_CHECK_PRESENT:
            data += self.check
        return data

class FileEncryptionExtra(FileEncryptionMixin, ExtraArea):
    def __init__(self, kdf_count):
        ExtraArea.__init__(self)
        FileEncryptionMixin.__init__(self, kdf_count)

class HashMixin(ExtraAreaMixin):
    class Type(FlagBytePackingMixin, Flag):
        BLAKE2sp=0x00

    def __init__(self):
        super().__init__()
        self.type = ExtraAreaType.FILE_HASH
        self.hash_type = HashMixin.Type.BLAKE2sp
        self.data:bytes

    def mixin_compile(self):
        return self.hash_type + hashlib.blake2s(self.data).digest()

class HashExtra(HashMixin, ExtraArea):
    def __init__(self, data:bytes):
        ExtraArea.__init__(self)
        HashMixin.__init__(self)
        self.data = data

class FileVersionMixin(ExtraAreaMixin):
    def __init__(self, version:int):
        super().__init__()
        self.type = ExtraAreaType.FILE_VERSION
        self.flags = b"\x00"
        self.version = version

    def mixin_compile(self):
        return leb128.u.encode(self.version)

class FileVersionExtra(FileVersionMixin, ExtraArea):
    def __init__(self, version:int):
        ExtraArea.__init__(self)
        FileVersionMixin.__init__(self, version)

class UnixOwnerMixin(ExtraAreaMixin):
    class Flags(FlagBytePackingMixin, Flag):
        NONE=0x00
        USERNAME_PRESENT=0x01
        GROUPNAME_PRESENT=0x02
        NUMERIC_USER_ID_PRESENT=0x04
        NUMERIC_GROUP_ID_PRESENT=0x08

    def __init__(self, username="", groupname="", uid=None, gid=None):
        super().__init__()
        self.type = ExtraAreaType.UNIX_OWNER
        self.flags = UnixOwnerMixin.Flags.NONE
        self.username=username
        self.groupname=groupname
        self.uid=uid
        self.gid=gid
        if username:
            self.flags |= UnixOwnerMixin.Flags.USERNAME_PRESENT
        if groupname:
            self.flags |= UnixOwnerMixin.Flags.GROUPNAME_PRESENT
        if uid:
            self.flags |= UnixOwnerMixin.Flags.NUMERIC_USER_ID_PRESENT
        if gid:
            self.flags |= UnixOwnerMixin.Flags.NUMERIC_GROUP_ID_PRESENT



    def mixin_compile(self):
        mixin_bytes = self.type + self.flags
        if self.flags & UnixOwnerMixin.Flags.USERNAME_PRESENT:
            mixin_bytes += leb128.u.encode(len(self.username.encode())) + self.username.encode()
        if self.flags & UnixOwnerMixin.Flags.GROUPNAME_PRESENT:
            mixin_bytes += leb128.u.encode(len(self.groupname.encode())) + self.groupname.encode()
        if self.flags & UnixOwnerMixin.Flags.NUMERIC_USER_ID_PRESENT and self.uid!=None:
            mixin_bytes += leb128.u.encode(self.uid)
        if self.flags & UnixOwnerMixin.Flags.NUMERIC_GROUP_ID_PRESENT and self.gid!=None:
            mixin_bytes += leb128.u.encode(self.gid)

        return mixin_bytes

class UnixOwnerExtra(UnixOwnerMixin, ExtraArea):
    def __init__(self, username="", groupname="", uid=None, gid=None):
        ExtraArea.__init__(self)
        UnixOwnerMixin.__init__(self, username, groupname, uid, gid)



class FileRedirectMixin(ExtraAreaMixin):
    class Type(FlagBytePackingMixin, Flag):
        UNIX_SYMLINK=0x01
        WIN_SYMLINK=0x02
        WIN_JUNCTION=0x03
        HARDLINK=0x04
        FILECOPY=0x05
    class Flags(FlagBytePackingMixin, Flag):
        NONE=0x00
        DIRECTORY=0x01

    def __init__(self, target_name, redir_type=Type.FILECOPY, flags=Flags.NONE):
        self.type = ExtraAreaType.FILE_REDIRECTION
        self.name = target_name
        self.redir_type = redir_type
        self.flags = flags

    def mixin_compile(self):
        #print(self.name)
        if(type(self.name) == str):
            return self.redir_type + self.flags + leb128.u.encode(len(self.name.encode())) + self.name.encode()
        if(type(self.name) == bytes):
            return self.redir_type + self.flags + leb128.u.encode(len(self.name)) + self.name


class FileRedirectExtra(FileRedirectMixin, ExtraArea):
    def __init__(self, target_name, redir_type=FileRedirectMixin.Type.FILECOPY, flags=FileRedirectMixin.Flags.NONE):
        ExtraArea.__init__(self)
        FileRedirectMixin.__init__(self, target_name, redir_type, flags)