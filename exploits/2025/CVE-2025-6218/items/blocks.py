from __future__ import annotations
import leb128
import datetime
from typing import Optional, Union
from enum import Flag
from utils.bytes import CRC, FlagBytePackingMixin
from utils.filetime import ArchiveStamp
from base import ArchiveBlock, ArchiveBlockMixin
from rartypes import BlockType, FileFlags, FileAttributes, HostOS, BlockFlags
from items.extras import FiletimeExtraArea
from items.service import AlternateStreamExtra

class FileBlockMixin(ArchiveBlockMixin):
    def __init__(self, filename:Union[str,bytes],
                 data:Optional[bytes]=None,
                 fileflags=FileFlags.NONE,
                 attributes=FileAttributes.ARCHIVE,
                 time:datetime.datetime=datetime.datetime.now(),
                 host_os=HostOS.WINDOWS):
        super().__init__()
        self.type = BlockType.FILE
        self.file_flags:FileFlags = fileflags
        self.attributes:FileAttributes = attributes
        self.mtime:int = 0
        self.compression_method:bytes = b"\x80\x00" # compression is proprietary and not implemented, store only
        self.host_os:HostOS = host_os
        self.name:Union[str,bytes] = filename
        self.time = ArchiveStamp(time, type=ArchiveStamp.Type.FILETIME)
        if(data):
            self.add_data(data)

        if(self.file_flags & FileFlags.CRC_PRESENT):
            self.add_crc()

        if(self.file_flags & FileFlags.UNIX_TIME):
            self.time.type=ArchiveStamp.Type.UNIX
        else:
            self.add_extra(FiletimeExtraArea(self.time))

    def add_crc(self):
        self.file_flags |= FileFlags.CRC_PRESENT

    def remove_crc(self):
        self.file_flags &= ~FileFlags.CRC_PRESENT

    def mixin_compile(self):
        mixin_bytes =  self.file_flags
        mixin_bytes += leb128.u.encode(len(self.data))
        mixin_bytes += self.attributes
        if FileFlags.UNIX_TIME & self.file_flags:
            mixin_bytes += self.time
        if FileFlags.CRC_PRESENT & self.file_flags:
            mixin_bytes += CRC(self.data)
        mixin_bytes += self.compression_method
        mixin_bytes += self.host_os
        if(type(self.name)==str):
            mixin_bytes += leb128.u.encode(len(self.name.encode(encoding="utf-8"))) + self.name.encode(encoding="utf-8")
        elif(type(self.name)==bytes):
            mixin_bytes += leb128.u.encode(len(self.name)) + self.name
        return mixin_bytes

class FileBlock(FileBlockMixin, ArchiveBlock):
    def __init__(self,
                 filename:Union[str,bytes],
                 data:Optional[bytes]=None,
                 fileflags=FileFlags.NONE,
                 attributes=FileAttributes.ARCHIVE,
                 time:datetime.datetime=datetime.datetime.now(),
                 host_os=HostOS.WINDOWS):
        ArchiveBlock.__init__(self)
        FileBlockMixin.__init__(self, filename, data, fileflags, attributes, time, host_os)



class AlternateStreamMixin(ArchiveBlockMixin):
    class Flags(FlagBytePackingMixin, Flag):
        NONE=0x00
        DIRECTORY=0x01

    def __init__(self,
                 streamname,
                 block_flags:BlockFlags=(BlockFlags.BLOCK_DEPENDS_ON_PREV | BlockFlags.HAS_EXTRA)
                 ):
        self.file_flags: FileFlags
        ArchiveBlockMixin.__init__(self)
        self.type = BlockType.SERVICE
        self.flags |= block_flags
        self.extras = []
        self.add_extra(AlternateStreamExtra(streamname))
        self.add_crc() #type:ignore


class AlternateStreamBlock(AlternateStreamMixin, FileBlockMixin, ArchiveBlock):
    def __init__(self, data:bytes, streamname):
        ArchiveBlock.__init__(self)
        FileBlockMixin.__init__(self, "STM", data)
        AlternateStreamMixin.__init__(self, streamname)

