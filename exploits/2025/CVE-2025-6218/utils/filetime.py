import ctypes
import datetime
import struct
from utils.bytes import BytePackingMixin

class _FILETIME(ctypes.Structure):
    _fields_ = [("dwLowDateTime", ctypes.c_uint32),
                ("dwHighDateTime", ctypes.c_uint32)]

class WinFileTime(BytePackingMixin):
    def __init__(self, dt:datetime.datetime):
        self.windows_epoch_diff = (dt - datetime.datetime(1601, 1, 1)).total_seconds() * 10000000
        self.filetime = _FILETIME()
        self.filetime.dwLowDateTime = int(self.windows_epoch_diff) & 0xFFFFFFFF
        self.filetime.dwHighDateTime = int(self.windows_epoch_diff) >> 32

    def __bytes__(self):
        return struct.pack("I", self.filetime.dwLowDateTime) + struct.pack("I", self.filetime.dwHighDateTime)

class ArchiveStamp(BytePackingMixin):
    class Type:
        FILETIME=0x01
        UNIX=0x02
        UNIX_NANO=0x04

    def __init__(self, timestamp:datetime.datetime, type=Type.FILETIME):
        self.timestamp = timestamp
        self.type = type

    def __bytes__(self):
        if self.type == ArchiveStamp.Type.FILETIME:
            return bytes(WinFileTime(self.timestamp))
        elif self.type == ArchiveStamp.Type.UNIX:
            return struct.pack("I", int(self.timestamp.timestamp()))
        elif self.type == ArchiveStamp.Type.UNIX_NANO:
            return struct.pack("I", int(self.timestamp.timestamp())) + struct.pack("I", self.timestamp.microsecond)
        else:
            raise ValueError("Invalid timestamp type")