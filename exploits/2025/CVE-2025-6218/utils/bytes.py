import struct
import zlib
import leb128
def is_bytes(obj) -> bool:
    return isinstance(obj, (bytes, bytearray, BytePackingMixin))

class BytePackingMixin:
    def __bytes__(self) -> bytes:
        raise NotImplementedError("You should implement __bytes__ in your class")

    def __add__(self, other) -> bytes:
        if(not is_bytes(other)):
            other = bytes(other)
            #raise NotImplementedError(f"Cannot add bytes to non-bytes object: {type(other)}")
        return bytes(self) + other

    def __radd__(self, other) -> bytes:
        if(not is_bytes(other)):
            other = bytes(other)
            #raise NotImplementedError(f"Cannot add bytes to non-bytes object: {type(other)}")
        return other + bytes(self)

class MixinBytePackingMixin(BytePackingMixin):
    def mixin_compile(self) -> bytes:
        raise NotImplementedError("Why are you here?")

    def __bytes__(self) -> bytes:
        return self.mixin_compile()

class BlockBytePackingMixin(BytePackingMixin):
    def compile(self):
        raise NotImplementedError("Why are you here?")

    def __bytes__(self):
        return self.compile()

class CRC(BytePackingMixin):
    def __init__(self, data:bytes):
        crc = zlib.crc32(data)
        self.crc_bytes = struct.pack("<I", crc)

    def __bytes__(self):
        return self.crc_bytes

class FlagBytePackingMixin(BytePackingMixin):
    def __bytes__(self):
        return bytes(leb128.u.encode(self.value)) # type:ignore
