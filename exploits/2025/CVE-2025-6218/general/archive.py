from __future__ import annotations
from typing import List

from base import ArchiveBlock
from items.blocks import FileBlock
from general.blocks import MainArchiveBlock, ArchiveEndBlock

class Rar:
    MAGIC = b"\x52\x61\x72\x21\x1A\x07\x01\x00"
    def __init__(self) -> None:
        self.main = MainArchiveBlock()
        self.blocks:List[ArchiveBlock] = []
        self.end = ArchiveEndBlock()

    def compile(self):
        self.buffer = Rar.MAGIC + self.main.compile()
        for block in self.blocks:
            self.buffer += block.compile()
        self.buffer += self.end.compile()
        return self.buffer

    def save(self, filename):
        with open(filename, "wb") as f:
            f.write(self.compile())

    def add_block(self, block:ArchiveBlock):
        self.blocks.append(block)

    def add_file(self, filename:str, content:bytes):
        new_file = FileBlock(filename, content)
        self.add_block(new_file)

    def load_file(self, filepath:str):
        with open(filepath, "rb") as f:
            content = f.read()
        self.add_file(filepath, content)