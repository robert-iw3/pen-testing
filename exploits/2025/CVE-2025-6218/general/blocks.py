from __future__ import annotations
import leb128

from base import ArchiveBlock, ArchiveBlockMixin
from general.extras import LocatorExtraArea
from rartypes import BlockType, BlockFlags, FlagBytePackingMixin, Flag

class MainArchiveMixin(ArchiveBlockMixin):
    class Flags(FlagBytePackingMixin, Flag):
        NONE=0x00
        MULTIVOLUME=0x01
        VOLUME_NO=0x02
        SOLID=0x04
        REC_PRESENT=0x08
        LOCKED=0x10

    def __init__(self,
                 add_locator=True,
                 add_recovery=False,
                 skip_unknown=True,
                 archive_flags=Flags.NONE):
        super().__init__()
        self.type = BlockType.MAIN
        self.flags:BlockFlags = BlockFlags.NONE
        self.archive_flags:MainArchiveMixin.Flags = archive_flags
        self.volume_no:int

        if add_locator:
            self.flags |= BlockFlags.HAS_EXTRA
            self.add_extra(LocatorExtraArea())

        if add_recovery:
            self.flags |= BlockFlags.HAS_EXTRA
            #self.add_extra(RecoveryExtraArea())

        if skip_unknown:
            self.flags |= BlockFlags.UNKNOWN_TYPE

    def mixin_compile(self):
        mixin_bytes = bytes(self.archive_flags)
        if MainArchiveMixin.Flags.VOLUME_NO & self.archive_flags:
            mixin_bytes += leb128.u.encode(self.volume_no)
        return mixin_bytes

class ArchiveEndMixin(ArchiveBlockMixin):
    class Flags(FlagBytePackingMixin, Flag):
        FINAL=0x00
        VOLUME=0x01

    def __init__(self, skip_unknown=True, final=True):
        super().__init__()
        self.type = BlockType.ARCHIVE_END
        self.flags:BlockFlags = BlockFlags.NONE
        self.end_flags = ArchiveEndMixin.Flags.FINAL
        if not final:
            self.end_flags = ArchiveEndMixin.Flags.VOLUME
        if skip_unknown:
            self.flags |= BlockFlags.UNKNOWN_TYPE

    def mixin_compile(self):
        return self.end_flags

class MainArchiveBlock(MainArchiveMixin, ArchiveBlock):
    def __init__(self):
        ArchiveBlock.__init__(self)
        MainArchiveMixin.__init__(self)

class ArchiveEndBlock(ArchiveEndMixin, ArchiveBlock):
    def __init__(self):
        ArchiveBlock.__init__(self)
        ArchiveEndMixin.__init__(self)