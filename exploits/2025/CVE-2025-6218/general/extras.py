from rartypes import GeneralExtraAreaType, FlagBytePackingMixin
from base import ExtraArea, ExtraAreaMixin, MainExtraMixin
import leb128
from utils.filetime import ArchiveStamp
import datetime
from typing import Optional

class LocatorExtraMixin(MainExtraMixin, ExtraAreaMixin):
    class Flags(FlagBytePackingMixin):
        QUICKOPEN=0x01
        RECOVERY=0x02
    def __init__(self, locator_offset=0, recovery_offset=0):
        super().__init__()
        self.type = GeneralExtraAreaType.LOCATOR
        self.mixin_flags = LocatorExtraMixin.Flags.QUICKOPEN
        self.locator_offset:int = locator_offset
        self.recovery_offset:int = recovery_offset

    def mixin_compile(self):
        #print(self.mixin_flags)
        data = leb128.u.encode(self.mixin_flags)
        if LocatorExtraMixin.Flags.QUICKOPEN & self.mixin_flags:
            data += b"\x80\x80\x00" #leb128.u.encode(self.locator_offset)
        if LocatorExtraMixin.Flags.RECOVERY & self.mixin_flags:
            data += leb128.u.encode(self.recovery_offset)
        return data

class MetadataExtraMixin(MainExtraMixin, ExtraAreaMixin):
    class Flags(FlagBytePackingMixin):
        ARCHIVENAME=0x01
        ARCHIVE_CREATION=0x02
        UNIX_TIME=0x04
        UNIX_NANO=0x08

    def __init__(self, 
                 archive_name:str="", 
                 archive_creation:Optional[datetime.datetime]=None, 
                 archive_timestamp_format=ArchiveStamp.Type.FILETIME):
        super().__init__()
        self.type = GeneralExtraAreaType.METADATA
        if not archive_creation or archive_name:
            raise ValueError("Either archive_name or archive_creation must be set")
        self.archive_creation = ArchiveStamp(archive_creation, type=archive_timestamp_format)
        self.name = archive_name

        if(archive_creation):
            self.mixin_flags = MetadataExtraMixin.Flags.ARCHIVE_CREATION
            if(archive_timestamp_format == ArchiveStamp.Type.UNIX):
                self.mixin_flags |= MetadataExtraMixin.Flags.UNIX_TIME
            if(archive_timestamp_format == ArchiveStamp.Type.UNIX_NANO):
                self.mixin_flags |= MetadataExtraMixin.Flags.UNIX_NANO

        if(archive_name):
            self.mixin_flags |= MetadataExtraMixin.Flags.ARCHIVENAME

        self.mixin_flags = MetadataExtraMixin.Flags.ARCHIVENAME
        self.archive_name:str = ""
        self.archive_creation = ArchiveStamp(datetime.datetime.now())

    def mixin_compile(self):
        data = bytes(self.mixin_flags)
        if MetadataExtraMixin.Flags.ARCHIVENAME & self.mixin_flags:
            data += leb128.u.encode(len(self.archive_name.encode())) + self.archive_name.encode()
        
        if MetadataExtraMixin.Flags.ARCHIVE_CREATION & self.mixin_flags:
            data += self.archive_creation

        return data

class LocatorExtraArea(LocatorExtraMixin, ExtraArea):
    def __init__(self):
        ExtraArea.__init__(self)
        LocatorExtraMixin.__init__(self)