from __future__ import annotations

from typing import List
import leb128
import datetime

from utils.bytes import CRC
from base import ItemBlock, ItemBlockMixin, ExtraArea, ExtraAreaMixin
from rartypes import BlockType, FileFlags, FileAttributes, HostOS, ExtraAreaType, FlagBytePackingMixin, reduce_flags
from utils.filetime import WinFileTime

class FileBlockMixin(ItemBlockMixin):
    def __init__(self, filename:str, data:bytes, attributes=[FileAttributes.ARCHIVE], crc=True):
        super().__init__()
        self.type = BlockType.FILE
        self.file_flags:List[FileFlags] = []
        self.attributes:List[FileAttributes] = attributes
        self.mtime:int = 0
        self.compression_method:bytes = b"\x80\x00" # compression is proprietary and not implemented, store only
        self.host_os:HostOS = HostOS.WINDOWS
        self.name:str = filename
        self.add_data(data)
        self.add_extra(FiletimeExtraArea())
        if(crc):
            self.add_crc()

    def add_crc(self):
        if(FileFlags.CRC_PRESENT not in self.file_flags):
            self.file_flags.append(FileFlags.CRC_PRESENT)
    
    def remove_crc(self):
        if(FileFlags.CRC_PRESENT in self.file_flags):
            self.file_flags.remove(FileFlags.CRC_PRESENT)

    def mixin_compile(self):
        mixin_bytes =  reduce_flags(self.file_flags)
        mixin_bytes += leb128.u.encode(len(self.data)) 
        mixin_bytes += reduce_flags(self.attributes)
        if FileFlags.TIME_PRESENT in self.file_flags:
            mixin_bytes += leb128.u.encode(self.mtime)
        if FileFlags.CRC_PRESENT in self.file_flags:
            mixin_bytes += CRC(self.data)
        mixin_bytes += self.compression_method
        mixin_bytes += self.host_os
        mixin_bytes += leb128.u.encode(len(self.name.encode())) + self.name.encode()
        return mixin_bytes

class FileTimeMixin(ExtraAreaMixin):
    class Type(FlagBytePackingMixin):
        UNIX=0x01
        MODIF_PRESENT=0x02
        CREATION_PRESENT=0x04
        LAST_ACCESS_PRESENT=0x08
        UNIX_NANO=0x10
    def __init__(self, filetime:WinFileTime):
        self.type = ExtraAreaType.TIME
        self.flags = FileTimeMixin.Type.MODIF_PRESENT
        self.data = self.flags + WinFileTime(datetime.datetime.now())

class FiletimeExtraArea(FileTimeMixin, ExtraArea):
    def __init__(self, filetime:WinFileTime=WinFileTime(datetime.datetime.now())):
        ExtraArea.__init__(self)
        FileTimeMixin.__init__(self, filetime)

class FileBlock(FileBlockMixin, ItemBlock):
    def __init__(self, filename:str, data:bytes):
        ItemBlock.__init__(self)
        FileBlockMixin.__init__(self, filename, data)
