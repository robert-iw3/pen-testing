#include <windows.h>
#include <iostream>

typedef void(__stdcall* EnableExceptionHandlerFunc)();
typedef void(__stdcall* CreateDumpFunc)();

int main() {
    std::cout << "Program started but CtxExceptionHandler is not yet loaded." << std::endl;
    std::cout << "You can change it's registry setting now." << std::endl;
    system("pause");

    std::cout << "Loading CCtxExceptionHandler64.dll" << std::endl;
    HMODULE hDll = LoadLibrary(L"C:\\Program Files\\Citrix\\ExceptionHandler\\CCtxExceptionHandler64.dll");
    if (!hDll) {
        std::cerr << "Failed to load CCtxExceptionHandler64.dll" << std::endl;
        return 1;
    }

    std::cout << "Calling EnableExceptionHandler()" << std::endl;
    EnableExceptionHandlerFunc EnableExceptionHandler =
        (EnableExceptionHandlerFunc)GetProcAddress(hDll, "EnableExceptionHandler");

    if (!EnableExceptionHandler) {
        std::cerr << "Failed to find EnableExceptionHandler function." << std::endl;
        FreeLibrary(hDll);
        return 1;
    }
    EnableExceptionHandler();

    std::cout << "Calling CreateDump()" << std::endl;
    CreateDumpFunc CreateDump =
        (CreateDumpFunc)GetProcAddress(hDll, "CreateDump");
    if (!CreateDump) {
        std::cerr << "Failed to find CreateDump function." << std::endl;
        FreeLibrary(hDll);
        return 1;
    }
    CreateDump();
    FreeLibrary(hDll);

    return 0;
}
