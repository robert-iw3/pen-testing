#!/usr/bin/env python3
"""
CVE-2025-6543 - Citrix NetScaler ADC / Gateway
"""

import argparse, re, subprocess, sys
from pathlib import Path

SAFE = {
    "14.1":  (47, 46),
    "13.1":  (59, 19),
    "13.1F": (37, 236),
    "13.1N": (37, 236),
}

BANNER_RX = re.compile(r"(?:NS|NetScaler).*?([0-9]+\.[0-9]+)-([0-9]+)\.([0-9]+)")

def parse_build(text: str):
    m = BANNER_RX.search(text)
    if not m:
        return None
    r, major, minor = m.group(1), int(m.group(2)), int(m.group(3))
    return r, (major, minor)

def vulnerable(rama, build):
    key = rama if rama != "13.1" else "13.1"
    if "FIPS" in rama: key = "13.1F"
    if "NDCPP" in rama.upper(): key = "13.1N"
    safe = SAFE.get(key)
    if safe is None:
        return True
    return build < safe

def snmp_banner(host, community, timeout=3):
    """
    Lee sysDescr.0 vía snmpget (se requiere net-snmp instalado).
    """
    try:
        out = subprocess.check_output(
            ["snmpget", "-v2c", "-c", community, "-Oqv", host, "1.3.6.1.2.1.1.1.0"],
            timeout=timeout, text=True, stderr=subprocess.DEVNULL)
        return out.strip()
    except Exception:
        return ""

def cli_banner(host, user, password):
    try:
        out = subprocess.check_output(
            ["sshpass", "-p", password,
             "ssh", "-o", "BatchMode=yes", "-o", "StrictHostKeyChecking=no",
             f"{user}@{host}", "show version | head -n 4"],
            timeout=4, text=True, stderr=subprocess.DEVNULL)
        return out
    except Exception:
        return ""

def check_host(host, args):
    origin = ""
    banner = snmp_banner(host, args.community) if args.snmp else ""
    if banner:
        origin = "SNMP"
    elif args.ssh_user and args.ssh_pass:
        banner = cli_banner(host, args.ssh_user, args.ssh_pass)
        origin = "SSH/CLI"
    if not banner:
        print(f"[?] {host}: imposible obtener versión (SNMP o SSH requeridos)")
        return
    parsed = parse_build(banner)
    if not parsed:
        print(f"[?] {host}: firma no reconocida: {banner[:60]}...")
        return
    rama, build = parsed
    vuln = vulnerable(rama, build)
    state = "VULNERABLE ⚠️" if vuln else "Parcheado ✅"
    print(f"[{state}] {host} -> {rama}-{build[0]}.{build[1]}   vía {origin}")

def main():
    ap = argparse.ArgumentParser(description="Checker CVE-2025-6543 - SGkgRENUSQ")
    ap.add_argument("hosts", nargs="+", help="IPs/FQDNs a comprobar")
    ap.add_argument("-c", "--community", default="public", help="Community SNMP (v2c)")
    ap.add_argument("--no-snmp", dest="snmp", action="store_false", help="Deshabilita SNMP")
    ap.add_argument("--ssh-user", help="Usuario SSH para 'show version'")
    ap.add_argument("--ssh-pass", help="Password SSH")
    args = ap.parse_args()
    for h in args.hosts:
        check_host(h, args)

if __name__ == "__main__":
    main()
