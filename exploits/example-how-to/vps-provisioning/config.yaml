# Example config.yaml for DigitalOcean
provider: digitalocean
credentials:
  token: your_do_token  # Personal Access Token from DigitalOcean
instance:
  name: my-vps
  region: nyc3  # e.g., nyc3, sfo3, etc.
  size: s-1vcpu-1gb  # e.g., s-1vcpu-1gb
  image: ubuntu-24-04-x64  # Latest LTS as of 2025
  ssh_key: /path/to/your/private_key.pem  # Local private key path (for SSH connection)
  ssh_pub_key_id: 12345678  # SSH key ID from DigitalOcean dashboard (upload pub key first)
provision:  # Special provisions to set up
  - docker  # Install official Docker Engine
  - podman  # Install Podman
  - python  # Ensure Python 3, pip, venv
tools_to_install:  # Additional apt packages
  - git
  - vim
repos_to_clone:  # Git repos to clone to /home/ubuntu/
  - https://github.com/example/repo1.git
  - https://github.com/example/repo2.git
networking:
  firewall_rules:  # Inbound rules
    - protocol: tcp
      ports: [22, 80, 443]  # Single or list of ports
      sources: 0.0.0.0/0  # Be careful with sources!

# For AWS, change provider: aws
# credentials:
#   access_key: your_aws_access_key
#   secret_key: your_aws_secret_key
# instance:
#   ...
#   region: us-east-1
#   size: t3.micro
#   image: ami-0abcdef1234567890  # Latest Ubuntu 24.04 AMI ID for your region (find at https://cloud-images.ubuntu.com/locator/ec2/ search "noble amd64 hvm:ebs-ssd us-east-1")
#   key_name: my-aws-key  # Existing key pair name or will create new and save private to ssh_key path
# Note: AMIs change frequently; use AWS CLI: aws ec2 describe-images --owners 099720109477 --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-noble-24.04-amd64-server-*" "Name=state,Values=available" --query 'Images[*].[ImageId,CreationDate]' --output table --region us-east-1

# For Vultr
# provider: vultr
# credentials:
#   api_key: your_vultr_api_key  # From Vultr dashboard
# instance:
#   name: my-vps  # Label
#   region: ewr  # Region ID, e.g., ewr for New Jersey
#   plan: vc2-1c-1gb  # Plan ID, e.g., vc2-1c-1gb for 1vCPU/1GB
#   os_id: 362  # OS ID, e.g., 362 for Ubuntu 22.04; get from /v2/os
#   ssh_key_ids: ["abc123def456"]  # Array of SSH key IDs; get from /v2/ssh-keys
#   hostname: myhost  # Optional hostname

# For Linode
# provider: linode
# credentials:
#   token: your_linode_token  # Personal Access Token
# instance:
#   name: my-linode  # Label
#   region: us-southeast  # Region, e.g., us-southeast
#   size: g6-nanode-1  # Type, e.g., g6-nanode-1 for Nanode 1GB
#   image: linode/ubuntu24.04  # Image ID
#   ssh_key: "ssh-rsa AAAAB3NzaC1yc2E... user@example.com"  # Public key string (upload or provide directly)
#   root_pass: your_root_password  # Optional, generated if not provided

# For Hostinger
# provider: hostinger
# credentials:
#   api_key: your_hostinger_api_key  # From hPanel
# instance:
#   name: my-vps
#   data_center: us-east  # Data center ID; get from API /api/vps/v1/data-centers
#   plan: kvm-1  # Plan ID, e.g., kvm-1; check available plans
#   os_template: ubuntu-24.04  # OS template ID
#   ssh_key: "ssh-rsa AAAAB3NzaC1yc2E... user@example.com"  # Public SSH key
#   hostname: myhost
# Note: Hostinger API parameters are assumed based on typical; verify via Postman collection or docs for exact.

# For Fly.io (note: Fly.io is PaaS for machines/apps, not traditional VPS; provisions a Machine)
# provider: fly
# credentials:
#   token: your_fly_api_token  # From flyctl auth token
# instance:
#   app_name: my-app  # App name (created if not exists)
#   name: my-machine  # Machine name
#   region: iad  # Region, e.g., iad for Virginia
#   image: ubuntu:24.04  # Docker image
#   size: shared-cpu-1x  # Size preset, e.g., shared-cpu-1x (1 shared CPU, 256MB RAM); or custom guest: {cpus: 1, memory_mb: 1024}
#   ssh_key: "ssh-rsa AAAAB3NzaC1yc2E... user@example.com"  # Public key for SSH access (Fly uses fly ssh)