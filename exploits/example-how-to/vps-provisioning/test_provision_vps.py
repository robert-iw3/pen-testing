"""
bash

pip install unittest-mock
python3 -m unittest test_provision_vps.py -v

"""
import unittest
from unittest.mock import patch, MagicMock, mock_open
import yaml
import provision_vps

class TestProvisionVPS(unittest.TestCase):
    def setUp(self):
        self.config = {
            'provider': 'digitalocean',
            'credentials': {'token': 'fake_token'},
            'instance': {
                'name': 'test-vps',
                'region': 'nyc3',
                'size': 's-1vcpu-1gb',
                'image': 'ubuntu-24-04-x64',
                'ssh_key': '/fake/path/key.pem',
                'ssh_pub_key_id': '123456'
            },
            'provision': ['docker', 'python'],
            'tools_to_install': ['git'],
            'repos_to_clone': ['https://github.com/example/repo.git'],
            'networking': {
                'firewall_rules': [
                    {'protocol': 'tcp', 'ports': [22, 80], 'sources': '0.0.0.0/0'}
                ]
            }
        }

    def test_load_config_yaml(self):
        with patch('builtins.open', mock_open(read_data=yaml.dump(self.config))):
            config = provision_vps.load_config('config.yaml')
        self.assertEqual(config, self.config)

    def test_load_config_json(self):
        with patch('builtins.open', mock_open(read_data='{"provider": "digitalocean"}')):
            config = provision_vps.load_config('config.json')
        self.assertEqual(config, {'provider': 'digitalocean'})

    def test_load_config_missing_file(self):
        with patch('os.path.exists', return_value=False):
            with self.assertRaises(FileNotFoundError):
                provision_vps.load_config('missing.yaml')

    @patch('provision_vps.digitalocean.Manager')
    @patch('provision_vps.digitalocean.Droplet')
    @patch('provision_vps.digitalocean.Firewall')
    def test_deploy_digitalocean(self, mock_firewall, mock_droplet, mock_manager):
        mock_droplet_instance = MagicMock()
        mock_droplet_instance.ip_address = '1.2.3.4'
        mock_droplet_instance.get_status.return_value = 'active'
        mock_droplet.return_value = mock_droplet_instance
        ip = provision_vps.deploy_digitalocean(self.config)
        self.assertEqual(ip, '1.2.3.4')
        mock_droplet.assert_called_with(
            token='fake_token',
            name='test-vps',
            region='nyc3',
            image='ubuntu-24-04-x64',
            size_slug='s-1vcpu-1gb',
            ssh_keys=['123456'],
            backups=False
        )
        mock_droplet_instance.create.assert_called_once()
        mock_firewall.assert_called_once()

    @patch('provision_vps.boto3.client')
    @patch('builtins.open', new_callable=mock_open)
    @patch('os.chmod')
    def test_deploy_aws_new_key(self, mock_chmod, mock_open_file, mock_boto3):
        mock_ec2 = MagicMock()
        mock_boto3.return_value = mock_ec2
        mock_ec2.describe_key_pairs.side_effect = Exception('InvalidKeyPair.NotFound')
        mock_ec2.create_key_pair.return_value = {'KeyMaterial': 'private_key_data'}
        mock_ec2.create_security_group.return_value = {'GroupId': 'sg-123'}
        mock_ec2.run_instances.return_value = {'Instances': [{'InstanceId': 'i-123'}]}
        mock_ec2.describe_instances.return_value = {
            'Reservations': [{'Instances': [{'PublicIpAddress': '1.2.3.4'}]}]
        }
        self.config['provider'] = 'aws'
        self.config['credentials'] = {'access_key': 'fake_key', 'secret_key': 'fake_secret'}
        self.config['instance']['region'] = 'us-east-1'
        self.config['instance']['size'] = 't3.micro'
        ip = provision_vps.deploy_aws(self.config)
        self.assertEqual(ip, '1.2.3.4')
        mock_open_file.assert_called_with('/fake/path/key.pem', 'w')
        mock_chmod.assert_called_with('/fake/path/key.pem', 0o600)

    @patch('provision_vps.requests.post')
    @patch('provision_vps.requests.get')
    def test_deploy_vultr(self, mock_get, mock_post):
        mock_post.return_value.status_code = 201
        mock_post.return_value.json.return_value = {'instance': {'id': 'inst-123'}}
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {'instance': {'status': 'active', 'main_ip': '1.2.3.4'}}
        self.config['provider'] = 'vultr'
        self.config['credentials'] = {'api_key': 'fake_key'}
        self.config['instance'] = {
            'name': 'test-vps', 'region': 'ewr', 'plan': 'vc2-1c-1gb', 'os_id': 362,
            'ssh_key': '/fake/path/key.pem', 'ssh_key_ids': ['abc123'], 'hostname': 'myhost'
        }
        ip = provision_vps.deploy_vultr(self.config)
        self.assertEqual(ip, '1.2.3.4')
        mock_post.assert_called()

    @patch('provision_vps.linode_api4.LinodeClient')
    @patch('provision_vps.linode_api4.Instance')
    def test_deploy_linode(self, mock_instance, mock_client):
        mock_client_instance = MagicMock()
        mock_client.return_value = mock_client_instance
        mock_linode = MagicMock()
        mock_linode.status = 'running'
        mock_linode.ipv4 = ['1.2.3.4']
        mock_client_instance.linode.instance_create.return_value = (mock_linode, 'fake_pass')
        self.config['provider'] = 'linode'
        self.config['credentials'] = {'token': 'fake_token'}
        self.config['instance']['size'] = 'g6-nanode-1'
        self.config['instance']['image'] = 'linode/ubuntu24.04'
        self.config['instance']['ssh_key'] = 'ssh-rsa AAAAB3NzaC1yc2E... fake@key'
        ip = provision_vps.deploy_linode(self.config)
        self.assertEqual(ip, '1.2.3.4')
        mock_client_instance.linode.instance_create.assert_called()

    @patch('provision_vps.requests.post')
    @patch('provision_vps.requests.get')
    def test_deploy_hostinger(self, mock_get, mock_post):
        mock_post.return_value.status_code = 201
        mock_post.return_value.json.return_value = {'id': 'vm-123'}
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {'status': 'active', 'ip_address': '1.2.3.4'}
        self.config['provider'] = 'hostinger'
        self.config['credentials'] = {'api_key': 'fake_key'}
        self.config['instance'] = {
            'name': 'test-vps', 'data_center': 'us-east', 'plan': 'kvm-1',
            'os_template': 'ubuntu-24.04', 'ssh_key': 'ssh-rsa AAAAB3NzaC1yc2E... fake@key',
            'hostname': 'myhost', 'ssh_key_path': '/fake/path/key.pem'
        }
        ip = provision_vps.deploy_hostinger(self.config)
        self.assertEqual(ip, '1.2.3.4')
        mock_post.assert_called()

    @patch('provision_vps.requests.post')
    @patch('provision_vps.requests.get')
    def test_deploy_fly(self, mock_get, mock_post):
        mock_get.side_effect = [
            MagicMock(status_code=404),  # App not found
            MagicMock(status_code=200, json=MagicMock(return_value={'state': 'started', 'private_ip': '1.2.3.4'}))
        ]
        mock_post.side_effect = [
            MagicMock(status_code=200),  # Create app
            MagicMock(status_code=200, json=MagicMock(return_value={'id': 'mach-123'}))  # Create machine
        ]
        self.config['provider'] = 'fly'
        self.config['credentials'] = {'token': 'fake_token'}
        self.config['instance'] = {
            'app_name': 'my-app', 'name': 'my-machine', 'region': 'iad',
            'image': 'ubuntu:24.04', 'size': 'shared-cpu-1x',
            'ssh_key': 'ssh-rsa AAAAB3NzaC1yc2E... fake@key', 'ssh_key_path': '/fake/path/key.pem'
        }
        ip = provision_vps.deploy_fly(self.config)
        self.assertEqual(ip, '1.2.3.4')
        mock_post.assert_called()

    @patch('provision_vps.paramiko.RSAKey.from_private_key_file')
    @patch('provision_vps.paramiko.SSHClient')
    def test_setup_vps_via_ssh(self, mock_ssh_client, mock_rsa_key):
        mock_client = MagicMock()
        mock_ssh_client.return_value = mock_client
        mock_exec = mock_client.exec_command
        mock_exec.return_value = (MagicMock(), MagicMock(), MagicMock())
        mock_exec.return_value[1].read.return_value = b'output'
        mock_exec.return_value[2].read.return_value = b''
        mock_exec.return_value[2].channel.recv_exit_status.return_value = 0
        provision_vps.setup_vps_via_ssh('1.2.3.4', self.config)
        mock_client.connect.assert_called_with(
            hostname='1.2.3.4', username='ubuntu', pkey=mock_rsa_key.return_value, timeout=30
        )
        self.assertTrue(mock_exec.call_count > 0)

if __name__ == '__main__':
    unittest.main()