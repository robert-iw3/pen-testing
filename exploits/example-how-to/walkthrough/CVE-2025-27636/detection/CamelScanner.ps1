# Apache Advisory https://lists.apache.org/thread/l3zcg3vts88bmc7w8172wkgw610y693z
#
# This script iterates specified drives and checks for presence of vulnerable apache camel libraries
# It unzips the jar file in memory and fetched the version info from the MANIFEST.MF file
# An additional check is also performed to find the components of camel-exec and camel-sql
# For more accurate results run this script as Administrator

Add-Type -AssemblyName 'System.IO.Compression.FileSystem'

# Define these
$resultsFolder = "C:\\vulnerable_camel_results"
$resultsFilename = "results.txt"
$pathsToScan = @("C:\\", "D:\\")

# Constants
$detectionFilePath = Join-Path -Path $resultsFolder -ChildPath $resultsFilename
$camelExecFilename = "camel-exec*"
$camelSqlFilename = "camel-sql*"
$camelCoreFilePattern = '^camel-core(-\d+\.\d+\.\d+)?\.jar$'
$fileSearchRegex = "camel-core*.jar"
$manifestFileRelativePath = 'META-INF/MANIFEST.MF'


function Find-JarFile {
    param (
        [array]$drives
    )
    
    $foundFiles = @()
    
    foreach ($drive in $drives) {
        $searchPath = "$drive\**\$fileSearchRegex"
        $files = Get-ChildItem -Path $searchPath -Recurse -ErrorAction SilentlyContinue
        foreach ($file in $files) {
            if ($file.Name -match $camelCoreFilePattern) {
                $foundFiles += $file.FullName
            }
        }
    }
    
    return $foundFiles
}

function Unzip-JarFile {
    param (
        [string]$jarFilePath
    )
    
    try {
        $msg = "Opening $jarFilePath in memory for reading"
        Write-Host $msg
        $msg | Out-File -FilePath $detectionFilePath -Append
        $zipArchive = [IO.Compression.ZipFile]::OpenRead($jarFilePath)

        $manifestEntry = $zipArchive.Entries | Where-Object { $_.FullName -eq $manifestFileRelativePath }
        
        if ($manifestEntry) {
            $msg = "Found MANIFEST.MF inside the JAR"
            Write-Host $msg
            $msg | Out-File -FilePath $detectionFilePath -Append
            $stream = $manifestEntry.Open()
            $reader = New-Object System.IO.StreamReader($stream)
            $manifestContent = $reader.ReadToEnd()

            $implementationVersion = $null
            foreach ($line in $manifestContent.Split([Environment]::NewLine)) {
                if ($line -match "^Implementation-Version:\s*(.+)$") {
                    $implementationVersion = $matches[1]
                    break
                }
            }
            
            if ($implementationVersion) {
                $msg = "Camel library version: $implementationVersion"
                Write-Host $msg
                $msg | Out-File -FilePath $detectionFilePath -Append
                return $implementationVersion
            } else {
                $msg = "Implementation-Version not found in MANIFEST.MF"
                Write-Host $msg
                $msg | Out-File -FilePath $detectionFilePath -Append
            }
        } else {
            $msg = "MANIFEST.MF not found in the JAR file."
            Write-Host $msg
            $msg | Out-File -FilePath $detectionFilePath -Append
        }
        
        $zipArchive.Dispose()

    } catch {
        $msg = "Failed to process $jarFilePath $_"
        Write-Host $msg
        $msg | Out-File -FilePath $detectionFilePath -Append
		$zipArchive.Dispose()
    }
}

function Read-ManifestFile {
    param (
        [string]$extractedFolder
    )
    
    $manifestPath = Join-Path -Path $extractedFolder -ChildPath "META-INF\MANIFEST.MF"
    
    if (Test-Path $manifestPath) {
        $msg = "Reading MANIFEST.MF from $manifestPath..."
        Write-Host $msg
        $msg | Out-File -FilePath $detectionFilePath -Append
        $manifestContent = Get-Content -Path $manifestPath
        $implementationVersion = $null
        foreach ($line in $manifestContent) {
            if ($line -match "^Implementation-Version:\s*(.+)$") {
                $implementationVersion = $matches[1]
                break
            }
        }
        if ($implementationVersion) {
            $msg = "Camel library version: $implementationVersion"
            Write-Host $msg
            $msg | Out-File -FilePath $detectionFilePath -Append
            return $implementationVersion
        } else {
            $msg = "Implementation-Version not found in MANIFEST.MF"
            $msg | Out-File -FilePath $detectionFilePath -Append
            Write-Host $msg
        }

    } else {
        $msg = "MANIFEST.MF not found in the extracted folder"
        Write-Host $msg
        $msg | Out-File -FilePath $detectionFilePath -Append
    }
}


function IsVulnerableVersion {
    param (
        [string]$version
    )
	
	if ($version -notmatch '^\d+\.\d+\.\d+$') {
        throw "Invalid version format"
    }
    
    $versionObj = [Version]$version
    $vulnerableVersions = @(
        @{ "base" = "4.10.0"; "upper" = "4.10.2" }, # Apache Camel 4.10.0 before 4.10.2
        @{ "base" = "4.8.0"; "upper" = "4.8.5" },  # Apache Camel 4.8.0 before 4.8.5
        @{ "base" = "3.10.0"; "upper" = "3.22.4" }  # Apache Camel 3.10.0 before 3.22.4
    )
    
    foreach ($vulnRange in $vulnerableVersions) {
        $baseVersion = [Version]$vulnRange["base"]
        $upperVersion = [Version]$vulnRange["upper"]
        
        if ($versionObj -ge $baseVersion -and $versionObj -lt $upperVersion) {
            return $true
        }
    }
    
    return $false
}

Write-Host "Writing results to $detectionFilePath"
New-Item -ItemType Directory -Force -Path $resultsFolder | Out-Null
$msg = "Scanning paths $pathsToScan for camel core library"
Write-Host $msg
$msg | Out-File -FilePath $detectionFilePath
"" | Out-File -FilePath $detectionFilePath


$jarFilePath = Find-JarFile -drives $pathsToScan
$foundJarFiles = Find-JarFile -drives $pathsToScan


if ($foundJarFiles.Count -gt 0) {
    
    foreach ($jarFilePath in $foundJarFiles) {

        $msg = "Found camel-core at $jarFilePath."
        Write-Host $msg
        $msg | Out-File -FilePath $detectionFilePath -Append

        # Check if camel-exec and camel-sql are also present in the same folder
        $librariesFolder = Split-Path -Path $jarFilePath -Parent
        if (Test-Path (Join-Path -Path $librariesFolder -ChildPath $camelExecFilename)) {
            $msg = "Camel Exec component exists in original folder!"
            Write-Host $msg
            $msg | Out-File -FilePath $detectionFilePath -Append
        }
        if (Test-Path (Join-Path -Path $librariesFolder -ChildPath $camelSqlFilename)) {
            $msg = "Camel SQL component exists in original folder!"
            Write-Host $msg
            $msg | Out-File -FilePath $detectionFilePath -Append
        }

        $camelVersion = Unzip-JarFile -jarFilePath $jarFilePath

        if ($camelVersion)
        {
            $isVulnerable = IsVulnerableVersion($camelVersion)
            if ($isVulnerable)
            {
                $msg = "Vulnerable version found - $camelVersion"
                Write-Host $msg
                $msg | Out-File -FilePath $detectionFilePath -Append
            }
            else
            {
                $msg = "$camelVersion is not vulnerable"
                Write-Host $msg
                $msg | Out-File -FilePath $detectionFilePath -Append
            }
        }

        "" | Out-File -FilePath $detectionFilePath -Append
        Write-Host ""
    }
} 

else {
    $msg = "camel-core not found on the specified drives"
    Write-Host $msg
    $msg | Out-File -FilePath $detectionFilePath -Append
}
Write-Host "Scan Finished"
