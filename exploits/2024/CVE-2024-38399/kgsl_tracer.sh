#!/system/bin/sh
# kgsl_trace.sh - Interactive KGSL Tracing Helper
# Usage:
#   ./kgsl_trace.sh setup                 # Menu to enable/disable KGSL trace events
#   ./kgsl_trace.sh run /data/out.log     # Capture trace to file
#   ./kgsl_trace.sh stop                  # Stop ongoing trace session
#   ./kgsl_trace.sh setup phys=0x1234000  # Setup with filter on physical address

TRACE_PATH="/sys/kernel/tracing"
EVENTS_PATH="$TRACE_PATH/events/kgsl"
TRACE_PID_FILE="/data/local/tmp/kgsl_trace.pid"

setup_tracing() {
    FILTER_PHYS=""
    for arg in "$@"; do
        case $arg in
            phys=*)
                FILTER_PHYS="${arg#phys=}"
                ;;
        esac
    done

    echo "[*] Setting up KGSL tracing..."

    # Check if tracing system exists
    if [ ! -d "$TRACE_PATH" ]; then
        echo "[-] Error: Tracing path $TRACE_PATH not found."
        exit 1
    fi

    # Check if KGSL events exist
    if [ ! -d "$EVENTS_PATH" ]; then
        echo "[-] Error: KGSL events not available in $EVENTS_PATH"
        exit 1
    fi

    # Clear existing traces
    echo > "$TRACE_PATH/trace"

    echo "[*] Available KGSL events:"
    EVENTS=$(ls "$EVENTS_PATH" | grep -v enable | grep -v filter 2>/dev/null)
    if [ -z "$EVENTS" ]; then
        echo "[-] No KGSL events found under $EVENTS_PATH"
        exit 1
    fi

    i=1
    for evt in $EVENTS; do
        echo "  [$i] $evt"
        i=$((i+1))
    done

    echo
    echo "Enter event numbers (comma separated) to ENABLE (e.g. 1,3,5) or 'all':"
    read choice

    # Reset all to disabled first
    for evt in "$EVENTS_PATH"/*/enable; do
        if [ -f "$evt" ]; then
            echo 0 > "$evt"
        fi
    done

    if [ "$choice" = "all" ]; then
        for evt in "$EVENTS_PATH"/*/enable; do
            if [ -f "$evt" ]; then
                echo 1 > "$evt"
            fi
        done
        echo "[+] Enabled ALL KGSL events."
    else
        for num in $(echo "$choice" | tr ',' ' '); do
            evt=$(echo $EVENTS | cut -d' ' -f$num)
            if [ -n "$evt" ] && [ -d "$EVENTS_PATH/$evt" ]; then
                echo 1 > "$EVENTS_PATH/$evt/enable"
                echo "[+] Enabled: $evt"
            else
                echo "[-] Skipping invalid event number: $num"
            fi
        done
    fi

    # Optional: filter by physical address
    if [ -n "$FILTER_PHYS" ]; then
        if [ -f "$EVENTS_PATH/kgsl_mem_map/filter" ]; then
            echo "phys == $FILTER_PHYS" > "$EVENTS_PATH/kgsl_mem_map/filter"
        fi
        if [ -f "$EVENTS_PATH/kgsl_mem_free/filter" ]; then
            echo "phys == $FILTER_PHYS" > "$EVENTS_PATH/kgsl_mem_free/filter"
        fi
        echo "[+] Applied phys filter: $FILTER_PHYS"
    fi

    # Increase buffer size (8MB for longer captures)
    echo 8192 > "$TRACE_PATH/buffer_size_kb"

    echo "[+] KGSL tracing setup complete."
}

run_tracing() {
    OUTFILE=$1
    if [ -z "$OUTFILE" ]; then
        echo "Usage: $0 run /path/to/output.log"
        exit 1
    fi

    if [ ! -d "$TRACE_PATH" ]; then
        echo "[-] Error: Tracing path $TRACE_PATH not found."
        exit 1
    fi

    # Check if a session is already running
    if [ -f "$TRACE_PID_FILE" ]; then
        if kill -0 "$(cat "$TRACE_PID_FILE")" 2>/dev/null; then
            echo "[-] A trace session is already running (PID=$(cat "$TRACE_PID_FILE"))."
            echo "    Stop it first using Ctrl+C in that session window."
            exit 1
        else
            echo "[*] Cleaning up stale PID file..."
            rm -f "$TRACE_PID_FILE"
        fi
    fi

    # Clear existing traces
    echo > "$TRACE_PATH/trace"

    # Enable tracing
    echo 1 > "$TRACE_PATH/tracing_on"

    # Define cleanup function
    cleanup() {
        echo
        echo "[*] Caught Ctrl+C, stopping trace..."
        rm -f "$TRACE_PID_FILE"
        echo 0 > "$TRACE_PATH/tracing_on"
        echo "[+] Trace session stopped."
        exit 0
    }
    trap cleanup INT TERM

    echo "[*] Capturing KGSL-only trace events to $OUTFILE (also showing live)..."
    echo $$ > "$TRACE_PID_FILE"
    echo "[+] Trace running (PID=$$). Press Ctrl+C to stop."

    # Foreground capture
    while read -r line; do
        echo "$line" | grep trigger- | tee -a "$OUTFILE"
    done < "$TRACE_PATH/trace_pipe"
}

case "$1" in
    setup)
        shift
        setup_tracing "$@"
        ;;
    run)
        run_tracing "$2"
        ;;
    *)
        echo "Usage: $0 {setup [phys=0xADDR]|run /path/to/log}"
        exit 1
        ;;
esac

# 9,10,11,12,13,14,15,21,22,23,24,25,26,27,28,41,42,43,44,45,46,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,86,87,88,89,90,91,95,96,97,98