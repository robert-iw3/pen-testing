import base64
import argparse
from typing import List

# BOF imports
from core.gunnershell.bofs.base import Bof, register

from colorama import Style, Fore
brightgreen = "\001" + Style.BRIGHT + Fore.GREEN + "\002"
brightyellow = "\001" + Style.BRIGHT + Fore.YELLOW + "\002"
reset = Style.RESET_ALL

@register("ldapsearch")
class LdapSearchBof(Bof):
	base64bof: str = ""

	def help_menu():
		menu = """
ldapsearch — Execute LDAP query
-------------------------------

Description
  Runs an LDAP query against a Domain Controller and prints matching entries.
  Supports selecting attributes, scoping (BASE/ONE/SUBTREE), result limits,
  optional base DN, and LDAPS.

Usage
  ldapsearch <query> [-a <attributes>] [-c <count>] [--scope <scope>] [--dc <host>] [--dn <baseDN>] [--ldaps]

Positional
  query (required)    LDAP filter, e.g. "(objectClass=*)", "(samAccountName=jdoe)"

Options
  -a, --attributes <list>  Attributes to retrieve (comma-separated). Default: *
						   Examples: name,distinguishedName  |  *,ntSecurityDescriptor
  -c, --count <n>          Max results to return. 0 = no limit (default: 0)
  --scope <n>              Search scope (default: 3)
							 1 = BASE    (current object)
							 2 = LEVEL   (one level)
							 3 = SUBTREE (entire tree)
  --dc <host>              Domain Controller hostname/IP to query (default: auto/current DC)
  --dn <baseDN>            Base DN to search under (default: domain naming context)
						   Example: DC=contoso,DC=com
  --ldaps                  Use LDAPS/SSL (typically TCP 636)

Examples
  # List all objects in the domain root, show common attributes
  ldapsearch "(objectClass=*)" -a "name,objectClass,distinguishedName" -s 2

  # Find computers, include OS fields, top 50 only
  ldapsearch "(objectCategory=computer)" -a "name,operatingSystem,operatingSystemVersion" -c 50 --scope 3

  # Query a specific DC over LDAPS with explicit base DN
  ldapsearch "(samAccountName=jdoe)" --dc dc1.contoso.com --dn "DC=contoso,DC=com" --ldaps 

  # Pull security descriptors (requires rights; potentially large)
  ldapsearch "(objectClass=organizationalUnit)" -a "name,ntSecurityDescriptor" --scope 3 -c 20

Notes
  • Attribute list is comma-separated; "*" returns all standard attributes.
	Adding "ntSecurityDescriptor" can be heavy; use -c to limit results.
  • Scopes: BASE targets exactly the base DN; LEVEL is one level down; SUBTREE walks the entire subtree.
  • --ldaps requires the DC to support LDAPS and the client to trust its certificate.
  • If --dc/--dn are omitted, the BOF attempts to use the current domain’s default context.

Errors
  "Bind failed / server down"           → DC unreachable or LDAPS/cert issue
  "No such object"                      → Base DN incorrect
  "Insufficient access rights"          → Attribute (e.g., ntSecurityDescriptor) requires permissions
  "Size limit exceeded"                 → Tighten filter or set -c to a smaller number
"""
		print(brightgreen + menu + reset)
		return

	@staticmethod
	def args_inject(p):
		# Positional
		p.add_argument("query", help="LDAP filter, e.g. (objectClass=*)")

		# Options
		p.add_argument("-a", "--attributes", default="*", help="Comma-separated attributes (default: *)")
		p.add_argument("-c", "--count", type=int, default=0, help="Max results (0 = no limit)")
		# Use only the long form to avoid collision with core '-s' (int16)
		p.add_argument("--scope", type=int, choices=(1, 2, 3), default=3, help="1=BASE, 2=LEVEL, 3=SUBTREE (default: 3)")
		p.add_argument("--dc", default="", help="DC hostname/IP")
		p.add_argument("--dn", default="", help="Base DN (e.g., DC=contoso,DC=com)")
		p.add_argument("--ldaps", action="store_true", help="Use LDAPS (TCP 636)")
		return

	@staticmethod
	def build_remote_args(ns):
		"""
		Pack into: wstr,cstr,int,int,cstr,cstr,int
		-> [query, attributes, count, scope, dc, dn, ldaps]
		Map to your transport tokens:
		-Z: wide string, -z: cstring, -i: 32-bit int
		"""
		query = ns.query
		attrs = ns.attributes or "*"
		count = int(ns.count if ns.count is not None else 0)
		scope = int(ns.scope if ns.scope is not None else 3)
		dc    = ns.dc or ""
		dn    = ns.dn or ""
		ldaps = 1 if getattr(ns, "ldaps", False) else 0

		return [
			f"-Z:{query}",
			f"-z:{attrs}",
			f"-i:{count}",
			f"-i:{scope}",
			f"-z:{dc}",
			f"-z:{dn}",
			f"-i:{ldaps}",
		]
