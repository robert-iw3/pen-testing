import base64
import argparse
from typing import List

# BOF imports
from core.gunnershell.bofs.base import Bof, register

from colorama import Style, Fore
brightgreen = "\001" + Style.BRIGHT + Fore.GREEN + "\002"
brightyellow = "\001" + Style.BRIGHT + Fore.YELLOW + "\002"
reset = Style.RESET_ALL

@register("inline-execute")
class Inline_ExecuteBof(Bof):
	base64bof: str = ""

	def help_menu():
		menu = """
inline-execute — Perform in-process .NET assembly execution.
==============================================================

Usage:
  bofexec inline-execute <path> [params]

Arguments:
  path        Path to the .NET assembly to load and execute
  params      Optional .NET assembly parameters

Example:
  bofexec inline-execute C:\\Tools\\Seatbelt.exe -group=user
"""
		print(brightgreen + menu + reset)
		return

	@staticmethod
	def args_inject(p):
		p.add_argument("path", help="Path")
		p.add_argument("args", nargs=argparse.REMAINDER, help="Catch-all for any --keyword args")
		return

	@staticmethod
	def build_remote_args(ns):
		if not ns.path:
			print(brightyellow + "[*] You need to specify a path" + reset)
			return

		try:
			with open(ns.path, "rb") as f:
				filebytes = f.read()
				b64binary = base64.b64encode(filebytes).decode()

		except Exception as e:
			print(brightred + f"[!] Error reading/encoding file: {e}" + reset)
			return

		if not b64binary:
			print(brightyellow + f"[*] Unable to base64 encode binary!")
			return

		args = [f"-z:{b64binary}"]

		if ns.args:
			# Group remainder args into pairs: [--foo, bar] -> "--foo bar"
			paired_args = []
			it = iter(ns.args)
			for key in it:
				try:
					val = next(it)
					paired_args.append(f"-z:'{key} {val}'")
				except StopIteration:
					# Handle lonely flags like --verbose
					paired_args.append(f"-z:'{key}'")

			args.extend(paired_args)

		return args