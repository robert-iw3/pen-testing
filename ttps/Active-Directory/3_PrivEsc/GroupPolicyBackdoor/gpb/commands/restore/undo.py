import os
import json
import base64
import traceback

from gpb.protocols.ldap             import delete_entry, add_entry, modify_attribute, get_entry_attribute, get_entry, unset_attribute, serialize_ldap_entry_to_json
from gpb.protocols.smb              import delete_file, read_file_binary, write_file_binary, delete_directory, create_directory
from gpb.utils.clean                import clean_save_action

from config                         import logger, bcolors, AD_OPERATIONAL_ATTRIBUTES

class GPOUndo():
    
    def __init__(self,
                domain,
                dc,
                undo_state_folder,
                state_folder,
                gpo_guid,
                ldap_session):
        
        self.domain = domain
        self.domain_dn = ",".join("DC={}".format(d) for d in domain.split("."))
        self.dc = dc
        self.ldap_session = ldap_session
        self.gpo_guid = gpo_guid
        self.gpo_dn = f"CN={{{self.gpo_guid}}},CN=Policies,CN=System,{self.domain_dn}"
        self.gpo_sysvol_path = fr"\\{self.dc}\SYSVOL\{self.domain}\Policies\{{{self.gpo_guid}}}"
        self.state_folder = state_folder
        with open(os.path.join(undo_state_folder, "actions.json"), "r") as f:
            actions_json = json.load(f)
            self.actions_to_undo = actions_json["actions"]
            self.command = actions_json["command"]

    def run(self):
        logger.warning(f"\n{bcolors.OKCYAN}[#] Undoing {len(self.actions_to_undo)} actions generated by command '{self.command}' on {self.gpo_dn}{bcolors.ENDC}")

        ldap_create_entry = []
        smb_create_file = []
        smb_create_directory = []

        ldap_delete_entry = []
        smb_delete_file = []
        smb_delete_directory = []

        ldap_modify_attribute = []
        smb_modify_file = []

        for action in self.actions_to_undo:
            if action['action'] == 'ldap_create_entry':
                ldap_create_entry.append(action)
            elif action['action'] == 'smb_create_file':
                smb_create_file.append(action)
            elif action['action'] == 'smb_create_directory':
                smb_create_directory.append(action)
            elif action['action'] == 'ldap_delete_entry':
                ldap_delete_entry.append(action)
            elif action['action'] == 'smb_delete_file':
                smb_delete_file.append(action)
            elif action['action'] == 'smb_delete_directory':
                smb_delete_directory.append(action)
            elif action['action'] == 'ldap_modify_attribute':
                ldap_modify_attribute.append(action)
            elif action['action'] == 'smb_modify_file':
                smb_modify_file.append(action)
            

        # Sort LDAP entry created so that children will be handled before parent entries
        ldap_create_entry.sort(key=lambda action: len(action['item'].split(',')), reverse=True)
        # Sort SMB directories created so that children directories will be handled before parent directories
        smb_create_directory.sort(key=lambda action: len(action['item'].split('\\')), reverse=True)

        # Sort LDAP entries deleted so that parents will be handled before children entries
        ldap_delete_entry.sort(key=lambda action: len(action['item'].split(',')))
        # Sort SMB directories deleted so that parents will be handled before children directories
        smb_delete_directory.sort(key=lambda action: len(action['item'].split('\\')))


        for action in ldap_create_entry:            
            logger.warning(f"[*] Deleting LDAP entry {action['item']}")
            self.undo_ldap_create_entry(action)
        for action in ldap_delete_entry:
            logger.warning(f"[*] Recreating LDAP entry {action['item']}")
            self.undo_ldap_delete_entry(action)
        for action in ldap_modify_attribute:
            logger.warning(f"[*] Resetting the value of LDAP entry {action['item']} for attribute {action['attribute']}")
            self.undo_ldap_modify_attribute(action)
        
        for action in smb_create_file:
            logger.warning(f"[*] Deleting SMB file {action['item']}")
            self.undo_smb_create_file(action)
        for action in smb_create_directory:
            logger.warning(f"[*] Deleting SMB directory {action['item']}")
            self.undo_smb_create_directory(action)
        for action in smb_delete_directory:
            logger.warning(f"[*] Recreating SMB directory {action['item']}")
            self.undo_smb_delete_directory(action)
        for action in smb_delete_file:
            logger.warning(f"[*] Recreating SMB file {action['item']}")
            self.undo_smb_delete_file(action)
        for action in smb_modify_file:
            logger.warning(f"[*] Resetting the contents of SMB file {action['item']}")
            self.undo_smb_modify_file(action)

        
    def undo_ldap_create_entry(self, action):
        try:
            # To undo LDAP created entry, delete it
            entry_to_delete = get_entry(self.ldap_session, action['item'])
            entry_json = serialize_ldap_entry_to_json(entry_to_delete)
            delete_entry(self.ldap_session, action['item'])
            clean_save_action(self.state_folder, "ldap_delete_entry", action['item'], old_value=entry_json)
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()

    def undo_smb_create_file(self, action):
        try:
            # To undo SMB created file, delete it
            file_contents = read_file_binary(action['item'])
            delete_file(action['item'])
            clean_save_action(self.state_folder, "smb_delete_file", action['item'], old_value=base64.b64encode(file_contents).decode())
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()

    def undo_smb_create_directory(self, action):
        try:
            # To undo SMB created directory, delete it
            delete_directory(action['item'])
            clean_save_action(self.state_folder, "smb_delete_directory", action['item'])
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()

    def undo_ldap_delete_entry(self, action):
        try:
            # To undo LDAP deleted entry, recreate it with the saved attributes (excluding the Active Directory operational attributes)
            old_value = {}
            for attribute_name, attribute_values in action['old_value'].items():
                if attribute_name in AD_OPERATIONAL_ATTRIBUTES:
                    continue
                unserialized_attribute_values = []
                for attribute_value in attribute_values:
                    unserialized_attribute_values.append(base64.b64decode(attribute_value.encode()))
                old_value[attribute_name] = unserialized_attribute_values

            add_entry(self.ldap_session, action['item'], old_value)
            clean_save_action(self.state_folder, "ldap_create_entry", action['item'])
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()

    def undo_smb_delete_directory(self, action):
        try:
            # To undo SMB deleted directory, recreate it
            create_directory(action['item'])
            clean_save_action(self.state_folder, "smb_create_directory", action['item'])
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()

    def undo_smb_delete_file(self, action):
        try:
            # To undo SMB deleted file, recreate it with the saved content if the content was correctly saved
            if action['old_value'] == '!TOOBIG!':
                logger.error(f"{bcolors.FAIL}[!] Can't undo 'smb_delete_file' action for {{action['item']}} as original file content was too big. You can restore it manually from a backup")
                return
            write_file_binary(action['item'], base64.b64decode(action['old_value']))
            clean_save_action(self.state_folder, "smb_create_file", action['item'])
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()

    def undo_ldap_modify_attribute(self, action):
        try:
            # To undo the value change of an LDAP entry, replace new value by old value. If there was no old value, then unset the attribute
            original_value = get_entry_attribute(self.ldap_session, action['item'], action['attribute'])
            if action['old_value'] != '[]':
                modify_attribute(self.ldap_session, action['item'], action['attribute'], action['old_value'])
                clean_save_action(self.state_folder, "ldap_modify_attribute", action['item'], action['attribute'], old_value=original_value, new_value=action['old_value'])
            else:
                unset_attribute(self.ldap_session, action['item'], action['attribute'])
                clean_save_action(self.state_folder, "ldap_modify_attribute", action['item'], action['attribute'], old_value=original_value)
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()

    def undo_smb_modify_file(self, action):
        try:
            # To undo the contents change of an SMB file, replace new value by old value
            original_contents = read_file_binary(action['item'])
            write_file_binary(action['item'], base64.b64decode(action['old_value']))
            clean_save_action(self.state_folder, "smb_modify_file", action['item'], old_value=original_contents, new_value=action['old_value'])
        except Exception as e:
            logger.error(f"{bcolors.FAIL}[!] Failed to undo action {action['action']} for item {action['item']}{bcolors.ENDC}")
            traceback.print_exc()