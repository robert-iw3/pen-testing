--- a/efitools-1.9.2/lib/security_policy.c	2019-01-09 01:13:13.000000000 +0300
+++ b/efitools-1.9.2/lib/security_policy.c	2019-02-25 05:11:58.714084094 +0300
@@ -53,80 +53,17 @@
 
 BOOLEAN security_policy_mok_override(void)
 {
-	UINT8 *VarData;
-	UINTN VarLen;
-	UINT32 attr;
-	EFI_STATUS status;
-
-	/* Secure Boot Override: MokSBState.  If we're in insecure mode, boot
-	 * anyway regardless of dbx contents */
-	status = get_variable_attr(L"MokSBState", &VarData, &VarLen,
-				   MOK_OWNER, &attr);
-	if (status == EFI_SUCCESS) {
-		UINT8 MokSBState = VarData[0];
-
-		FreePool(VarData);
-		if ((attr & EFI_VARIABLE_RUNTIME_ACCESS) == 0
-		    && MokSBState)
-			return TRUE;
-	}
-	return FALSE;
+	return TRUE;
 }
 
 BOOLEAN security_policy_mok_deny(VOID *data, UINTN len)
 {
-	EFI_STATUS status;
-	UINT8 hash[SHA256_DIGEST_SIZE];
-
-	status = sha256_get_pecoff_digest_mem(data, len, hash);
-	if (status != EFI_SUCCESS)
-		return TRUE;
-
-	if (find_in_variable_esl(L"dbx", SIG_DB, hash, SHA256_DIGEST_SIZE)
-	    == EFI_SUCCESS)
-		/* MOK list cannot override dbx */
-		return FALSE;
-
-	if (find_in_variable_esl(L"MokListX", SIG_DB, hash, SHA256_DIGEST_SIZE)
-	    == EFI_SUCCESS)
-		return TRUE;
-
 	return FALSE;
 }
 
 BOOLEAN security_policy_mok_allow(VOID *data, UINTN len)
 {
-	EFI_STATUS status;
-	UINT8 hash[SHA256_DIGEST_SIZE];
-	UINT32 attr;
-	UINT8 *VarData;
-	UINTN VarLen;
-
-
-	status = sha256_get_pecoff_digest_mem(data, len, hash);
-	if (status != EFI_SUCCESS)
-		return TRUE;
-
-	status = get_variable_attr(L"MokList", &VarData, &VarLen, MOK_OWNER,
-				   &attr);
-	if (status != EFI_SUCCESS)
-		goto check_tmplist;
-
-	FreePool(VarData);
-
-	if (attr & EFI_VARIABLE_RUNTIME_ACCESS)
-		goto check_tmplist;
-
-	if (find_in_variable_esl(L"MokList", MOK_OWNER, hash, SHA256_DIGEST_SIZE) == EFI_SUCCESS)
-		return TRUE;
-
- check_tmplist:
-	if (security_policy_esl
-	    && find_in_esl(security_policy_esl, security_policy_esl_len, hash,
-			   SHA256_DIGEST_SIZE) == EFI_SUCCESS)
-		return TRUE;
-
-	return FALSE;
+	return TRUE;
 }
 
 static EFIAPI EFI_SECURITY_FILE_AUTHENTICATION_STATE esfas = NULL;
