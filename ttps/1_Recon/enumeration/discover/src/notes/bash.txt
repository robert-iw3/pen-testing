Bash


grep                                                          Search for a string
grep -i                                                       Search for a string and ignore the case
grep -r                                                       Search recursively for a string in a directory
zgrep                                                         Search for a string in a zip file
grep -v                                                       Exclude a string from a file
grep -Ev '(FOO|BAR)'                                          Exclude multiple strings from a file

cut -d ' ' -f2                                                Cut with a delimiter of a space, then print the second field
cut -d ' ' -f2-5                                              Cut with a delimiter of a space, then print the second through the fifth fields
cut -d ' ' -f2-                                               Cut with a delimiter of a space, then print the second field to the end

cut -f 2-                                                     Print from the second column to the end of the line
awk '{print $NF}'                                             Print the last column
awk '{print $2}'                                              Print the second column
awk '{print $2,$5}'                                           Print the second and fifth columns
awk '{printf "%-25s %s\n", $1, $2}'                           Print with the second column starting at 25 spaces
awk -F "https://" '{print $2}'                                Use a string as a delimiter, then print the second column

head                                                          Print the first 10 lines
head -5                                                       Print the first 5 lines
tail                                                          Print the last 10 lines
tail -5                                                       Print the last 5 lines
tail -f                                                       Print the contents of a file as it grows

sort                                                          Sort a file
sort -u                                                       Sort a file and show only unique values
awk '{ print length, $0 }' file | sort -n -k1,1 -k2 | cut -d' ' -f2-     Sort by length of characters on each line

wc -l                                                         Count the number of lines
wc -m                                                         Count the number of characters

comm file1 file2                                              Shared by both files
comm -<123> file1 file2                                       Used to suppress columns
comm -12 file1 file2                                          Suppress columns 1 and 2
diff -<c or u> file1 file2
vimdiff file1 file2
------------------------------------------------------------------------------------------------------------------------------------------------------

sed 's/^/FOO/g'                                               Add FOO to the beginning of each line
sed 's/$/FOO/g'                                               Add FOO to the end of each line

column -t                                                     Align columns
column -t -s ','                                              Align columns using a comma

sed /^$/d                                                     Compress blank lines
paste -s -d" "                                                Convert a list into a single line

apt install xml-twig-tools
xml_grep â€˜firstName' file.xml --text_only                     Extract data from XML element

grep -oe '[a-zA-Z0-9._]\+@[a-zA-Z]\+.[a-zA-Z]\+'              Find emails
grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'                    Find IPs
grep -E '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'                     Find lines that contain an IP

perl -pe 's/\d{2}\/\d{2}\/\d{2}//g'                           Find dates mm/dd/yy

sed '/[[:blank:]]/d'                                          Find lines that contain a single word
grep 'FOO'                                                    Find FOO
sed '/FOO/I,+12 d'                                            Find FOO and delete that and the next 12 lines
sed 's/FOO.*$//g'                                             Find FOO and delete to the end of file
sed 's/FOO/\n&/g'                                             Find FOO and insert a new line and FOO
grep 'FOO\|BAR'                                               Find FOO and lines that contain BAR
sed '1N;N;/\(.*\n\)\{2\}.*FOO/P;$d;D'                         Find FOO and print the second line before that
awk -v n=-2 'NR==n+1 && !NF{next} /FOO/ {n=NR}1'              Find FOO, if the next line is blank, delete it

awk -v n=-2 'NR==n+1 && !NF{next} /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/ {n=NR}1'
                                                              Find lines that start with IP, if the next line is blank, delete it

awk -v n=-2 'NR==n+1 && NF{print hold} /FOO/ {n=NR;hold=$0;next}1'
                                                              Find FOO, if the next line is blank, delete line containing FOO

awk '/FOO/ { FOO = 1; next }  FOO == 1 && /^$/ { FOO = 0; next }  { FOO = 0 }  { print }'
                                                              Find FOO, if the next line is blank, delete both lines

awk -v n=-2 'NR==n+1 {if($0 ~ /BAR/) { next; } else { print hold } } /FOO/ {n=NR;hold=$0;next}1'
                                                              Find FOO, if the next line contains BAR, delete both lines

sed 's/.* //'                                                 Find lines that contain a space and print from the space to the end of the line
grep -E 'FOO|BAR'                                             Find lines that contain FOO or BAR
grep '[0-9]'                                                  Find lines that contain a number
grep '[0-9]$'                                                 Find lines that end with a number
grep 'FOO$'                                                   Find lines that end with FOO
sed 's/FOO$//'                                                Find lines that end with FOO, and delete FOO

grep '^[0-9]'                                                 Find lines that start with a number
grep '^FOO'                                                   Find lines that start with FOO
sed '/^FOO/{n;d;}'                                            Find lines that start with FOO and delete the following line
printf '%s\n' 'g/^FOO/-1d' w | ed -s                          Find lines that start with FOO and delete the previous line
sed '/^FOO/i\ '                                               Find lines that start with FOO and insert a line before
sed '/^FOO/a\ '                                               Find lines that start with FOO and insert a line after
sed -e :a -e '$!N;s/\nFOO/ /;ta' -e 'P;D'                     Find lines that start with FOO, insert a space and append to the previous line

fmt -w 25                                                     Limit the number of characters on a line to 25

sed -n '/FOO/,$p'                                             Print from FOO to the end of the file
sed s/FOO.*//                                                 Print from FOO to the end of the line
sed -n '5,/^$/p'                                              Print from the 5th line to the first blank line
awk 'NR == 1 || NR % 3 == 0'                                  Print the first and every third line
awk 'NR % 3 == 0'                                             Print every third line
sed -n '/FOO/,/BAR/p'                                         Print lines between FOO and BAR
sed -e '/./{H;$!d;}' -e 'x;/FOO/!d;'                          Print paragraphs that contains FOO
awk '{print $2 " " $1}'                                       Print the second column, insert a space, then the first column

sed 's/[A-Z]\{2\},//g'                                        Remove any 2 capital letters followed by a comma
sed '/^$/d'                                                   Remove blank lines
sed '/./,$!d'                                                 Remove blank lines from the beginning of a file
sed -e :a -e '/^\n*$/{$d;N;ba' -e '}'                         Remove blank lines from the end of a file
sed 's/[0-9]\{2\}\/[0-9]\{2\}\/[0-9]\{2\}//g'                 Remove dates (mm/dd/yy)
cat -s                                                        Remove double spacing
sed 's/[a-zA-Z0-9\-]*@acme.org//g'                            Remove emails from a specific domain
find . -type f -empty -delete                                 Remove empty files in the current folder
sed 's/^....//'                                               Remove first 4 characters from each line
sed '1,5d'                                                    Remove first 5 lines
sed 's/^[ \t]*//; s/[ \t]*$//'                                Remove leading and trailing whitespace from each line
sed 's/^[ \t]*//'                                             Remove leading whitespace from each line
sed '/FOO/,/BAR/d'                                            Remove lines between FOO and BAR
awk '/FOO/{f=1} (!f || f>2){print} (f && /BAR/){f++}'         Remove lines from FOO and the second BAR
awk '$2 !~ /[a-z]/'                                           Remove lines that contain [a-z] in the second column
sed '/[[:blank:]]/!d'                                         Remove lines that contain a single word
awk 'NF != 2'                                                 Remove lines that contain two words
awk '!(/FOO/ && /BAR/)'                                       Remove lines that contain FOO and BAR
printf '%s\n' 'g/FOO/d\' '-d' w | ed -s                       Remove lines that contain FOO and the previous line
sed '/@.*@/d'                                                 Remove lines that contain two @ symbols
sed '/[0-9]/d'                                                Remove lines that contain a number
sed '/[0-9]$/d'                                               Remove lines that end with a number
sed '/FOO$/d'                                                 Remove lines that end with FOO
sed '/^[0-9]/d'                                               Remove lines that start with a number
sed '/^ /d'                                                   Remove lines that start with a space
sed '/^FOO/d'                                                 Remove lines that start with FOO
grep -Ev '^\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'                   Remove lines that start with an IP
sed '/^.,/d'                                                  Remove lines where the second letter is a comma
cat tmp | tr -d "\n" | tr -d " "                              Remove new lines and spaces. Example: copying a hash from Rubeus for use in Mimikatz
cat tmp | rev | sed 's/^[ \t]*//' | cut -d ' ' -f2- | rev     Remove the last column
head -n -5                                                    Remove the last 5 lines
sed 's/[ \t]*$//'                                             Remove trailing whitespace from each line
sed -r 's/([^ ]*acme\.org[^ ]*)/ /g'                          Remove URLs from a specific domain

sed 's/ \{2,\}/,/g'                                           Replace 2 or more spaces with a comma
sed 's/\.\.\.//g'                                             Replace 3 periods with nothing
sed 's/\t/:/g'                                                Replace a tab with a colon. Convert IP and ports columns from Excel into IP:port
sed 's/FOO/BAR/g'                                             Replace FOO with BAR
find . -type f -exec sed -i 's/FOO/BAR/g' {} +                Replace FOO with BAR recursively in the current directory
sed '/TEST/!s/FOO/BAR/g'                                      Replace FOO with BAR, except on lines that contain TEST
sed '/TEST/s/FOO/BAR/g'                                       Replace FOO with BAR, on lines that contain TEST
sed 's/FOO//g'                                                Replace FOO with nothing
sed -n 'H; ${x; s/\n/|/g; p}'                                 Replace 'new line' with a pipe '|'
sed 's/\./ /g'                                                Replace a period with a space
tr ';' '\n'                                                   Replace a semicolon with a new line
sed 's/\([^,]*,\)\{7\}[^,]*,/&\n/g'                           Replace the 8th comma with a new line

sort -k2                                                      Sort by the second column
sort -n -u -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4                   Sort IPs

sed 's/[^ ]\+/\L\u&/g'                                        Title case

tr -d '\t'                                                    Delete a tab
tr ',' '\n'                                                   Translate a comma to a new line
tr -s ' '                                                     Translate any number of spaces to a single space
tr '[:lower:]' '[:upper:]'                                    Translate lower case to upper case
tr '[:upper:]' '[:lower:]'                                    Translate upper case to lower case

sed "s/$FOO./$FOO/g"                                          Variables - use double quotes with sed or grep
------------------------------------------------------------------------------------------------------------------------------------------------------

# String together commands

semicolon (;)                                                 Does not depend on the first command completing with no errors
double ampersand (&&)                                         Depends on the first command completing with no errors
pipe (|)                                                      Uses output from the first command as input to the second command
------------------------------------------------------------------------------------------------------------------------------------------------------

# Check for root
if [ "$EUID" -ne 0 ]; then
    echo
    echo "[!] This option must be ran as root."
    echo
    exit 1
fi

# Check for regular user
if [ "$EUID" == 0 ]; then
    echo
    echo "[!] This option cannot be ran as root."
    echo
    exit 1
fi

# If no arguments, print usage
if [ $# -eq 0 ]; then
    echo
    echo "Usage: user@targetIP"
    echo
    exit 1
fi

# Check for two variables
read -p "Enter a color: " COLOR
read -p "Enter another color: " COLOR2

if [ "$COLOR" = "red" ] && [ "$COLOR2" = "grey" ]; then
    echo
    echo "The Wall won't fall."
    echo
    exit
else
    echo
    echo "Those colors are crap."
    echo
    exit 1
fi

# Check for a certain argument.
echo -e "Usage: test.sh <target IP> <scan type>"
if [ "$2" == "All" ]; then
    echo "Running all scans on $1."
else
    echo "Running a $2 scan on $1."
fi

# Check for a program
if ! command -v nmap &> /dev/null; then
    echo
    echo "Nmap is not installed."
    echo
    exit 1
fi

# Check for a certain file type
if [[ "$1" != *.xlsx ]]; then
    echo
    echo "[!] Only .xlsx supported."
    echo
    exit 1
fi

# Check for no answer
if [ -z "$COMPANY" ]; then
    echo
    echo "[!] No data entered."
    echo
    exit 1
fi

# Check for wrong answer
if [ ! -f "$LOCATION" ]; then
    echo
    echo "[!] The file does not exist."
    echo
    exit 1
fi

# Check for a valid CIDR
if [[ ! "$CIDR" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]+$ ]]; then
    echo
    echo "[!] Not a valid CIDR."
    echo
    exit 1
fi

# Check for a valid CVE
if [[ ! $CVE =~ ^CVE-[0-9]{4}-[0-9]{4,6}$ ]]; then
    echo
    echo "[!] Not a valid CVE."
    echo
    exit 1
fi

# Check for a valid domain
if [[ ! "$DOMAIN" =~ ^([a-zA-Z0-9](-?[a-zA-Z0-9])*\.)+[a-zA-Z]{2,63}$ ]]; then
    echo
    echo "[!] Not a valid domain."
    echo
    exit 1
fi

# Check for a valid IP address
if [[ ! "$IP" =~ ^([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$ ]]; then
    echo
    echo "[!] Not a valid IP address."
    echo
    exit 1
fi

# Check for a valid port number
if ! [ "$PORT" =~ ^[0-9]+$ ] || [ "$PORT" -lt 1 ] || [ "$PORT" -gt 65535 ]; then
    echo
    echo "[!] Not a valid number or port."
    echo
    exit 1
fi

# Give the user the option to quit
echo -n "Do you wish to continue? (y/N) "
read -r CHOICE

if [[ -z "$CHOICE" || "$CHOICE" =~ ^[Nn]$ ]]; then
    echo
    exit
elif [[ ! "$CHOICE" =~ ^[Yy]$ ]]; then
    echo
    echo "$MEDIUM"
    echo
    echo -e "${RED}[!] Invalid choice.${NC}"
    echo
    exit 1
fi
------------------------------------------------------------------------------------------------------------------------------------------------------

# Colors

RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
BLUE='\033[1;34m'
NC='\033[0m'

echo -e "I ${RED}love${NC} Discover."
------------------------------------------------------------------------------------------------------------------------------------------------------

# Compare two dates

date1=$(date +"%s")
date2=$(date +"%s")
diff=$(($date2-$date1))
echo "$(($diff / 60)) min and $(($diff % 60)) sec."
------------------------------------------------------------------------------------------------------------------------------------------------------

# Files and folders

if [ -f test ]; then
    echo "This file exists."
fi

if [ ! -f test ]; then
    echo "This file does not exist."
fi

if [ -s test ]; then
    echo "This file contains data."
fi

if [ ! -s test ]; then 
    echo "This file is empty."
fi

if [ -d test ]; then
    echo "This folder exists."
fi

if [ ! -d test ]; then
    echo "The folder does not exist."
fi
------------------------------------------------------------------------------------------------------------------------------------------------------

# If a process is running, kill it

PID=$(ps -ef | grep 'discover.sh' | grep -v 'grep' | awk '{print $2}')

if [ -n "$PID" ]; then
    kill -9 $PID
fi
------------------------------------------------------------------------------------------------------------------------------------------------------

# Read in a file and do something

while read -r LINE; do
    host "$LINE" | grep 'has address' | cut -d ' ' -f4
done < subdomains

while read -r LINE; do
    ike-scan -f "$LINE" >> "$NAME"/script-ike-scan.txt
done < "$NAME"/445.txt
------------------------------------------------------------------------------------------------------------------------------------------------------

# Special characters to escape

~|`|!|@|#|\$|%|\^|&|\*|\(|\)|_|-|\+|=|{|\[|}|]|\|:|;|"|<|,|>|\.|\?|/|
------------------------------------------------------------------------------------------------------------------------------------------------------

# Use a variable and set a constant

if [ "$PAYLOAD" == "1" ]; then
    FORMAT="raw"
    PLATFORM="android"
else
    FORMAT="exe"
    PLATFORM="windows"
fi
------------------------------------------------------------------------------------------------------------------------------------------------------

# xterm
-T         title
-bg        background color
-fa/-fs    font selection/font size
-fg        foreground color
-geometry  windows size in characters (WxH)
-e         execute command

In order to control the font size, both switches are needeed
xterm -fa 'Monospace' -fs 14

Postion a window center, run a command, and stay open
xterm -T "ping" -bg navy -fg white -geometry 90x10 -hold -e ping -c3 google.com

Position windows top right, run a command, and stay open
xterm -T "ping" -bg navy -fg white -geometry 90x10-0+0 -hold -e ping -c3 google.com

Change font size and ask for user input
xterm -T "ping" -bg navy -fg white -fa 'Monospace' -fs 11 -e "ping -c 3 8.8.8.8; echo; echo 'Press Enter to close this window'; read"

Change font size, position window top left, and ask for user input
xterm -T "ping" -bg navy -fg white -geometry 70x12-900+0 -fa 'Monospace' -fs 11 -e "ping -c 3 8.8.8.8; echo; echo 'Press Enter to close this window'; read"

Change font size, position window top right, and ask for user input
xterm -T "ping" -bg navy -fg white -geometry 70x12-0+0 -fa 'Monospace' -fs 11 -e "ping -c 3 8.8.8.8; echo; echo 'Press Enter to close this window'; read"

#!/bin/bash
# Open a new xterm window, name it 'ping', ping 8.8.8.8 three times, and prompt to press Enter to close
# -geometry 94x60+0+0
xterm -T "ping" -bg blue -fa 'Monospace' -fs 11 -fg white -e "ping -c 3 8.8.8.8; echo; echo 'Press Enter to close this window'; read"
------------------------------------------------------------------------------------------------------------------------------------------------------

# Clone all repos from a GitHub account

#!/bin/bash

DESTINATION_FOLDER="/opt/GhostPack"
REPOS_URL="https://api.github.com/users/GhostPack/repos"
REPOS=$(curl -s "$REPOS_URL" | grep clone_url | cut -d '"' -f4)

for REPO_URL in $REPOS; do
    REPO_NAME=$(basename "$REPO_URL" .git)
    REPO_DESTINATION="$DESTINATION_FOLDER/$REPO_NAME"

    if [ -d "$REPO_DESTINATION" ]; then
        echo "Updating $REPO_NAME."
        cd "$REPO_DESTINATION"
        git pull
        echo
    else
        git clone "$REPO_URL" "$REPO_DESTINATION"
        echo "Installing $REPO_NAME."
        echo
    fi
done
------------------------------------------------------------------------------------------------------------------------------------------------------

# Thanks for Aaron Stone

# Make GET request and parse JSON response using jq
RESPONSE=$(curl -s "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=$CVE")

# Parse JSON response using jq
DESCRIPTION=$(echo "$RESPONSE" | jq -r '.vulnerabilities[0].cve.descriptions[0].value')
PUBLISHED=$(echo "$RESPONSE" | jq -r '.vulnerabilities[0].cve.published')
LAST_MODIFIED=$(echo "$RESPONSE" | jq -r '.vulnerabilities[0].cve.lastModified')
SEVERITY=$(echo "$RESPONSE" | jq -r '.vulnerabilities[0].cve.metrics.cvssMetricV31[0].cvssData.baseSeverity')
CVSS_VERSION=$(echo "$RESPONSE" | jq -r '.vulnerabilities[0].cve.metrics.cvssMetricV31[0].cvssData.version')
CVSS_SCORE=$(echo "$RESPONSE" | jq -r '.vulnerabilities[0].cve.metrics.cvssMetricV31[0].cvssData.baseScore')
REFERENCE_URL=$(echo "$RESPONSE" | jq -r '.vulnerabilities[0].cve.references[0].url')

# Convert timestamps to desired format
PUBLISHED_FORMATTED=$(date -d "$PUBLISHED" "+%m-%d-%Y")
LAST_MODIFIED_FORMATTED=$(date -d "$LAST_MODIFIED" "+%m-%d-%Y")

# Output
echo "Description:    $DESCRIPTION"
echo
echo "Published:      $PUBLISHED_FORMATTED"
echo "Last modified:  $LAST_MODIFIED_FORMATTED"
echo "Severity:       $SEVERITY"
echo "CVSS version:   $CVSS_VERSION"
echo "CVSS score:     $CVSS_SCORE"
echo "Reference:      $REFERENCE_URL"
