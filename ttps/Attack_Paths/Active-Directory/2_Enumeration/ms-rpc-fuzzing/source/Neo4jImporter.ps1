#  Copyright 2025 Remco van der Meer. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

<#
.SYNOPSIS
Imports fuzzdata to Neo4j
.DESCRIPTION
This cmdlet imports a JSON file to Neo4j, will need a json file that was exported by Invoke-RpcFuzzer
.PARAMETER jsonFile
Specify the json file that was generated by Invoke-RpcFuzzer
.PARAMETER Neo4jHost
Specify the Neo4j host
.PARAMETER Neo4jUsername
Specify the Neo4j username
.INPUTS
JSON file
.OUTPUTS
None
.EXAMPLE
'.\output\Allowed.json' | Import-DataToNeo4j -Neo4jHost 192.168.178.89:7474 -Neo4jUsername neo4j
Import allowed.json
.EXAMPLE
'.\output\Parameters.json' | Import-DatatoNeo4j -Neo4jHost 192.168.178.89:7474 -Neo4jUsername neo4j
Import parameters.json
#>
function Import-DataToNeo4j {
    param (
        [Parameter(ValueFromPipeline=$true)]
        [string]$jsonFile,
        [string]$Neo4jHost,
        [string]$Neo4jUsername
    )
    # Define Neo4j connection details
    $neo4jBaseUri = "http://$Neo4jHost"
    $neo4jUsername = $Neo4jUsername
    $neo4jPassword = Read-Host -Prompt "Enter Neo4j Password" -AsSecureString

    # Set up the Neo4j connection using the wrapper function
    $neo4jconn = Set-CustomNeo4jConfiguration -BaseUri $neo4jBaseUri -Username $neo4jUsername -Password $neo4jPassword

    # Check if successfully connected to Neo4j
    if ($neo4jconn -eq $true) {
        Write-Host "[+] Successfully connected to Neo4j" -ForegroundColor Green
    } else {
        # A error get's raised automatically, so no need to write-host
        return
    }
    try {
        Write-Host "[+] Importing data to Neo4j..." -ForegroundColor Green
        Add-FuzzedInputNodeFromJson($jsonFile)
    } catch {
        Write-Host "Error importing data: $_"
    }
    return
}

# If the user specified procmonCsvPath, only import the CSV and map that in Neo4j
function Import-ProcMonCsv {
    param (
        [Parameter(ValueFromPipeline=$true)]
        [string]$procmonCsvPath,
        [string]$Canary = "incendiumrocks_",
        [string]$Neo4jHost,
        [string]$Neo4jUsername
    )
    # Define Neo4j connection details
    $neo4jBaseUri = "http://$Neo4jHost"
    $neo4jUsername = $Neo4jUsername
    $neo4jPassword = Read-Host -Prompt "Enter Neo4j Password" -AsSecureString

    # Set up the Neo4j connection using the wrapper function
    $neo4jconn = Set-CustomNeo4jConfiguration -BaseUri $neo4jBaseUri -Username $neo4jUsername -Password $neo4jPassword

    # Check if successfully connected to Neo4j
    if ($neo4jconn -eq $true) {
        Write-Host "[+] Successfully connected to Neo4j" -ForegroundColor Green
    } else {
        # A error get's raised automatically, so no need to write-host
        return
    }
    Import-PML -FilePath $procmonCsvPath -Canary $Canary
}