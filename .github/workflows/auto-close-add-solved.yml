name: Auto close issues and add solved label

permissions:
  contents: read
  issues: write
  pull-requests: read

on:
  pull_request:
    branches:
      - test
      - main
    types:
      - closed

jobs:
  check_issues_linked:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      issue_numbers: ${{ steps.get_linked_issues.outputs.issue_numbers }}
    steps:
      - name: Get linked issues from PR Development tab and matches with issues in PR description
        id: get_linked_issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const query = `
              query ($owner: String!, $repo: String!, $prNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $prNumber) {
                    closingIssuesReferences(first: 10) {
                      nodes {
                        number
                      }
                    }
                  }
                }
              }
            `;
            
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              prNumber: context.payload.pull_request.number
            };
            
            const result = await github.graphql(query, variables);
            const linkedIssues = result.repository.pullRequest.closingIssuesReferences.nodes.map(issue => issue.number);
            if (linkedIssues.length > 0) {
             const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              const prBody = pr.data.body || "";
              const issueRegex = /(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved) #(\d+)/gi;
              let issuesInDescription = []
              while ((match = issueRegex.exec(prBody)) !== null) {
                issuesInDescription.push(match[2]);
              }
              issuesInDescription = [...new Set(issuesInDescription)];
            
              core.setOutput("issue_numbers", issuesInDescription.join(' '));
            }
  auto_close_and_solve:
    needs: check_issues_linked
    if: ${{ needs.check_issues_linked.outputs.issue_numbers != '' && github.event.pull_request.merged == true}}
    runs-on: ubuntu-latest
    steps:
      - name: Add "solved" label to issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumbers = "${{ needs.check_issues_linked.outputs.issue_numbers }}".split(' ');
            for (const issueNumber of issueNumbers) {
              github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ["solved"]
              });
            }
      - name: Close the issues
        if: startsWith(github.event.pull_request.base.ref, 'release/')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumbers = "${{ needs.check_issues_linked.outputs.issue_numbers }}".split(' ');
            for (const issueNumber of issueNumbers) {
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: "closed"
              });
            }